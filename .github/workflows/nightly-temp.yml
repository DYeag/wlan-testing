name: nightly build
env:
  SSHPASS: ${{ secrets.SSHPASS }}
  # AWS credentials
  AWS_EKS_NAME: tip-wlan-main
  AWS_DEFAULT_OUTPUT: json
  AWS_DEFAULT_REGION: us-east-2
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_CLIENT_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_CLIENT_KEY }}

  # Cloud SDK certs
  CACERT: ${{ secrets.CACERT }}
  CAKEY: ${{ secrets.CAKEY }}

  # https://stackoverflow.com/questions/59977364/github-actions-how-use-strategy-matrix-with-script
  testbeds: '[
    {
      "number": "04",
      "ipAddress": "10.28.3.100"
    }
  ]'

on:
  workflow_dispatch:
  schedule:
  - cron: '15 0 * * *'

name: update cloud controllers build
defaults:
  run:
    shell: bash

jobs:
  generate-matrix:
    name: Generate matrix for build
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: generate-matrix
      id: set-matrix
      run: |
        echo '::set-output name=matrix::{"include":${{ env.testbeds }}}'

  # cloudsdk:
  #   name: Update CloudSDK instances
  #   runs-on: ubuntu-latest
  #   needs: [ generate-matrix ]
  #   strategy:
  #     matrix: ${{ fromJson( needs.generate-matrix.outputs.matrix ) }}
  #     fail-fast: false
  #   steps:
  #   - name: Checkout pki scripts repo
  #     uses: actions/checkout@v2
  #     with:
  #       path: wlan-pki
  #       repository: Telecominfraproject/wlan-pki-cert-scripts
  #   - name: Checkout Cloud SDK repo
  #     uses: actions/checkout@v2
  #     with:
  #       path: wlan-helm
  #       repository: Telecominfraproject/wlan-cloud-helm
  #   - name: Checkout helm values repo
  #     uses: actions/checkout@v2
  #     with:
  #       path: toolsmith
  #       repository: Telecominfraproject/Toolsmith
  #       token: ${{ secrets.PAT_TOKEN }}

  #   - name: Prepare environment deployment
  #     run: |
  #       mkdir -p ./wlan-pki/testCA/private ./wlan-pki/testCA/newcerts ./wlan-pki/generated
  #       touch ./wlan-pki/testCA/index.txt
  #       echo "01" > ./wlan-pki/testCA/serial.txt
  #       echo "${{ env.CACERT }}" | base64 -d > ./wlan-pki/testCA/cacert.pem
  #       echo "${{ env.CAKEY }}" | base64 -d > ./wlan-pki/testCA/private/cakey.pem
  #       ./toolsmith/helm-values/aws-cicd-testbed-deployment.yaml.sh ${{ matrix.number }} ${{ matrix.version }} > testbed-deployment.yaml

  #   - name: Generate certs
  #     working-directory: wlan-pki
  #     run: |
  #       ./generate_all.sh true
  #       ./copy-certs-to-helm.sh "../wlan-helm"

  #   - name: Fetch kubeconfig
  #     run: |
  #       aws eks update-kubeconfig  --name ${{ env.AWS_EKS_NAME }}
  #   - name: Deploy Cloud SDK
  #     working-directory: wlan-helm/tip-wlan
  #     run: |
  #       helm dependency update
  #       helm upgrade --install tip . -f ../../testbed-deployment.yaml --create-namespace --namespace nola-${{ matrix.number }} --wait --timeout 20m

  test:
    runs-on: ubuntu-latest
    needs: [ cloudsdk ]
    strategy:
      matrix: ${{ fromJson( needs.generate-matrix.outputs.matrix ) }}
      fail-fast: false
    steps:
    - name: Fetch kubeconfig
      run: |
        aws eks update-kubeconfig  --name ${{ env.AWS_EKS_NAME }}
        kubectl config set-context $(kubectl config current-context) --namespace nola-${{ matrix.number }}
    - name: run tests
      run: |
        today=$(date +"%d-%m-%Y")
        kubectl delete job nightly-ci-$today --wait=true --ignore-not-found=true

        cat <<EOF | kubectl apply -f -
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: nightly-ci-$today
        spec:
          template:
            spec:
              containers:
              - name: tests
                image: 4c74356b41/paramiko
                args: 
                - "--nola-number"
                - "${{ matrix.number }}"
                - "--jumpbox-address"
                - "${{ matrix.ipAddress }}"
                - "--jumpbox-password"
                - "${{ env.sshpass }}"
                command:
                - /test.py
              restartPolicy: Never
          backoffLimit: 0
        EOF
        sleep 60 # needed to wait for the pod to come up
        podname=$(kubectl get pods -o name -l job-name=nightly-ci-$today | sed "s/pod\///")
        kubectl logs $podname -f
