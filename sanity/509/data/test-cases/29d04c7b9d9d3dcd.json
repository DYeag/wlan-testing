{
  "uid" : "29d04c7b9d9d3dcd",
  "name" : "test_wpa_wpa2_personal_ssid_2g[setup_profiles0]",
  "fullName" : "e2e.basic.validation_of_operating_modes.nat_mode.client_connectivity.test_general_security_modes.TestNATModeConnectivitySuiteB#test_wpa_wpa2_personal_ssid_2g",
  "historyId" : "9832093793af33fccc16c6eb46bbcb3b",
  "time" : {
    "start" : 1624362078375,
    "stop" : 1624362078375,
    "duration" : 0
  },
  "description" : "Client Connectivity open ssid 2.4G\n           pytest -m \"client_connectivity and bridge and general and wpa_wpa2_personal_mixed and twog\"\n        ",
  "descriptionHtml" : "<p>Client Connectivity open ssid 2.4G\npytest -m &quot;client_connectivity and bridge and general and wpa_wpa2_personal_mixed and twog&quot;</p>\n",
  "status" : "broken",
  "statusMessage" : "IndexError: list index out of range",
  "statusTrace" : "request = <SubRequest 'setup_profiles' for <Function test_wpa3_personal_ssid_2g[setup_profiles0]>>\nsetup_controller = <controller.controller.Controller object at 0x7f93b0979d90>\ntestbed = 'basic-02', setup_vlan = 100, get_equipment_id = [3]\ninstantiate_profile = <controller.controller.ProfileUtility object at 0x7f93741ee3a0>\nget_markers = {'fiveg': True, 'open': True, 'radius': False, 'twog': True, ...}\ncreate_lanforge_chamberview_dut = 'basic-02'\nlf_tools = <lanforge.lf_tools.ChamberView object at 0x7f93b06aca90>\nget_security_flags = ['open', 'wpa', 'wep', 'wpa2_personal', 'wpa3_personal', 'wpa3_personal_mixed', ...]\nget_configuration = {'access_point': [{'ip': '10.28.3.100', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP2', 'mode': 'wifi6', ...}], 'cont... '2.4G-Station-Name': 'wlan0', '5G-Radio': ['wiphy0', 'wiphy5'], '5G-Station-Name': 'wlan0', ...}, 'name': 'lanforge'}}\nradius_info = {'ip': '10.10.10.72', 'name': 'basic-02-Automation-Radius-Profile-NAT', 'password': 'password', 'pk_password': 'whatever', ...}\nget_apnos = <class 'apnos.apnos.APNOS'>\n\n    @allure.feature(\"CLIENT CONNECTIVITY SETUP\")\n    @pytest.fixture(scope=\"class\")\n    def setup_profiles(request, setup_controller, testbed, setup_vlan, get_equipment_id,\n                       instantiate_profile, get_markers, create_lanforge_chamberview_dut, lf_tools,\n                       get_security_flags, get_configuration, radius_info, get_apnos):\n        instantiate_profile = instantiate_profile(sdk_client=setup_controller)\n        vlan_id, mode = 0, 0\n        instantiate_profile.cleanup_objects()\n        parameter = dict(request.param)\n        print(parameter)\n        test_cases = {}\n        profile_data = {}\n        if parameter['mode'] not in [\"BRIDGE\", \"NAT\", \"VLAN\"]:\n            print(\"Invalid Mode: \", parameter['mode'])\n            allure.attach(body=parameter['mode'], name=\"Invalid Mode: \")\n            yield test_cases\n    \n        if parameter['mode'] == \"NAT\":\n            mode = \"NAT\"\n            vlan_id = 1\n        if parameter['mode'] == \"BRIDGE\":\n            mode = \"BRIDGE\"\n            vlan_id = 1\n        if parameter['mode'] == \"VLAN\":\n            mode = \"BRIDGE\"\n            vlan_id = setup_vlan\n    \n        instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Equipment-AP-\" + parameter['mode'])\n    \n        profile_data[\"equipment_ap\"] = {\"profile_name\": testbed + \"-Equipment-AP-\" + parameter['mode']}\n        profile_data[\"ssid\"] = {}\n        for i in parameter[\"ssid_modes\"]:\n            profile_data[\"ssid\"][i] = []\n            for j in range(len(parameter[\"ssid_modes\"][i])):\n                profile_name = testbed + \"-SSID-\" + i + \"-\" + str(j) + \"-\" + parameter['mode']\n                data = parameter[\"ssid_modes\"][i][j]\n                data[\"profile_name\"] = profile_name\n                if \"mode\" not in dict(data).keys():\n                    data[\"mode\"] = mode\n                if \"vlan\" not in dict(data).keys():\n                    data[\"vlan\"] = vlan_id\n                instantiate_profile.delete_profile_by_name(profile_name=profile_name)\n                profile_data[\"ssid\"][i].append(data)\n        #         print(profile_name)\n        # print(profile_data)\n    \n        instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Automation-Radius-Profile-\" + mode)\n        time.sleep(10)\n        \"\"\"\n          Setting up rf profile\n        \"\"\"\n        rf_profile_data = {\n            \"name\": \"RF-Profile-\" + testbed + \"-\" + parameter['mode'] + \"-\" +\n                    get_configuration['access_point'][0]['mode']\n        }\n    \n        for i in parameter[\"rf\"]:\n            rf_profile_data[i] = parameter['rf'][i]\n        # print(rf_profile_data)\n    \n        try:\n            instantiate_profile.delete_profile_by_name(profile_name=rf_profile_data['name'])\n            instantiate_profile.set_rf_profile(profile_data=rf_profile_data,\n                                               mode=get_configuration['access_point'][0]['mode'])\n            allure.attach(body=str(rf_profile_data),\n                          name=\"RF Profile Created : \" + get_configuration['access_point'][0]['mode'])\n        except Exception as e:\n            print(e)\n            allure.attach(body=str(e), name=\"Exception \")\n    \n        # Radius Profile Creation\n        if parameter[\"radius\"]:\n            radius_info = radius_info\n            radius_info[\"name\"] = testbed + \"-Automation-Radius-Profile-\" + mode\n            instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Automation-Radius-Profile-\" + mode)\n            try:\n                instantiate_profile.create_radius_profile(radius_info=radius_info)\n                allure.attach(body=str(radius_info),\n                              name=\"Radius Profile Created\")\n                test_cases['radius_profile'] = True\n            except Exception as e:\n                print(e)\n                test_cases['radius_profile'] = False\n    \n        # SSID Profile Creation\n        lf_dut_data = []\n        for mode in profile_data['ssid']:\n            if mode == \"open\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_open_ssid_profile(profile_data=j)\n                                test_cases[\"open_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"open_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_open_ssid_profile(profile_data=j)\n                                test_cases[\"open_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"open_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_ssid_profile(profile_data=j)\n                                test_cases[\"wpa_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_ssid_profile(profile_data=j)\n                                test_cases[\"wpa_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa2_personal\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa2_personal_ssid_profile(profile_data=j)\n                                test_cases[\"wpa2_personal_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa2_personal_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa2_personal_ssid_profile(profile_data=j)\n                                test_cases[\"wpa2_personal_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa2_personal_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_wpa2_personal_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_wpa2_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa_wpa2_personal_mixed_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_wpa2_personal_mixed_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_wpa2_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa_wpa2_personal_mixed_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_wpa2_personal_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_personal\":\n                for j in profile_data[\"ssid\"][mode]:\n                    print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_personal_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_personal_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_personal_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_personal_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_personal_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_personal_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_personal_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa3_personal_mixed_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_personal_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa3_personal_mixed_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_personal_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n    \n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa_enterprise_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n    \n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_enterprise_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa_enterprise_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa2_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa2_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa2_enterprise_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa2_enterprise_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa2_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa2_enterprise_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa2_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_enterprise_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_enterprise_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_wpa2_enterprise_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_wpa2_enterprise_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa_wpa2_enterprise_mixed_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_wpa2_enterprise_mixed_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_wpa2_enterprise_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa_wpa2_enterprise_mixed_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_wpa2_enterprise_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_enterprise_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_enterprise_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa3_enterprise_mixed_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_mixed_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_enterprise_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa3_enterprise_mixed_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wep\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wep_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_enterprise_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wep_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_enterprise_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n        # Equipment AP Profile Creation\n        try:\n            instantiate_profile.set_ap_profile(profile_data=profile_data['equipment_ap'])\n            test_cases[\"equipment_ap\"] = True\n            allure.attach(body=str(profile_data['equipment_ap']),\n                          name=\"Equipment AP Profile Created\")\n        except Exception as e:\n            print(e)\n            test_cases[\"equipment_ap\"] = False\n            allure.attach(body=str(e),\n                          name=\"Equipment AP Profile Creation Failed\")\n    \n        # Push the Equipment AP Profile to AP\n        try:\n            for i in get_equipment_id:\n                instantiate_profile.push_profile_old_method(equipment_id=i)\n        except Exception as e:\n            print(e)\n            print(\"failed to create AP Profile\")\n    \n        ap_ssh = get_apnos(get_configuration['access_point'][0], pwd=\"../libs/apnos/\")\n        ssid_names = []\n        for i in instantiate_profile.profile_creation_ids[\"ssid\"]:\n            ssid_names.append(instantiate_profile.get_ssid_name_by_profile_id(profile_id=i))\n        ssid_names.sort()\n    \n        # This loop will check the VIF Config with cloud profile\n        vif_config = []\n        test_cases['vifc'] = False\n        for i in range(0, 18):\n            vif_config = list(ap_ssh.get_vif_config_ssids())\n            vif_config.sort()\n            print(vif_config)\n            print(ssid_names)\n            if ssid_names == vif_config:\n                test_cases['vifc'] = True\n                break\n            time.sleep(10)\n        allure.attach(body=str(\"VIF Config: \" + str(vif_config) + \"\\n\" + \"SSID Pushed from Controller: \" + str(ssid_names)),\n                      name=\"SSID Profiles in VIF Config and Controller: \")\n        ap_ssh = get_apnos(get_configuration['access_point'][0], pwd=\"../libs/apnos/\")\n    \n        # This loop will check the VIF Config with VIF State\n        test_cases['vifs'] = False\n        for i in range(0, 18):\n            vif_state = list(ap_ssh.get_vif_state_ssids())\n            vif_state.sort()\n            vif_config = list(ap_ssh.get_vif_config_ssids())\n            vif_config.sort()\n            print(vif_config)\n            print(vif_state)\n            if vif_state == vif_config:\n                test_cases['vifs'] = True\n                break\n            time.sleep(10)\n        allure.attach(body=str(\"VIF Config: \" + str(vif_config) + \"\\n\" + \"VIF State: \" + str(vif_state)),\n                      name=\"SSID Profiles in VIF Config and VIF State: \")\n    \n        ap_logs = ap_ssh.logread()\n        allure.attach(body=ap_logs, name=\"AP LOgs: \")\n>       ssid_info = ap_ssh.get_ssid_info()\n\ne2e/basic/conftest.py:573: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <apnos.apnos.APNOS object at 0x7f9374249cd0>\n\n    def get_ssid_info(self):\n        stdout = self.get_vif_state()\n        ssid_info_list = []\n        info = []\n        for i in stdout.splitlines():\n            ssid = str(i).replace(\" \", \"\").split(\".\")\n            # print(ssid)\n            if ssid[0].split(\":\")[0] == \"b'mac\":\n                mac_info_list = ssid[0].split(\":\")\n                mac_info_list.pop(0)\n                info.append(\":\".join(mac_info_list).replace(\"'\", \"\"))\n            if ssid[0].split(\":\")[0] == \"b'security\":\n                security = ssid[0].split(\":\")[1].split(\",\")[2].replace(\"]\", \"\").replace('\"', \"\").replace(\"'\", \"\")\n                print(ssid[0].split(\":\")[1])\n                if security != \"OPEN\":\n                    if security == \"WPA-PSK\":\n>                       if ssid[0].split(\":\")[1].split(\",\")[6].__contains__(\"1\"):\nE                       IndexError: list index out of range\n\n../libs/apnos/apnos.py:154: IndexError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "setup_test_run",
    "time" : {
      "start" : 1624354977565,
      "stop" : 1624354980079,
      "duration" : 2514
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "1f1abaed401c335e",
      "name" : "APNOS LIbrary: ",
      "source" : "1f1abaed401c335e.attach",
      "type" : "text/plain",
      "size" : 313
    }, {
      "uid" : "552ed9aa1b4a8b2d",
      "name" : "openwrt_ctl Setup",
      "source" : "552ed9aa1b4a8b2d.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "6ba181de9f9f7729",
      "name" : "get_active_firmware ",
      "source" : "6ba181de9f9f7729.attach",
      "type" : "text/plain",
      "size" : 33
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "radius_info",
    "time" : {
      "start" : 1624354988901,
      "stop" : 1624354988901,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "69a90b3fa6eb97be",
      "name" : "Radius server Info: ",
      "source" : "69a90b3fa6eb97be.attach",
      "type" : "text/plain",
      "size" : 126
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "test_cases",
    "time" : {
      "start" : 1624354980079,
      "stop" : 1624354980079,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_vif_state",
    "time" : {
      "start" : 1624362134521,
      "stop" : 1624362139888,
      "duration" : 5367
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "aa85e6267ab746bd",
      "name" : "APNOS LIbrary: ",
      "source" : "aa85e6267ab746bd.attach",
      "type" : "text/plain",
      "size" : 313
    }, {
      "uid" : "81d3b711c5fe1d0c",
      "name" : "openwrt_ctl Setup",
      "source" : "81d3b711c5fe1d0c.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "5c4086be722a0e65",
      "name" : "vif config Output Msg: ",
      "source" : "5c4086be722a0e65.attach",
      "type" : "text/plain",
      "size" : 11157
    }, {
      "uid" : "dd7f77d073cc6892",
      "name" : "vif config Err Msg: ",
      "source" : "dd7f77d073cc6892.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "8b44505469fef66c",
      "name" : "get_vif_config_ssids ",
      "source" : "8b44505469fef66c.attach",
      "type" : "text/plain",
      "size" : 118
    }, {
      "uid" : "e146348dbf860b11",
      "name" : "vif state Output Msg: ",
      "source" : "e146348dbf860b11.attach",
      "type" : "text/plain",
      "size" : 12275
    }, {
      "uid" : "f1daa11b0875cd08",
      "name" : "vif state Err Msg: ",
      "source" : "f1daa11b0875cd08.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "d2efd79b204295aa",
      "name" : "get_vif_state_ssids ",
      "source" : "d2efd79b204295aa.attach",
      "type" : "text/plain",
      "size" : 118
    }, {
      "uid" : "8dabe9a640911243",
      "name" : "vif_state",
      "source" : "8dabe9a640911243.attach",
      "type" : "text/plain",
      "size" : 118
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 9,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "lf_test",
    "time" : {
      "start" : 1624358485776,
      "stop" : 1624358485776,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_access_point",
    "time" : {
      "start" : 1624354972923,
      "stop" : 1624354974359,
      "duration" : 1436
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "36ce1084742a54b0",
      "name" : "added openwrtctl.py to :",
      "source" : "36ce1084742a54b0.attach",
      "type" : "text/plain",
      "size" : 14
    }, {
      "uid" : "cdeea79a399f4bc6",
      "name" : "APNOS LIbrary: ",
      "source" : "cdeea79a399f4bc6.attach",
      "type" : "text/plain",
      "size" : 313
    }, {
      "uid" : "cb28b446b938a63c",
      "name" : "openwrt_ctl Setup",
      "source" : "cb28b446b938a63c.attach",
      "type" : "text/plain",
      "size" : 9
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "setup_vlan",
    "time" : {
      "start" : 1624354985669,
      "stop" : 1624354985669,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "cd6fe6694018ddd2",
      "name" : "VLAN Created: ",
      "source" : "cd6fe6694018ddd2.attach",
      "type" : "text/plain",
      "size" : 5
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_security_flags",
    "time" : {
      "start" : 1624354985669,
      "stop" : 1624354985669,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_markers",
    "time" : {
      "start" : 1624354985669,
      "stop" : 1624354985671,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "14c620ed23b73305",
      "name" : "Test Cases Requires: ",
      "source" : "14c620ed23b73305.attach",
      "type" : "text/plain",
      "size" : 378
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "upgrade_firmware",
    "time" : {
      "start" : 1624354975095,
      "stop" : 1624354977564,
      "duration" : 2469
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "4681abe0672f8c25",
      "name" : "APNOS LIbrary: ",
      "source" : "4681abe0672f8c25.attach",
      "type" : "text/plain",
      "size" : 313
    }, {
      "uid" : "f5978595980757d",
      "name" : "openwrt_ctl Setup",
      "source" : "f5978595980757d.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "4fc6b4995725ccfd",
      "name" : "get_active_firmware ",
      "source" : "4fc6b4995725ccfd.attach",
      "type" : "text/plain",
      "size" : 33
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_apnos",
    "time" : {
      "start" : 1624354972923,
      "stop" : 1624354972923,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_influx",
    "time" : {
      "start" : 1624358485776,
      "stop" : 1624358485776,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "create_lanforge_chamberview_dut",
    "time" : {
      "start" : 1624354985982,
      "stop" : 1624354988901,
      "duration" : 2919
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "check_ap_firmware_cloud",
    "time" : {
      "start" : 1624354974643,
      "stop" : 1624354975094,
      "duration" : 451
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_profiles",
    "time" : {
      "start" : 1624362024088,
      "stop" : 1624362078149,
      "duration" : 54061
    },
    "status" : "broken",
    "statusMessage" : "IndexError: list index out of range\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 1126, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 925, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/wlan-testing/tests/e2e/basic/conftest.py\", line 573, in setup_profiles\n    ssid_info = ap_ssh.get_ssid_info()\n  File \"/wlan-testing/tests/../libs/apnos/apnos.py\", line 154, in get_ssid_info\n    if ssid[0].split(\":\")[1].split(\",\")[6].__contains__(\"1\"):\n",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "aabf24f37823bbe3",
      "name" : "RF Profile Created : wifi6",
      "source" : "aabf24f37823bbe3.attach",
      "type" : "text/plain",
      "size" : 41
    }, {
      "uid" : "700b0f8982f7682e",
      "name" : "SSID Profile Created",
      "source" : "700b0f8982f7682e.attach",
      "type" : "text/plain",
      "size" : 2812
    }, {
      "uid" : "4b63cb568c767933",
      "name" : "SSID Profile Created",
      "source" : "4b63cb568c767933.attach",
      "type" : "text/plain",
      "size" : 2830
    }, {
      "uid" : "956051462ad4ea75",
      "name" : "SSID Profile Created",
      "source" : "956051462ad4ea75.attach",
      "type" : "text/plain",
      "size" : 2821
    }, {
      "uid" : "c6e2b64df52afe4c",
      "name" : "SSID Profile Created",
      "source" : "c6e2b64df52afe4c.attach",
      "type" : "text/plain",
      "size" : 2839
    }, {
      "uid" : "6212aad9eca49dc0",
      "name" : "SSID Profile Created",
      "source" : "6212aad9eca49dc0.attach",
      "type" : "text/plain",
      "size" : 2824
    }, {
      "uid" : "c649ebc744d8cbc6",
      "name" : "SSID Profile Created",
      "source" : "c649ebc744d8cbc6.attach",
      "type" : "text/plain",
      "size" : 2842
    }, {
      "uid" : "f596dec9473589e",
      "name" : "Equipment AP Profile Created",
      "source" : "f596dec9473589e.attach",
      "type" : "text/plain",
      "size" : 45
    }, {
      "uid" : "1597a5098a209525",
      "name" : "APNOS LIbrary: ",
      "source" : "1597a5098a209525.attach",
      "type" : "text/plain",
      "size" : 313
    }, {
      "uid" : "c22186596b2ef572",
      "name" : "openwrt_ctl Setup",
      "source" : "c22186596b2ef572.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "c487a2befdbef8b9",
      "name" : "vif config Output Msg: ",
      "source" : "c487a2befdbef8b9.attach",
      "type" : "text/plain",
      "size" : 63
    }, {
      "uid" : "c1dd38705027a864",
      "name" : "vif config Err Msg: ",
      "source" : "c1dd38705027a864.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "a0120f7975caf165",
      "name" : "get_vif_config_ssids ",
      "source" : "a0120f7975caf165.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "f302515eaf603e2f",
      "name" : "vif config Output Msg: ",
      "source" : "f302515eaf603e2f.attach",
      "type" : "text/plain",
      "size" : 10212
    }, {
      "uid" : "bae8ffca9b276dbc",
      "name" : "vif config Err Msg: ",
      "source" : "bae8ffca9b276dbc.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "fb191c2341acaa50",
      "name" : "get_vif_config_ssids ",
      "source" : "fb191c2341acaa50.attach",
      "type" : "text/plain",
      "size" : 124
    }, {
      "uid" : "e41ad2cd56f1c8ed",
      "name" : "SSID Profiles in VIF Config and Controller: ",
      "source" : "e41ad2cd56f1c8ed.attach",
      "type" : "text/plain",
      "size" : 290
    }, {
      "uid" : "bdc6abc03ce809ed",
      "name" : "APNOS LIbrary: ",
      "source" : "bdc6abc03ce809ed.attach",
      "type" : "text/plain",
      "size" : 313
    }, {
      "uid" : "f4b27e877834545",
      "name" : "openwrt_ctl Setup",
      "source" : "f4b27e877834545.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "ac254f44aa2d4949",
      "name" : "vif state Output Msg: ",
      "source" : "ac254f44aa2d4949.attach",
      "type" : "text/plain",
      "size" : 62
    }, {
      "uid" : "f68155b44f932426",
      "name" : "vif state Err Msg: ",
      "source" : "f68155b44f932426.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "56036ffb71fe3a82",
      "name" : "get_vif_state_ssids ",
      "source" : "56036ffb71fe3a82.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "1f142c2b4927b735",
      "name" : "vif config Output Msg: ",
      "source" : "1f142c2b4927b735.attach",
      "type" : "text/plain",
      "size" : 10212
    }, {
      "uid" : "af527e08bbcc3400",
      "name" : "vif config Err Msg: ",
      "source" : "af527e08bbcc3400.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "2633d920e5286f22",
      "name" : "get_vif_config_ssids ",
      "source" : "2633d920e5286f22.attach",
      "type" : "text/plain",
      "size" : 124
    }, {
      "uid" : "e001941329c9eb80",
      "name" : "vif state Output Msg: ",
      "source" : "e001941329c9eb80.attach",
      "type" : "text/plain",
      "size" : 11482
    }, {
      "uid" : "e9495859750e9ddb",
      "name" : "vif state Err Msg: ",
      "source" : "e9495859750e9ddb.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "ac4e809e77443a11",
      "name" : "get_vif_state_ssids ",
      "source" : "ac4e809e77443a11.attach",
      "type" : "text/plain",
      "size" : 124
    }, {
      "uid" : "e1433817168e2b4b",
      "name" : "vif config Output Msg: ",
      "source" : "e1433817168e2b4b.attach",
      "type" : "text/plain",
      "size" : 10212
    }, {
      "uid" : "da4fe63d9b45aa20",
      "name" : "vif config Err Msg: ",
      "source" : "da4fe63d9b45aa20.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "eca6c44096a4cfd7",
      "name" : "get_vif_config_ssids ",
      "source" : "eca6c44096a4cfd7.attach",
      "type" : "text/plain",
      "size" : 124
    }, {
      "uid" : "a9ba3ee3a0e19574",
      "name" : "SSID Profiles in VIF Config and VIF State: ",
      "source" : "a9ba3ee3a0e19574.attach",
      "type" : "text/plain",
      "size" : 272
    }, {
      "uid" : "afefd25ef094c89e",
      "name" : "AP LOgs: ",
      "source" : "afefd25ef094c89e.attach",
      "type" : "text/plain",
      "size" : 69932
    }, {
      "uid" : "368e15f63e813922",
      "name" : "vif state Output Msg: ",
      "source" : "368e15f63e813922.attach",
      "type" : "text/plain",
      "size" : 12074
    }, {
      "uid" : "6c28c172242c7211",
      "name" : "vif state Err Msg: ",
      "source" : "6c28c172242c7211.attach",
      "type" : "text/plain",
      "size" : 109
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 35,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "get_lanforge_data",
    "time" : {
      "start" : 1624358485776,
      "stop" : 1624358485776,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_equipment_id",
    "time" : {
      "start" : 1624354974519,
      "stop" : 1624354974642,
      "duration" : 123
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_controller",
    "time" : {
      "start" : 1624354974360,
      "stop" : 1624354974519,
      "duration" : 159
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "dc144f6f978f8b3c",
      "name" : "Controller Instantiated: ",
      "source" : "dc144f6f978f8b3c.attach",
      "type" : "text/plain",
      "size" : 182
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_configuration",
    "time" : {
      "start" : 1624354972923,
      "stop" : 1624354972923,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "e1a0964ed22abff7",
      "name" : "Testbed Selected: ",
      "source" : "e1a0964ed22abff7.attach",
      "type" : "text/plain",
      "size" : 8
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "testbed",
    "time" : {
      "start" : 1624354972922,
      "stop" : 1624354972922,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "bf06414ca9294873",
      "name" : "Testbed Selected : ",
      "source" : "bf06414ca9294873.attach",
      "type" : "text/plain",
      "size" : 8
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "instantiate_profile",
    "time" : {
      "start" : 1624354985669,
      "stop" : 1624354985669,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_firmware",
    "time" : {
      "start" : 1624354974519,
      "stop" : 1624354974519,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "lf_tools",
    "time" : {
      "start" : 1624354985671,
      "stop" : 1624354985982,
      "duration" : 311
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "station_names_twog",
    "time" : {
      "start" : 1624358485776,
      "stop" : 1624358485776,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upgrade_firmware",
    "time" : {
      "start" : 1624354975094,
      "stop" : 1624354975095,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upload_firmware",
    "time" : {
      "start" : 1624354975095,
      "stop" : 1624354975095,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "update_report",
    "time" : {
      "start" : 1624354980079,
      "stop" : 1624354980079,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_latest_firmware",
    "time" : {
      "start" : 1624354975094,
      "stop" : 1624354975094,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "setup_test_run::0",
    "time" : {
      "start" : 1624364100085,
      "stop" : 1624364100085,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "radius_info::0",
    "time" : {
      "start" : 1624364100048,
      "stop" : 1624364100048,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "test_cases::0",
    "time" : {
      "start" : 1624364100081,
      "stop" : 1624364100081,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_vif_state::0",
    "time" : {
      "start" : 1624362541048,
      "stop" : 1624362541048,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "lf_test::0",
    "time" : {
      "start" : 1624364100082,
      "stop" : 1624364100082,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_access_point::0",
    "time" : {
      "start" : 1624364100156,
      "stop" : 1624364100156,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_vlan::0",
    "time" : {
      "start" : 1624364100080,
      "stop" : 1624364100080,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_security_flags::0",
    "time" : {
      "start" : 1624364100071,
      "stop" : 1624364100071,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_markers::0",
    "time" : {
      "start" : 1624364100063,
      "stop" : 1624364100063,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "upgrade_firmware::0",
    "time" : {
      "start" : 1624364100089,
      "stop" : 1624364100090,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_apnos::0",
    "time" : {
      "start" : 1624364100171,
      "stop" : 1624364100171,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_influx::0",
    "time" : {
      "start" : 1624364100084,
      "stop" : 1624364100084,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "check_ap_firmware_cloud::0",
    "time" : {
      "start" : 1624364100110,
      "stop" : 1624364100110,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_lanforge_data::0",
    "time" : {
      "start" : 1624364100084,
      "stop" : 1624364100084,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_equipment_id::0",
    "time" : {
      "start" : 1624364100125,
      "stop" : 1624364100125,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_controller::1",
    "time" : {
      "start" : 1624364100150,
      "stop" : 1624364100150,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_controller::teardown_controller",
    "time" : {
      "start" : 1624364100150,
      "stop" : 1624364100151,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "b81c112875c953cc",
      "name" : "Controller Teardown: ",
      "source" : "b81c112875c953cc.attach",
      "type" : "text/plain",
      "size" : 182
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_configuration::0",
    "time" : {
      "start" : 1624364100212,
      "stop" : 1624364100212,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testbed::0",
    "time" : {
      "start" : 1624364100238,
      "stop" : 1624364100238,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_profile::0",
    "time" : {
      "start" : 1624364100076,
      "stop" : 1624364100076,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_firmware::0",
    "time" : {
      "start" : 1624364100132,
      "stop" : 1624364100132,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "lf_tools::0",
    "time" : {
      "start" : 1624364100060,
      "stop" : 1624364100060,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "station_names_twog::0",
    "time" : {
      "start" : 1624364100173,
      "stop" : 1624364100173,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upgrade_firmware::0",
    "time" : {
      "start" : 1624364100098,
      "stop" : 1624364100098,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upload_firmware::0",
    "time" : {
      "start" : 1624364100094,
      "stop" : 1624364100094,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "update_report::0",
    "time" : {
      "start" : 1624364100081,
      "stop" : 1624364100081,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_latest_firmware::0",
    "time" : {
      "start" : 1624364100106,
      "stop" : 1624364100106,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "BRIDGE MODE CLIENT CONNECTIVITY"
  }, {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "story",
    "value" : "wpa wpa2 personal mixed 2.4 GHZ Band"
  }, {
    "name" : "tag",
    "value" : "wpa_wpa2_personal_mixed"
  }, {
    "name" : "tag",
    "value" : "sanity"
  }, {
    "name" : "tag",
    "value" : "twog"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('setup_profiles')"
  }, {
    "name" : "tag",
    "value" : "suiteB"
  }, {
    "name" : "tag",
    "value" : "client_connectivity"
  }, {
    "name" : "tag",
    "value" : "nat"
  }, {
    "name" : "tag",
    "value" : "general"
  }, {
    "name" : "parentSuite",
    "value" : "e2e.basic.validation_of_operating_modes.nat_mode.client_connectivity"
  }, {
    "name" : "suite",
    "value" : "test_general_security_modes"
  }, {
    "name" : "subSuite",
    "value" : "TestNATModeConnectivitySuiteB"
  }, {
    "name" : "host",
    "value" : "nightly-ci-509-r8djn"
  }, {
    "name" : "thread",
    "value" : "6-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "e2e.basic.validation_of_operating_modes.nat_mode.client_connectivity.test_general_security_modes"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "setup_profiles",
    "value" : "{'mode': 'NAT', 'ssid_modes': {'wpa3_personal': [{'ssid_name': 'ssid_wpa3_p_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal-0-NAT', 'mode': 'NAT', 'vlan': 1}, {'ssid_name': 'ssid_wpa3_p_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal-1-NAT', 'mode': 'NAT', 'vlan': 1}], 'wpa3_personal_mixed': [{'ssid_name': 'ssid_wpa3_p_m_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal_mixed-0-NAT', 'mode': 'NAT', 'vlan': 1}, {'ssid_name': 'ssid_wpa3_p_m_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal_mixed-1-NAT', 'mode': 'NAT', 'vlan': 1}], 'wpa_wpa2_personal_mixed': [{'ssid_name': 'ssid_wpa_wpa2_p_m_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa_wpa2_personal_mixed-0-NAT', 'mode': 'NAT', 'vlan': 1}, {'ssid_name': 'ssid_wpa_wpa2_p_m_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa_wpa2_personal_mixed-1-NAT', 'mode': 'NAT', 'vlan': 1}]}, 'rf': {}, 'radius': False}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 3,
        "passed" : 1,
        "unknown" : 0,
        "total" : 6
      },
      "items" : [ {
        "uid" : "2f6574f8b5f4b232",
        "status" : "broken",
        "statusDetails" : "swagger_client.rest.ApiException: (500)\nReason: \nHTTP response headers: HTTPHeaderDict({'Date': 'Tue, 22 Jun 2021 09:06:18 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'POST, PATCH, PUT, HEAD, GET, OPTIONS, DELETE', 'Access-Control-Max-Age': '10', 'Access-Control-Allow-Headers': 'x-requested-with,Content-Type,content-type,Authorization', 'Access-Control-Allow-Credentials': 'true', 'X-Content-Type-Options': 'nosniff', 'X-XSS-Protection': '1; mode=block', 'Strict-Transport-Security': 'max-age=31536000 ; includeSubDomains', 'X-Frame-Options': 'DENY', 'Cache-Control': 'no-cache, no-store, max-age=0, must-revalidate', 'Expires': '0', 'Pragma': 'no-cache', 'vary': 'accept-encoding'})\nHTTP response body: {\n  \"model_type\" : \"JsonSerializedException\",\n  \"exType\" : \"ResourceAccessException\",\n  \"error\" : \"I/O error on GET request for \\\"https://tip-wlan-prov-service:9091/api/profile/forCustomer\\\": Connect to tip-wlan-prov-service:9091 [tip-wlan-prov-service/172.20.29.206] failed: Connection refused; nested exception is org.apache.http.conn.HttpHostConnectException: Connect to tip-wlan-prov-service:9091 [tip-wlan-prov-service/172.20.29.206] failed: Connection refused\",\n  \"path\" : \"/portal/profile/forCustomer?customerId=2&amp;paginationContext=%7B%0A++++++++++++++++++++++++++++++++++++++++++++++++%22model_type%22%3A+%22PaginationContext%22%2C%0A++++++++++++++++++++++++++++++++++++++++++++++++%22maxItemsPerPage%22%3A+5000%0A++++++++++++++++++++++++++++++++++++++++%7D\",\n  \"timestamp\" : 1624352778079\n}",
        "time" : {
          "start" : 1624352778482,
          "stop" : 1624352778482,
          "duration" : 0
        }
      }, {
        "uid" : "22206f0f37249e90",
        "status" : "skipped",
        "statusDetails" : "XFAIL reason: SSID NOT AVAILABLE IN VIF STATE\n\n_pytest.outcomes.XFailed: SSID NOT AVAILABLE IN VIF STATE",
        "time" : {
          "start" : 1624261677529,
          "stop" : 1624261677529,
          "duration" : 0
        }
      }, {
        "uid" : "637e5cbbb96bd7a5",
        "status" : "skipped",
        "statusDetails" : "XFAIL reason: SSID NOT AVAILABLE IN VIF STATE\n\n_pytest.outcomes.XFailed: SSID NOT AVAILABLE IN VIF STATE",
        "time" : {
          "start" : 1624222142915,
          "stop" : 1624222142916,
          "duration" : 1
        }
      }, {
        "uid" : "cdf8bbf2b7c3b0f9",
        "status" : "skipped",
        "statusDetails" : "XFAIL reason: SSID NOT AVAILABLE IN VIF STATE\n\n_pytest.outcomes.XFailed: SSID NOT AVAILABLE IN VIF STATE",
        "time" : {
          "start" : 1624207737689,
          "stop" : 1624207737690,
          "duration" : 1
        }
      }, {
        "uid" : "a1401ea2635989d1",
        "status" : "passed",
        "time" : {
          "start" : 1624192317953,
          "stop" : 1624192396820,
          "duration" : 78867
        }
      } ]
    },
    "tags" : [ "nat", "@pytest.mark.usefixtures('setup_profiles')", "general", "suiteB", "wpa_wpa2_personal_mixed", "sanity", "client_connectivity", "twog" ]
  },
  "source" : "29d04c7b9d9d3dcd.json",
  "parameterValues" : [ "{'mode': 'NAT', 'ssid_modes': {'wpa3_personal': [{'ssid_name': 'ssid_wpa3_p_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal-0-NAT', 'mode': 'NAT', 'vlan': 1}, {'ssid_name': 'ssid_wpa3_p_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal-1-NAT', 'mode': 'NAT', 'vlan': 1}], 'wpa3_personal_mixed': [{'ssid_name': 'ssid_wpa3_p_m_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal_mixed-0-NAT', 'mode': 'NAT', 'vlan': 1}, {'ssid_name': 'ssid_wpa3_p_m_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal_mixed-1-NAT', 'mode': 'NAT', 'vlan': 1}], 'wpa_wpa2_personal_mixed': [{'ssid_name': 'ssid_wpa_wpa2_p_m_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa_wpa2_personal_mixed-0-NAT', 'mode': 'NAT', 'vlan': 1}, {'ssid_name': 'ssid_wpa_wpa2_p_m_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa_wpa2_personal_mixed-1-NAT', 'mode': 'NAT', 'vlan': 1}]}, 'rf': {}, 'radius': False}" ]
}