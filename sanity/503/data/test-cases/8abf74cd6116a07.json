{
  "uid" : "8abf74cd6116a07",
  "name" : "test_setup_wpa3_enterprise_mixed_2g_ssid_profile[setup_profiles0]",
  "fullName" : "e2e.basic.configuration_tests.bridge_mode.test_enterprise_security_modes_configuration.TestSetupBridgeEnterpriseSuiteB#test_setup_wpa3_enterprise_mixed_2g_ssid_profile",
  "historyId" : "08414d76ab355640cb93ca037e0d6901",
  "time" : {
    "start" : 1624186344858,
    "stop" : 1624186344858,
    "duration" : 0
  },
  "description" : " WPA3 Enterprise Mixed SSID 2.4G ",
  "descriptionHtml" : "<p>WPA3 Enterprise Mixed SSID 2.4G</p>\n",
  "status" : "broken",
  "statusMessage" : "swagger_client.rest.ApiException: (500)\nReason: \nHTTP response headers: HTTPHeaderDict({'Date': 'Sun, 20 Jun 2021 10:52:24 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'POST, PATCH, PUT, HEAD, GET, OPTIONS, DELETE', 'Access-Control-Max-Age': '10', 'Access-Control-Allow-Headers': 'x-requested-with,Content-Type,content-type,Authorization', 'Access-Control-Allow-Credentials': 'true', 'X-Content-Type-Options': 'nosniff', 'X-XSS-Protection': '1; mode=block', 'Strict-Transport-Security': 'max-age=31536000 ; includeSubDomains', 'X-Frame-Options': 'DENY', 'Cache-Control': 'no-cache, no-store, max-age=0, must-revalidate', 'Expires': '0', 'Pragma': 'no-cache', 'vary': 'accept-encoding'})\nHTTP response body: {\n  \"model_type\" : \"JsonSerializedException\",\n  \"exType\" : \"IllegalStateException\",\n  \"error\" : \"Profile with id 7409 is in use by 1 network equipment and cannot be deleted\",\n  \"path\" : \"/portal/profile?profileId=7409\",\n  \"timestamp\" : 1624186344575\n}",
  "statusTrace" : "request = <SubRequest 'setup_profiles' for <Function test_setup_wpa_wpa2_enterprise_mixed_2g_ssid_profile[setup_profiles0]>>\nsetup_controller = <controller.controller.Controller object at 0x7f351ba05b80>\ntestbed = 'basic-01', setup_vlan = 100, get_equipment_id = [38]\ninstantiate_profile = <controller.controller.ProfileUtility object at 0x7f3518105730>\nget_markers = {'fiveg': True, 'open': True, 'radius': False, 'twog': True, ...}\ncreate_lanforge_chamberview_dut = 'basic-01'\nlf_tools = <lanforge.lf_tools.ChamberView object at 0x7f351b9fcfd0>\nget_security_flags = ['open', 'wpa', 'wep', 'wpa2_personal', 'wpa3_personal', 'wpa3_personal_mixed', ...]\nget_configuration = {'access_point': [{'ip': '10.28.3.100', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP1', 'mode': 'wifi5', ...}], 'cont... '2.4G-Station-Name': 'wlan0', '5G-Radio': ['wiphy0', 'wiphy5'], '5G-Station-Name': 'wlan0', ...}, 'name': 'lanforge'}}\nradius_info = {'ip': '10.10.10.72', 'password': 'password', 'pk_password': 'whatever', 'port': 1812, ...}\nget_apnos = <class 'apnos.apnos.APNOS'>\n\n    @allure.feature(\"CLIENT CONNECTIVITY SETUP\")\n    @pytest.fixture(scope=\"class\")\n    def setup_profiles(request, setup_controller, testbed, setup_vlan, get_equipment_id,\n                       instantiate_profile, get_markers, create_lanforge_chamberview_dut, lf_tools,\n                       get_security_flags, get_configuration, radius_info, get_apnos):\n        instantiate_profile = instantiate_profile(sdk_client=setup_controller)\n        vlan_id, mode = 0, 0\n        instantiate_profile.cleanup_objects()\n        parameter = dict(request.param)\n        print(parameter)\n        test_cases = {}\n        profile_data = {}\n        if parameter['mode'] not in [\"BRIDGE\", \"NAT\", \"VLAN\"]:\n            print(\"Invalid Mode: \", parameter['mode'])\n            allure.attach(body=parameter['mode'], name=\"Invalid Mode: \")\n            yield test_cases\n    \n        if parameter['mode'] == \"NAT\":\n            mode = \"NAT\"\n            vlan_id = 1\n        if parameter['mode'] == \"BRIDGE\":\n            mode = \"BRIDGE\"\n            vlan_id = 1\n        if parameter['mode'] == \"VLAN\":\n            mode = \"BRIDGE\"\n            vlan_id = setup_vlan\n    \n        instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Equipment-AP-\" + parameter['mode'])\n    \n        profile_data[\"equipment_ap\"] = {\"profile_name\": testbed + \"-Equipment-AP-\" + parameter['mode']}\n        profile_data[\"ssid\"] = {}\n        for i in parameter[\"ssid_modes\"]:\n            profile_data[\"ssid\"][i] = []\n            for j in range(len(parameter[\"ssid_modes\"][i])):\n                profile_name = testbed + \"-SSID-\" + i + \"-\" + str(j) + \"-\" + parameter['mode']\n                data = parameter[\"ssid_modes\"][i][j]\n                data[\"profile_name\"] = profile_name\n                if \"mode\" not in dict(data).keys():\n                    data[\"mode\"] = mode\n                if \"vlan\" not in dict(data).keys():\n                    data[\"vlan\"] = vlan_id\n                instantiate_profile.delete_profile_by_name(profile_name=profile_name)\n                profile_data[\"ssid\"][i].append(data)\n        #         print(profile_name)\n        # print(profile_data)\n    \n>       instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Automation-Radius-Profile-\" + mode)\n\ne2e/basic/conftest.py:98: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../libs/controller/controller.py:439: in delete_profile_by_name\n    self.delete_profile(profile_id=[i._id])\n../libs/controller/controller.py:1254: in delete_profile\n    self.profile_client.delete_profile(profile_id=i)\n/usr/local/lib/python3.8/site-packages/swagger_client/api/profile_api.py:150: in delete_profile\n    (data) = self.delete_profile_with_http_info(profile_id, **kwargs)  # noqa: E501\n/usr/local/lib/python3.8/site-packages/swagger_client/api/profile_api.py:209: in delete_profile_with_http_info\n    return self.api_client.call_api(\n/usr/local/lib/python3.8/site-packages/swagger_client/api_client.py:316: in call_api\n    return self.__call_api(resource_path, method,\n/usr/local/lib/python3.8/site-packages/swagger_client/api_client.py:148: in __call_api\n    response_data = self.request(\n/usr/local/lib/python3.8/site-packages/swagger_client/api_client.py:382: in request\n    return self.rest_client.DELETE(url,\n/usr/local/lib/python3.8/site-packages/swagger_client/rest.py:259: in DELETE\n    return self.request(\"DELETE\", url,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <swagger_client.rest.RESTClientObject object at 0x7f351bbd7850>\nmethod = 'DELETE'\nurl = 'https://wlan-portal-svc-nola-ext-04.cicd.lab.wlan.tip.build/portal/profile?profileId=7409'\nquery_params = [('profileId', 7409)]\nheaders = {'Accept': 'application/json', 'Authorization': 'Bearer eyJpc3MiOiJ0aXAiLCJqdGkiOiI3NTIwN2QzYy03MTMzLTQ4NmItOWUzMy1hYz...VQD1tm.CNKTqbriJmLQtyURi2CAUuOd.Ca.', 'Content-Type': 'application/json', 'User-Agent': 'Swagger-Codegen/1.0.0/python'}\nbody = None, post_params = {}, _preload_content = True, _request_timeout = None\n\n    def request(self, method, url, query_params=None, headers=None,\n                body=None, post_params=None, _preload_content=True,\n                _request_timeout=None):\n        \"\"\"Perform requests.\n    \n        :param method: http request method\n        :param url: http request url\n        :param query_params: query parameters in the url\n        :param headers: http request headers\n        :param body: request json body, for `application/json`\n        :param post_params: request post parameters,\n                            `application/x-www-form-urlencoded`\n                            and `multipart/form-data`\n        :param _preload_content: if False, the urllib3.HTTPResponse object will\n                                 be returned without reading/decoding response\n                                 data. Default is True.\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        \"\"\"\n        method = method.upper()\n        assert method in ['GET', 'HEAD', 'DELETE', 'POST', 'PUT',\n                          'PATCH', 'OPTIONS']\n    \n        if post_params and body:\n            raise ValueError(\n                \"body parameter cannot be used with post_params parameter.\"\n            )\n    \n        post_params = post_params or {}\n        headers = headers or {}\n    \n        timeout = None\n        if _request_timeout:\n            if isinstance(_request_timeout, (int, ) if six.PY3 else (int, long)):  # noqa: E501,F821\n                timeout = urllib3.Timeout(total=_request_timeout)\n            elif (isinstance(_request_timeout, tuple) and\n                  len(_request_timeout) == 2):\n                timeout = urllib3.Timeout(\n                    connect=_request_timeout[0], read=_request_timeout[1])\n    \n        if 'Content-Type' not in headers:\n            headers['Content-Type'] = 'application/json'\n    \n        try:\n            # For `POST`, `PUT`, `PATCH`, `OPTIONS`, `DELETE`\n            if method in ['POST', 'PUT', 'PATCH', 'OPTIONS', 'DELETE']:\n                if query_params:\n                    url += '?' + urlencode(query_params)\n                if re.search('json', headers['Content-Type'], re.IGNORECASE):\n                    request_body = '{}'\n                    if body is not None:\n                        request_body = json.dumps(body)\n                    r = self.pool_manager.request(\n                        method, url,\n                        body=request_body,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                elif headers['Content-Type'] == 'application/x-www-form-urlencoded':  # noqa: E501\n                    r = self.pool_manager.request(\n                        method, url,\n                        fields=post_params,\n                        encode_multipart=False,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                elif headers['Content-Type'] == 'multipart/form-data':\n                    # must del headers['Content-Type'], or the correct\n                    # Content-Type which generated by urllib3 will be\n                    # overwritten.\n                    del headers['Content-Type']\n                    r = self.pool_manager.request(\n                        method, url,\n                        fields=post_params,\n                        encode_multipart=True,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                # Pass a `string` parameter directly in the body to support\n                # other content types than Json when `body` argument is\n                # provided in serialized form\n                elif isinstance(body, str):\n                    request_body = body\n                    r = self.pool_manager.request(\n                        method, url,\n                        body=request_body,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                else:\n                    # Cannot generate the request from given parameters\n                    msg = \"\"\"Cannot prepare a request message for provided\n                             arguments. Please check that your arguments match\n                             declared content type.\"\"\"\n                    raise ApiException(status=0, reason=msg)\n            # For `GET`, `HEAD`\n            else:\n                r = self.pool_manager.request(method, url,\n                                              fields=query_params,\n                                              preload_content=_preload_content,\n                                              timeout=timeout,\n                                              headers=headers)\n        except urllib3.exceptions.SSLError as e:\n            msg = \"{0}\\n{1}\".format(type(e).__name__, str(e))\n            raise ApiException(status=0, reason=msg)\n    \n        if _preload_content:\n            r = RESTResponse(r)\n    \n            # In the python 3, the response.data is bytes.\n            # we need to decode it to string.\n            if six.PY3:\n                r.data = r.data.decode('utf8')\n    \n            # log response body\n            logger.debug(\"response body: %s\", r.data)\n    \n        if not 200 <= r.status <= 299:\n>           raise ApiException(http_resp=r)\nE           swagger_client.rest.ApiException: (500)\nE           Reason: \nE           HTTP response headers: HTTPHeaderDict({'Date': 'Sun, 20 Jun 2021 10:52:24 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'POST, PATCH, PUT, HEAD, GET, OPTIONS, DELETE', 'Access-Control-Max-Age': '10', 'Access-Control-Allow-Headers': 'x-requested-with,Content-Type,content-type,Authorization', 'Access-Control-Allow-Credentials': 'true', 'X-Content-Type-Options': 'nosniff', 'X-XSS-Protection': '1; mode=block', 'Strict-Transport-Security': 'max-age=31536000 ; includeSubDomains', 'X-Frame-Options': 'DENY', 'Cache-Control': 'no-cache, no-store, max-age=0, must-revalidate', 'Expires': '0', 'Pragma': 'no-cache', 'vary': 'accept-encoding'})\nE           HTTP response body: {\nE             \"model_type\" : \"JsonSerializedException\",\nE             \"exType\" : \"IllegalStateException\",\nE             \"error\" : \"Profile with id 7409 is in use by 1 network equipment and cannot be deleted\",\nE             \"path\" : \"/portal/profile?profileId=7409\",\nE             \"timestamp\" : 1624186344575\nE           }\n\n/usr/local/lib/python3.8/site-packages/swagger_client/rest.py:227: ApiException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "update_report",
    "time" : {
      "start" : 1624186327124,
      "stop" : 1624186327124,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "upgrade_firmware",
    "time" : {
      "start" : 1624186322120,
      "stop" : 1624186324597,
      "duration" : 2477
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "7a5827b597232e90",
      "name" : "APNOS LIbrary: ",
      "source" : "7a5827b597232e90.attach",
      "type" : "text/plain",
      "size" : 316
    }, {
      "uid" : "a15a934d0eb5edb0",
      "name" : "openwrt_ctl Setup",
      "source" : "a15a934d0eb5edb0.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "3019d13b878c842",
      "name" : "get_active_firmware ",
      "source" : "3019d13b878c842.attach",
      "type" : "text/plain",
      "size" : 34
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "radius_info",
    "time" : {
      "start" : 1624186336096,
      "stop" : 1624186336096,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "5aa9ece4f19f4ac3",
      "name" : "Radius server Info: ",
      "source" : "5aa9ece4f19f4ac3.attach",
      "type" : "text/plain",
      "size" : 126
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "should_upload_firmware",
    "time" : {
      "start" : 1624186322120,
      "stop" : 1624186322120,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "test_cases",
    "time" : {
      "start" : 1624186327124,
      "stop" : 1624186327124,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_profiles",
    "time" : {
      "start" : 1624186342441,
      "stop" : 1624186344578,
      "duration" : 2137
    },
    "status" : "broken",
    "statusMessage" : "swagger_client.rest.ApiException: (500)\nReason: \nHTTP response headers: HTTPHeaderDict({'Date': 'Sun, 20 Jun 2021 10:52:24 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'POST, PATCH, PUT, HEAD, GET, OPTIONS, DELETE', 'Access-Control-Max-Age': '10', 'Access-Control-Allow-Headers': 'x-requested-with,Content-Type,content-type,Authorization', 'Access-Control-Allow-Credentials': 'true', 'X-Content-Type-Options': 'nosniff', 'X-XSS-Protection': '1; mode=block', 'Strict-Transport-Security': 'max-age=31536000 ; includeSubDomains', 'X-Frame-Options': 'DENY', 'Cache-Control': 'no-cache, no-store, max-age=0, must-revalidate', 'Expires': '0', 'Pragma': 'no-cache', 'vary': 'accept-encoding'})\nHTTP response body: {\n  \"model_type\" : \"JsonSerializedException\",\n  \"exType\" : \"IllegalStateException\",\n  \"error\" : \"Profile with id 7409 is in use by 1 network equipment and cannot be deleted\",\n  \"path\" : \"/portal/profile?profileId=7409\",\n  \"timestamp\" : 1624186344575\n}\n\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 1126, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 925, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/wlan-testing/tests/e2e/basic/conftest.py\", line 98, in setup_profiles\n    instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Automation-Radius-Profile-\" + mode)\n  File \"/wlan-testing/tests/../libs/controller/controller.py\", line 439, in delete_profile_by_name\n    self.delete_profile(profile_id=[i._id])\n  File \"/wlan-testing/tests/../libs/controller/controller.py\", line 1254, in delete_profile\n    self.profile_client.delete_profile(profile_id=i)\n  File \"/usr/local/lib/python3.8/site-packages/swagger_client/api/profile_api.py\", line 150, in delete_profile\n    (data) = self.delete_profile_with_http_info(profile_id, **kwargs)  # noqa: E501\n  File \"/usr/local/lib/python3.8/site-packages/swagger_client/api/profile_api.py\", line 209, in delete_profile_with_http_info\n    return self.api_client.call_api(\n  File \"/usr/local/lib/python3.8/site-packages/swagger_client/api_client.py\", line 316, in call_api\n    return self.__call_api(resource_path, method,\n  File \"/usr/local/lib/python3.8/site-packages/swagger_client/api_client.py\", line 148, in __call_api\n    response_data = self.request(\n  File \"/usr/local/lib/python3.8/site-packages/swagger_client/api_client.py\", line 382, in request\n    return self.rest_client.DELETE(url,\n  File \"/usr/local/lib/python3.8/site-packages/swagger_client/rest.py\", line 259, in DELETE\n    return self.request(\"DELETE\", url,\n  File \"/usr/local/lib/python3.8/site-packages/swagger_client/rest.py\", line 227, in request\n    raise ApiException(http_resp=r)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "get_equipment_id",
    "time" : {
      "start" : 1624186321934,
      "stop" : 1624186322040,
      "duration" : 106
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_security_flags",
    "time" : {
      "start" : 1624186332769,
      "stop" : 1624186332769,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_markers",
    "time" : {
      "start" : 1624186332769,
      "stop" : 1624186332773,
      "duration" : 4
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "177f7b6f70f6b281",
      "name" : "Test Cases Requires: ",
      "source" : "177f7b6f70f6b281.attach",
      "type" : "text/plain",
      "size" : 378
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "instantiate_profile",
    "time" : {
      "start" : 1624186332769,
      "stop" : 1624186332769,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_vlan",
    "time" : {
      "start" : 1624186332769,
      "stop" : 1624186332769,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "2fe46295d8f98ee6",
      "name" : "VLAN Created: ",
      "source" : "2fe46295d8f98ee6.attach",
      "type" : "text/plain",
      "size" : 5
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "lf_tools",
    "time" : {
      "start" : 1624186332773,
      "stop" : 1624186333085,
      "duration" : 312
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upgrade_firmware",
    "time" : {
      "start" : 1624186322120,
      "stop" : 1624186322120,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "create_lanforge_chamberview_dut",
    "time" : {
      "start" : 1624186333085,
      "stop" : 1624186336096,
      "duration" : 3011
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testbed",
    "time" : {
      "start" : 1624186320245,
      "stop" : 1624186320246,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "741863478b60ea10",
      "name" : "Testbed Selected : ",
      "source" : "741863478b60ea10.attach",
      "type" : "text/plain",
      "size" : 8
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_latest_firmware",
    "time" : {
      "start" : 1624186322119,
      "stop" : 1624186322119,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_configuration",
    "time" : {
      "start" : 1624186320246,
      "stop" : 1624186320246,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "9c2345e8ca3e4916",
      "name" : "Testbed Selected: ",
      "source" : "9c2345e8ca3e4916.attach",
      "type" : "text/plain",
      "size" : 8
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "setup_controller",
    "time" : {
      "start" : 1624186321756,
      "stop" : 1624186321933,
      "duration" : 177
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "d370bf120a737237",
      "name" : "Controller Instantiated: ",
      "source" : "d370bf120a737237.attach",
      "type" : "text/plain",
      "size" : 186
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "instantiate_access_point",
    "time" : {
      "start" : 1624186320246,
      "stop" : 1624186321756,
      "duration" : 1510
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "aed5655f47afe07d",
      "name" : "added openwrtctl.py to :",
      "source" : "aed5655f47afe07d.attach",
      "type" : "text/plain",
      "size" : 14
    }, {
      "uid" : "cf21bd1a5f60d310",
      "name" : "APNOS LIbrary: ",
      "source" : "cf21bd1a5f60d310.attach",
      "type" : "text/plain",
      "size" : 316
    }, {
      "uid" : "585c0250263f6147",
      "name" : "openwrt_ctl Setup",
      "source" : "585c0250263f6147.attach",
      "type" : "text/plain",
      "size" : 9
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_apnos",
    "time" : {
      "start" : 1624186320246,
      "stop" : 1624186320246,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_firmware",
    "time" : {
      "start" : 1624186321933,
      "stop" : 1624186321933,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "check_ap_firmware_cloud",
    "time" : {
      "start" : 1624186322041,
      "stop" : 1624186322119,
      "duration" : 78
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_test_run",
    "time" : {
      "start" : 1624186324597,
      "stop" : 1624186327123,
      "duration" : 2526
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "ff1a8e5de2b61c9b",
      "name" : "APNOS LIbrary: ",
      "source" : "ff1a8e5de2b61c9b.attach",
      "type" : "text/plain",
      "size" : 316
    }, {
      "uid" : "b5cf24a527ef7c41",
      "name" : "openwrt_ctl Setup",
      "source" : "b5cf24a527ef7c41.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "6bd7ac37b97d15ba",
      "name" : "get_active_firmware ",
      "source" : "6bd7ac37b97d15ba.attach",
      "type" : "text/plain",
      "size" : 34
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "afterStages" : [ {
    "name" : "update_report::0",
    "time" : {
      "start" : 1624194092880,
      "stop" : 1624194092880,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "upgrade_firmware::0",
    "time" : {
      "start" : 1624194092892,
      "stop" : 1624194092892,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "radius_info::0",
    "time" : {
      "start" : 1624194092836,
      "stop" : 1624194092836,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upload_firmware::0",
    "time" : {
      "start" : 1624194092898,
      "stop" : 1624194092898,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "test_cases::0",
    "time" : {
      "start" : 1624194092881,
      "stop" : 1624194092881,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_equipment_id::0",
    "time" : {
      "start" : 1624194092940,
      "stop" : 1624194092940,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_security_flags::0",
    "time" : {
      "start" : 1624194092868,
      "stop" : 1624194092868,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_markers::0",
    "time" : {
      "start" : 1624194092859,
      "stop" : 1624194092859,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_profile::0",
    "time" : {
      "start" : 1624194092874,
      "stop" : 1624194092874,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_vlan::0",
    "time" : {
      "start" : 1624194092879,
      "stop" : 1624194092879,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "lf_tools::0",
    "time" : {
      "start" : 1624194092853,
      "stop" : 1624194092853,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upgrade_firmware::0",
    "time" : {
      "start" : 1624194092903,
      "stop" : 1624194092904,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testbed::0",
    "time" : {
      "start" : 1624194093104,
      "stop" : 1624194093104,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_latest_firmware::0",
    "time" : {
      "start" : 1624194092914,
      "stop" : 1624194092914,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_configuration::0",
    "time" : {
      "start" : 1624194093072,
      "stop" : 1624194093072,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_controller::1",
    "time" : {
      "start" : 1624194092987,
      "stop" : 1624194092987,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_controller::teardown_controller",
    "time" : {
      "start" : 1624194092987,
      "stop" : 1624194092988,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "e60cd2b9ff497f8c",
      "name" : "Controller Teardown: ",
      "source" : "e60cd2b9ff497f8c.attach",
      "type" : "text/plain",
      "size" : 186
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "instantiate_access_point::0",
    "time" : {
      "start" : 1624194092994,
      "stop" : 1624194092994,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_apnos::0",
    "time" : {
      "start" : 1624194093015,
      "stop" : 1624194093015,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_firmware::0",
    "time" : {
      "start" : 1624194092952,
      "stop" : 1624194092952,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "check_ap_firmware_cloud::0",
    "time" : {
      "start" : 1624194092920,
      "stop" : 1624194092920,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_test_run::0",
    "time" : {
      "start" : 1624194092886,
      "stop" : 1624194092886,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "BRIDGE MODE ENTERPRISE SETUP"
  }, {
    "name" : "tag",
    "value" : "bridge"
  }, {
    "name" : "tag",
    "value" : "setup"
  }, {
    "name" : "tag",
    "value" : "wpa3_enterprise_mixed"
  }, {
    "name" : "tag",
    "value" : "suiteB"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('setup_profiles')"
  }, {
    "name" : "tag",
    "value" : "enterprise"
  }, {
    "name" : "tag",
    "value" : "sanity"
  }, {
    "name" : "tag",
    "value" : "twog"
  }, {
    "name" : "parentSuite",
    "value" : "e2e.basic.configuration_tests.bridge_mode"
  }, {
    "name" : "suite",
    "value" : "test_enterprise_security_modes_configuration"
  }, {
    "name" : "subSuite",
    "value" : "TestSetupBridgeEnterpriseSuiteB"
  }, {
    "name" : "host",
    "value" : "nightly-ci-503-q2nlb"
  }, {
    "name" : "thread",
    "value" : "6-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "e2e.basic.configuration_tests.bridge_mode.test_enterprise_security_modes_configuration"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "setup_profiles",
    "value" : "{'mode': 'BRIDGE', 'ssid_modes': {'wpa_wpa2_enterprise_mixed': [{'ssid_name': 'ssid_wpa_wpa2_eap_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'basic-01-SSID-wpa_wpa2_enterprise_mixed-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa_wpa2_eap_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'profile_name': 'basic-01-SSID-wpa_wpa2_enterprise_mixed-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}], 'wpa3_enterprise_mixed': [{'ssid_name': 'ssid_wpa3_mixed_eap_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'basic-01-SSID-wpa3_enterprise_mixed-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa3_mixed_eap_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'profile_name': 'basic-01-SSID-wpa3_enterprise_mixed-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}]}, 'rf': {}, 'radius': True}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 12,
        "unknown" : 0,
        "total" : 14
      },
      "items" : [ {
        "uid" : "5a54a3beaeb82a14",
        "status" : "passed",
        "time" : {
          "start" : 1623976490253,
          "stop" : 1623976490254,
          "duration" : 1
        }
      }, {
        "uid" : "54a8ad7889ede1bc",
        "status" : "passed",
        "time" : {
          "start" : 1623963544735,
          "stop" : 1623963544735,
          "duration" : 0
        }
      }, {
        "uid" : "cba290bffade0f34",
        "status" : "passed",
        "time" : {
          "start" : 1623890108843,
          "stop" : 1623890108845,
          "duration" : 2
        }
      }, {
        "uid" : "c1b3845805bbc9ec",
        "status" : "passed",
        "time" : {
          "start" : 1623803719964,
          "stop" : 1623803719964,
          "duration" : 0
        }
      }, {
        "uid" : "3721bbe6399b514",
        "status" : "passed",
        "time" : {
          "start" : 1623759207093,
          "stop" : 1623759207093,
          "duration" : 0
        }
      }, {
        "uid" : "a6aceb684b00a9db",
        "status" : "passed",
        "time" : {
          "start" : 1623717295810,
          "stop" : 1623717295811,
          "duration" : 1
        }
      }, {
        "uid" : "65c393d34a2ee638",
        "status" : "passed",
        "time" : {
          "start" : 1623666106392,
          "stop" : 1623666106392,
          "duration" : 0
        }
      }, {
        "uid" : "98e408a4e92676c",
        "status" : "passed",
        "time" : {
          "start" : 1623630893481,
          "stop" : 1623630893481,
          "duration" : 0
        }
      }, {
        "uid" : "f1a047b276e65cfd",
        "status" : "passed",
        "time" : {
          "start" : 1623492927639,
          "stop" : 1623492927639,
          "duration" : 0
        }
      }, {
        "uid" : "e769b9c09559108e",
        "status" : "passed",
        "time" : {
          "start" : 1623412508744,
          "stop" : 1623412508744,
          "duration" : 0
        }
      }, {
        "uid" : "3e8d082fa7ecfe8b",
        "status" : "broken",
        "statusDetails" : "swagger_client.rest.ApiException: (500)\nReason: \nHTTP response headers: HTTPHeaderDict({'Date': 'Fri, 11 Jun 2021 11:38:27 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'POST, PATCH, PUT, HEAD, GET, OPTIONS, DELETE', 'Access-Control-Max-Age': '10', 'Access-Control-Allow-Headers': 'x-requested-with,Content-Type,content-type,Authorization', 'Access-Control-Allow-Credentials': 'true', 'X-Content-Type-Options': 'nosniff', 'X-XSS-Protection': '1; mode=block', 'Strict-Transport-Security': 'max-age=31536000 ; includeSubDomains', 'X-Frame-Options': 'DENY', 'Cache-Control': 'no-cache, no-store, max-age=0, must-revalidate', 'Expires': '0', 'Pragma': 'no-cache', 'vary': 'accept-encoding'})\nHTTP response body: {\n  \"model_type\" : \"JsonSerializedException\",\n  \"exType\" : \"ResourceAccessException\",\n  \"error\" : \"I/O error on GET request for \\\"https://tip-wlan-prov-service:9091/api/equipment/forCustomer\\\": Connect to tip-wlan-prov-service:9091 [tip-wlan-prov-service/172.20.29.206] failed: Connection refused; nested exception is org.apache.http.conn.HttpHostConnectException: Connect to tip-wlan-prov-service:9091 [tip-wlan-prov-service/172.20.29.206] failed: Connection refused\",\n  \"path\" : \"/portal/equipment/forCustomer?customerId=2&amp;paginationContext=%7B%0A++++++++++++++++%22model_type%22%3A+%22PaginationContext%22%2C%0A++++++++++++++++%22maxItemsPerPage%22%3A+100%0A++++++++%7D\",\n  \"timestamp\" : 1623411507541\n}",
        "time" : {
          "start" : 1623411516725,
          "stop" : 1623411516725,
          "duration" : 0
        }
      }, {
        "uid" : "ec475667c00f505a",
        "status" : "passed",
        "time" : {
          "start" : 1623402563641,
          "stop" : 1623402563641,
          "duration" : 0
        }
      }, {
        "uid" : "ed8a5bfcfea5a59d",
        "status" : "passed",
        "time" : {
          "start" : 1623390349415,
          "stop" : 1623390349415,
          "duration" : 0
        }
      } ]
    },
    "tags" : [ "@pytest.mark.usefixtures('setup_profiles')", "suiteB", "enterprise", "setup", "sanity", "bridge", "twog", "wpa3_enterprise_mixed" ]
  },
  "source" : "8abf74cd6116a07.json",
  "parameterValues" : [ "{'mode': 'BRIDGE', 'ssid_modes': {'wpa_wpa2_enterprise_mixed': [{'ssid_name': 'ssid_wpa_wpa2_eap_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'basic-01-SSID-wpa_wpa2_enterprise_mixed-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa_wpa2_eap_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'profile_name': 'basic-01-SSID-wpa_wpa2_enterprise_mixed-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}], 'wpa3_enterprise_mixed': [{'ssid_name': 'ssid_wpa3_mixed_eap_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'basic-01-SSID-wpa3_enterprise_mixed-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa3_mixed_eap_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'profile_name': 'basic-01-SSID-wpa3_enterprise_mixed-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}]}, 'rf': {}, 'radius': True}" ]
}