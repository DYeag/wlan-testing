{"name": "test_verify_vif_state[setup_profiles0]", "status": "broken", "statusDetails": {"message": "paramiko.ssh_exception.SSHException: No existing session", "trace": "request = <SubRequest 'setup_profiles' for <Function test_setup_open_2g_ssid_profile[setup_profiles0]>>\nsetup_controller = <controller.controller_1x.controller.Controller object at 0x7f89ac77d970>\ntestbed = 'basic-02', get_equipment_id = [3]\nfixtures_ver = <fixtures_1x.Fixtures_1x object at 0x7f89ac77da90>\ninstantiate_profile = <class 'controller.controller_1x.controller.ProfileUtility'>\nget_markers = {'fiveg': True, 'open': True, 'radius': False, 'twog': True, ...}\ncreate_lanforge_chamberview_dut = 'basic-02'\nlf_tools = <lanforge.lf_tools.ChamberView object at 0x7f89a87ff400>\nget_security_flags = ['open', 'wpa', 'wep', 'wpa2_personal', 'wpa3_personal', 'wpa3_personal_mixed', ...]\nget_configuration = {'access_point': [{'ip': '10.28.3.100', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP2', 'mode': 'wifi6', ...}], 'cont...hy4'], '2.4G-Station-Name': 'wlan0', '5G-Radio': ['1.1.wiphy5'], '5G-Station-Name': 'wlan0', ...}, 'name': 'lanforge'}}\nradius_info = {'ip': '10.10.10.72', 'name': 'basic-02-Automation-Radius-Profile-BRIDGE', 'password': 'password', 'pk_password': 'whatever', ...}\nget_apnos = <class 'apnos.apnos.APNOS'>\nradius_accounting_info = {'ip': '10.10.10.72', 'password': 'password', 'pk_password': 'whatever', 'port': 1812, ...}\n\n    @pytest.fixture(scope=\"class\")\n    def setup_profiles(request, setup_controller, testbed, get_equipment_id, fixtures_ver,\n                       instantiate_profile, get_markers, create_lanforge_chamberview_dut, lf_tools,\n                       get_security_flags, get_configuration, radius_info, get_apnos, radius_accounting_info):\n        lf_tools.reset_scenario()\n        param = dict(request.param)\n    \n        # VLAN Setup\n        if request.param[\"mode\"] == \"VLAN\":\n    \n            vlan_list = list()\n            refactored_vlan_list = list()\n            ssid_modes = request.param[\"ssid_modes\"].keys()\n            for mode in ssid_modes:\n                for ssid in range(len(request.param[\"ssid_modes\"][mode])):\n                    if \"vlan\" in request.param[\"ssid_modes\"][mode][ssid]:\n                        vlan_list.append(request.param[\"ssid_modes\"][mode][ssid][\"vlan\"])\n                    else:\n                        pass\n            if vlan_list:\n                [refactored_vlan_list.append(x) for x in vlan_list if x not in refactored_vlan_list]\n                vlan_list = refactored_vlan_list\n                for i in range(len(vlan_list)):\n                    if vlan_list[i] > 4095 or vlan_list[i] < 1:\n                        vlan_list.pop(i)\n        if request.param[\"mode\"] == \"VLAN\":\n            lf_tools.add_vlan(vlan_ids=vlan_list)\n    \n        # call this, if 1.x\n>       return_var = fixtures_ver.setup_profiles(request, param, setup_controller, testbed, get_equipment_id,\n                                                 instantiate_profile,\n                                                 get_markers, create_lanforge_chamberview_dut, lf_tools,\n                                                 get_security_flags, get_configuration, radius_info, get_apnos,\n                                                 radius_accounting_info)\n\ne2e/basic/conftest.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfixtures_1x.py:564: in setup_profiles\n    ap_ssh = get_apnos(get_configuration['access_point'][0], pwd=\"../libs/apnos/\", sdk=\"1.x\")\n../libs/apnos/apnos.py:51: in __init__\n    client = self.ssh_cli_connect()\n../libs/apnos/apnos.py:80: in ssh_cli_connect\n    client.connect(self.ip, username=self.username, password=self.password,\n/usr/local/lib/python3.8/site-packages/paramiko/client.py:412: in connect\n    server_key = t.get_remote_server_key()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <paramiko.Transport at 0xa8702be0 (connecting)>\n\n    def get_remote_server_key(self):\n        \"\"\"\n        Return the host key of the server (in client mode).\n    \n        .. note::\n            Previously this call returned a tuple of ``(key type, key\n            string)``. You can get the same effect by calling `.PKey.get_name`\n            for the key type, and ``str(key)`` for the key string.\n    \n        :raises: `.SSHException` -- if no session is currently active.\n    \n        :return: public key (`.PKey`) of the remote server\n        \"\"\"\n        if (not self.active) or (not self.initial_kex_done):\n>           raise SSHException(\"No existing session\")\nE           paramiko.ssh_exception.SSHException: No existing session\n\n/usr/local/lib/python3.8/site-packages/paramiko/transport.py:834: SSHException"}, "description": " vifs SuiteA General ", "parameters": [{"name": "setup_profiles", "value": "{'mode': 'BRIDGE', 'ssid_modes': {'open': [{'ssid_name': 'ssid_open_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'basic-02-SSID-open-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_open_5g', 'appliedRadios': ['is5GHz'], 'profile_name': 'basic-02-SSID-open-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}], 'wpa': [{'ssid_name': 'ssid_wpa_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa_5g', 'appliedRadios': ['is5GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}], 'wpa2_personal': [{'ssid_name': 'ssid_wpa2_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa2_personal-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa2_5g', 'appliedRadios': ['is5GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa2_personal-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}]}, 'rf': {}, 'radius': False}"}], "start": 1629420431716, "stop": 1629420431716, "uuid": "db088761-2f79-4d6e-b9d9-7b9ceef208b2", "historyId": "4a66ab8af2119ef5d86b0a06d0301b9f", "testCaseId": "55b66421d1ccddbf601e838e3d169963", "fullName": "e2e.basic.configuration_tests.bridge_mode.test_general_security_modes_configuration.TestSetupBridgeSuiteA#test_verify_vif_state", "labels": [{"name": "feature", "value": "BRIDGE MODE SETUP"}, {"name": "severity", "value": "blocker"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "tag", "value": "suiteA"}, {"name": "tag", "value": "sanity_light"}, {"name": "tag", "value": "setup"}, {"name": "tag", "value": "general"}, {"name": "tag", "value": "bridge"}, {"name": "parentSuite", "value": "e2e.basic.configuration_tests.bridge_mode"}, {"name": "suite", "value": "test_general_security_modes_configuration"}, {"name": "subSuite", "value": "TestSetupBridgeSuiteA"}, {"name": "host", "value": "testing-128-llc9r"}, {"name": "thread", "value": "6-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.basic.configuration_tests.bridge_mode.test_general_security_modes_configuration"}]}