{
  "uid" : "63ba6e88c15aa230",
  "name" : "test_setup_wpa_wpa2_personal_mixed_2g_ssid_profile[setup_profiles0]",
  "fullName" : "e2e.basic.configuration_tests.vlan_mode.test_general_security_modes_configuration.TestVLANModeConnectivitySuiteB#test_setup_wpa_wpa2_personal_mixed_2g_ssid_profile",
  "historyId" : "8d77b466a9e4d134edea3e160ac1dfc4",
  "time" : {
    "start" : 1627878173545,
    "stop" : 1627878173545,
    "duration" : 0
  },
  "description" : " SSID Profile Creation wpa_wpa2_personal_mixed 2.4G\n            pytest -m \"setup and vlan and general and suiteB and wpa_wpa2_personal_mixed and twog\"\n\n        ",
  "descriptionHtml" : "<p>SSID Profile Creation wpa_wpa2_personal_mixed 2.4G\npytest -m &quot;setup and vlan and general and suiteB and wpa_wpa2_personal_mixed and twog&quot;</p>\n",
  "status" : "broken",
  "statusMessage" : "KeyError: '06:03:7f:12:c5:c4'",
  "statusTrace" : "request = <SubRequest 'setup_profiles' for <Function test_setup_wpa3_personal_2g_ssid_profile[setup_profiles0]>>\nsetup_controller = <controller.controller.Controller object at 0x7f2fdf53a790>\ntestbed = 'basic-02', setup_vlan = 100, get_equipment_id = [3]\ninstantiate_profile = <controller.controller.ProfileUtility object at 0x7f2fc40cd6a0>\nget_markers = {'fiveg': True, 'open': True, 'radius': False, 'twog': True, ...}\ncreate_lanforge_chamberview_dut = 'basic-02'\nlf_tools = <lanforge.lf_tools.ChamberView object at 0x7f2fdf357070>\nget_security_flags = ['open', 'wpa', 'wep', 'wpa2_personal', 'wpa3_personal', 'wpa3_personal_mixed', ...]\nget_configuration = {'access_point': [{'ip': '10.28.3.100', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP2', 'mode': 'wifi6', ...}], 'cont...'wiphy4'], '2.4G-Station-Name': 'wlan0', '5G-Radio': ['wiphy5'], '5G-Station-Name': 'wlan0', ...}, 'name': 'lanforge'}}\nradius_info = {'ip': '10.10.10.72', 'name': 'basic-02-Automation-Radius-Profile-BRIDGE', 'password': 'password', 'pk_password': 'whatever', ...}\nget_apnos = <class 'apnos.apnos.APNOS'>\n\n    @allure.feature(\"CLIENT CONNECTIVITY SETUP\")\n    @pytest.fixture(scope=\"class\")\n    def setup_profiles(request, setup_controller, testbed, setup_vlan, get_equipment_id,\n                       instantiate_profile, get_markers, create_lanforge_chamberview_dut, lf_tools,\n                       get_security_flags, get_configuration, radius_info, get_apnos):\n        instantiate_profile = instantiate_profile(sdk_client=setup_controller)\n        vlan_id, mode = 0, 0\n        instantiate_profile.cleanup_objects()\n        parameter = dict(request.param)\n        print(parameter)\n        test_cases = {}\n        profile_data = {}\n        if parameter['mode'] not in [\"BRIDGE\", \"NAT\", \"VLAN\"]:\n            print(\"Invalid Mode: \", parameter['mode'])\n            allure.attach(body=parameter['mode'], name=\"Invalid Mode: \")\n            yield test_cases\n    \n        if parameter['mode'] == \"NAT\":\n            mode = \"NAT\"\n            vlan_id = 1\n        if parameter['mode'] == \"BRIDGE\":\n            mode = \"BRIDGE\"\n            vlan_id = 1\n        if parameter['mode'] == \"VLAN\":\n            mode = \"BRIDGE\"\n            vlan_id = setup_vlan\n    \n        instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Equipment-AP-\" + parameter['mode'])\n    \n        profile_data[\"equipment_ap\"] = {\"profile_name\": testbed + \"-Equipment-AP-\" + parameter['mode']}\n        profile_data[\"ssid\"] = {}\n        for i in parameter[\"ssid_modes\"]:\n            profile_data[\"ssid\"][i] = []\n            for j in range(len(parameter[\"ssid_modes\"][i])):\n                profile_name = testbed + \"-SSID-\" + i + \"-\" + str(j) + \"-\" + parameter['mode']\n                data = parameter[\"ssid_modes\"][i][j]\n                data[\"profile_name\"] = profile_name\n                if \"mode\" not in dict(data).keys():\n                    data[\"mode\"] = mode\n                if \"vlan\" not in dict(data).keys():\n                    data[\"vlan\"] = vlan_id\n                instantiate_profile.delete_profile_by_name(profile_name=profile_name)\n                profile_data[\"ssid\"][i].append(data)\n        #         print(profile_name)\n        # print(profile_data)\n    \n        instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Automation-Radius-Profile-\" + mode)\n        time.sleep(10)\n        \"\"\"\n          Setting up rf profile\n        \"\"\"\n        rf_profile_data = {\n            \"name\": \"RF-Profile-\" + testbed + \"-\" + parameter['mode'] + \"-\" +\n                    get_configuration['access_point'][0]['mode']\n        }\n    \n        for i in parameter[\"rf\"]:\n            rf_profile_data[i] = parameter['rf'][i]\n        # print(rf_profile_data)\n    \n        try:\n            instantiate_profile.delete_profile_by_name(profile_name=rf_profile_data['name'])\n            instantiate_profile.set_rf_profile(profile_data=rf_profile_data,\n                                               mode=get_configuration['access_point'][0]['mode'])\n            allure.attach(body=str(rf_profile_data),\n                          name=\"RF Profile Created : \" + get_configuration['access_point'][0]['mode'])\n        except Exception as e:\n            print(e)\n            allure.attach(body=str(e), name=\"Exception \")\n    \n        # Radius Profile Creation\n        if parameter[\"radius\"]:\n            radius_info = radius_info\n            radius_info[\"name\"] = testbed + \"-Automation-Radius-Profile-\" + mode\n            instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Automation-Radius-Profile-\" + mode)\n            try:\n                instantiate_profile.create_radius_profile(radius_info=radius_info)\n                allure.attach(body=str(radius_info),\n                              name=\"Radius Profile Created\")\n                test_cases['radius_profile'] = True\n            except Exception as e:\n                print(e)\n                test_cases['radius_profile'] = False\n    \n        # SSID Profile Creation\n        lf_dut_data = []\n        for mode in profile_data['ssid']:\n            if mode == \"open\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"open_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"open_5g\"] = True\n                            creates_profile = instantiate_profile.create_open_ssid_profile(profile_data=j)\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"open_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"open_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wpa_ssid_profile(profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa2_personal\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n    \n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wpa2_personal_ssid_profile(profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa2_personal_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa2_personal_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa2_personal_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa2_personal_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_wpa2_personal_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n    \n                            creates_profile = instantiate_profile.create_wpa_wpa2_personal_mixed_ssid_profile(\n                                profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa_wpa2_personal_mixed_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa_wpa2_personal_mixed_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa_wpa2_personal_mixed_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa_wpa2_personal_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa3_personal\":\n                for j in profile_data[\"ssid\"][mode]:\n                    print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n    \n                            creates_profile = instantiate_profile.create_wpa3_personal_ssid_profile(profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa3_personal_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa3_personal_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa3_personal_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa3_personal_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_personal_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wpa3_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa3_personal_mixed_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa3_personal_mixed_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa3_personal_mixed_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa3_personal_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n    \n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wpa_enterprise_ssid_profile(profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa_enterprise_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa_enterprise_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n    \n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa_enterprise_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa2_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wpa2_enterprise_ssid_profile(profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa2_enterprise_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa2_enterprise_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa2_enterprise_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa2_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wpa3_enterprise_ssid_profile(profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa3_enterprise_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa3_enterprise_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa3_enterprise_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa3_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_wpa2_enterprise_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wpa_wpa2_enterprise_mixed_ssid_profile(\n                                profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa_wpa2_enterprise_mixed_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa_wpa2_enterprise_mixed_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa_wpa2_enterprise_mixed_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa_wpa2_enterprise_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_enterprise_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wpa3_enterprise_mixed_ssid_profile(\n                                profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa3_enterprise_mixed_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa3_enterprise_mixed_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa3_enterprise_mixed_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa3_enterprise_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wep\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wep_ssid_profile(profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wwep_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wep_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wwep_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wep_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n        # Equipment AP Profile Creation\n        try:\n            instantiate_profile.set_ap_profile(profile_data=profile_data['equipment_ap'])\n            test_cases[\"equipment_ap\"] = True\n            allure.attach(body=str(profile_data['equipment_ap']),\n                          name=\"Equipment AP Profile Created\")\n        except Exception as e:\n            print(e)\n            test_cases[\"equipment_ap\"] = False\n            allure.attach(body=str(e),\n                          name=\"Equipment AP Profile Creation Failed\")\n    \n        # Push the Equipment AP Profile to AP\n        try:\n            for i in get_equipment_id:\n                instantiate_profile.push_profile_old_method(equipment_id=i)\n        except Exception as e:\n            print(e)\n            print(\"failed to create AP Profile\")\n    \n        ap_ssh = get_apnos(get_configuration['access_point'][0], pwd=\"../libs/apnos/\")\n        # ssid_names = []\n        # for i in instantiate_profile.profile_creation_ids[\"ssid\"]:\n        #     ssid_names.append(instantiate_profile.get_ssid_name_by_profile_id(profile_id=i))\n        # ssid_names.sort()\n        ssid_names = []\n        for i in lf_dut_data:\n            ssid_names.append(i[\"ssid_name\"])\n        ssid_names.sort()\n        # This loop will check the VIF Config with cloud profile\n        vif_config = []\n        test_cases['vifc'] = False\n        for i in range(0, 18):\n            vif_config = list(ap_ssh.get_vif_config_ssids())\n            vif_config.sort()\n            print(vif_config)\n            print(ssid_names)\n            if ssid_names == vif_config:\n                test_cases['vifc'] = True\n                break\n            time.sleep(10)\n        allure.attach(body=str(\"VIF Config: \" + str(vif_config) + \"\\n\" + \"SSID Pushed from Controller: \" + str(ssid_names)),\n                      name=\"SSID Profiles in VIF Config and Controller: \")\n        ap_ssh = get_apnos(get_configuration['access_point'][0], pwd=\"../libs/apnos/\")\n    \n        # This loop will check the VIF Config with VIF State\n        test_cases['vifs'] = False\n        for i in range(0, 18):\n            vif_state = list(ap_ssh.get_vif_state_ssids())\n            vif_state.sort()\n            vif_config = list(ap_ssh.get_vif_config_ssids())\n            vif_config.sort()\n            print(vif_config)\n            print(vif_state)\n            if vif_state == vif_config:\n                test_cases['vifs'] = True\n                break\n            time.sleep(10)\n        allure.attach(body=str(\"VIF Config: \" + str(vif_config) + \"\\n\" + \"VIF State: \" + str(vif_state)),\n                      name=\"SSID Profiles in VIF Config and VIF State: \")\n    \n        ap_logs = ap_ssh.logread()\n        allure.attach(body=ap_logs, name=\"AP LOgs: \")\n        ssid_info = ap_ssh.get_ssid_info()\n        ssid_data = []\n        print(ssid_info)\n        band_mapping = ap_ssh.get_bssid_band_mapping()\n        print(band_mapping)\n        idx_mapping = {}\n        for i in range(0, len(ssid_info)):\n            if ssid_info[i][1] == \"OPEN\":\n                ssid_info[i].append(\"\")\n            if ssid_info[i][1] == \"OPEN\":\n                ssid = [\"ssid_idx=\" + str(i) + \" ssid=\" + ssid_info[i][3] + \" security=OPEN\" +\n                        \" password=\" + ssid_info[i][2] + \" bssid=\" + ssid_info[i][0]]\n                idx_mapping[str(i)] = [ssid_info[i][3], ssid_info[i][2], ssid_info[i][1], band_mapping[ssid_info[i][0]],\n                                       ssid_info[i][0]]\n    \n            if ssid_info[i][1] == \"WPA\":\n                ssid = [\"ssid_idx=\" + str(i) + \" ssid=\" + ssid_info[i][3] + \" security=WPA\" +\n                        \" password=\" + ssid_info[i][2] + \" bssid=\" + ssid_info[i][0]]\n                idx_mapping[str(i)] = [ssid_info[i][3], ssid_info[i][2], ssid_info[i][1], band_mapping[ssid_info[i][0]],\n                                       ssid_info[i][0]]\n            if ssid_info[i][1] == \"WPA2\":\n                ssid = [\"ssid_idx=\" + str(i) + \" ssid=\" + ssid_info[i][3] + \" security=WPA2\" +\n                        \" password=\" + ssid_info[i][2] + \" bssid=\" + ssid_info[i][0]]\n                idx_mapping[str(i)] = [ssid_info[i][3], ssid_info[i][2], ssid_info[i][1], band_mapping[ssid_info[i][0]],\n                                       ssid_info[i][0]]\n            if ssid_info[i][1] == \"WPA3_PERSONAL\":\n                ssid = [\"ssid_idx=\" + str(i) + \" ssid=\" + ssid_info[i][3] + \" security=WPA3\" +\n                        \" password=\" + ssid_info[i][2] + \" bssid=\" + ssid_info[i][0]]\n>               idx_mapping[str(i)] = [ssid_info[i][3], ssid_info[i][2], ssid_info[i][1], band_mapping[ssid_info[i][0]],\n                                       ssid_info[i][0]]\nE               KeyError: '06:03:7f:12:c5:c4'\n\ne2e/basic/conftest.py:597: KeyError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "lf_tools",
    "time" : {
      "start" : 1627875432524,
      "stop" : 1627875441106,
      "duration" : 8582
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "create_lanforge_chamberview_dut",
    "time" : {
      "start" : 1627875441106,
      "stop" : 1627875444066,
      "duration" : 2960
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_vlan",
    "time" : {
      "start" : 1627875432519,
      "stop" : 1627875432519,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "527884a6f68a93a1",
      "name" : "VLAN Created: ",
      "source" : "527884a6f68a93a1.attach",
      "type" : "text/plain",
      "size" : 5
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "instantiate_profile",
    "time" : {
      "start" : 1627875432519,
      "stop" : 1627875432519,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "test_cases",
    "time" : {
      "start" : 1627875426931,
      "stop" : 1627875426931,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upgrade_firmware",
    "time" : {
      "start" : 1627875421964,
      "stop" : 1627875421964,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upload_firmware",
    "time" : {
      "start" : 1627875421964,
      "stop" : 1627875421964,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_controller",
    "time" : {
      "start" : 1627875421693,
      "stop" : 1627875421831,
      "duration" : 138
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "8e04b2f6382165e1",
      "name" : "Controller Instantiated: ",
      "source" : "8e04b2f6382165e1.attach",
      "type" : "text/plain",
      "size" : 182
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "instantiate_access_point",
    "time" : {
      "start" : 1627875420233,
      "stop" : 1627875421692,
      "duration" : 1459
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "dc2432b95c0cfdd2",
      "name" : "added openwrtctl.py to :",
      "source" : "dc2432b95c0cfdd2.attach",
      "type" : "text/plain",
      "size" : 14
    }, {
      "uid" : "38ee431fb0857287",
      "name" : "APNOS LIbrary: ",
      "source" : "38ee431fb0857287.attach",
      "type" : "text/plain",
      "size" : 313
    }, {
      "uid" : "bb7ee14a1ee4bf73",
      "name" : "openwrt_ctl Setup",
      "source" : "bb7ee14a1ee4bf73.attach",
      "type" : "text/plain",
      "size" : 9
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "radius_info",
    "time" : {
      "start" : 1627875444066,
      "stop" : 1627875444067,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "3358588aed32e367",
      "name" : "Radius server Info: ",
      "source" : "3358588aed32e367.attach",
      "type" : "text/plain",
      "size" : 126
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_markers",
    "time" : {
      "start" : 1627875432520,
      "stop" : 1627875432524,
      "duration" : 4
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "8c0e0af350290b1e",
      "name" : "Test Cases Requires: ",
      "source" : "8c0e0af350290b1e.attach",
      "type" : "text/plain",
      "size" : 378
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "instantiate_firmware",
    "time" : {
      "start" : 1627875421831,
      "stop" : 1627875421831,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_security_flags",
    "time" : {
      "start" : 1627875432520,
      "stop" : 1627875432520,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_configuration",
    "time" : {
      "start" : 1627875420232,
      "stop" : 1627875420233,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "b07de93fcb528891",
      "name" : "Testbed Selected: ",
      "source" : "b07de93fcb528891.attach",
      "type" : "text/plain",
      "size" : 8
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "setup_profiles",
    "time" : {
      "start" : 1627878118371,
      "stop" : 1627878173185,
      "duration" : 54814
    },
    "status" : "broken",
    "statusMessage" : "KeyError: '06:03:7f:12:c5:c4'\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 1126, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 925, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/wlan-testing/tests/e2e/basic/conftest.py\", line 597, in setup_profiles\n    idx_mapping[str(i)] = [ssid_info[i][3], ssid_info[i][2], ssid_info[i][1], band_mapping[ssid_info[i][0]],\n",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "3392003d36c7738a",
      "name" : "RF Profile Created : wifi6",
      "source" : "3392003d36c7738a.attach",
      "type" : "text/plain",
      "size" : 42
    }, {
      "uid" : "6c08a2e15e886e0b",
      "name" : "SSID Profile Created",
      "source" : "6c08a2e15e886e0b.attach",
      "type" : "text/plain",
      "size" : 2820
    }, {
      "uid" : "43c18a86d560c5e5",
      "name" : "SSID Profile Created",
      "source" : "43c18a86d560c5e5.attach",
      "type" : "text/plain",
      "size" : 2816
    }, {
      "uid" : "745fbe3a5355949b",
      "name" : "SSID Profile Created",
      "source" : "745fbe3a5355949b.attach",
      "type" : "text/plain",
      "size" : 2829
    }, {
      "uid" : "9e7360e21c0abeef",
      "name" : "SSID Profile Created",
      "source" : "9e7360e21c0abeef.attach",
      "type" : "text/plain",
      "size" : 2825
    }, {
      "uid" : "9ad41733ce4976c0",
      "name" : "SSID Profile Created",
      "source" : "9ad41733ce4976c0.attach",
      "type" : "text/plain",
      "size" : 2832
    }, {
      "uid" : "b75a046667ad2af",
      "name" : "SSID Profile Created",
      "source" : "b75a046667ad2af.attach",
      "type" : "text/plain",
      "size" : 2828
    }, {
      "uid" : "c2994f5aebe9dcb0",
      "name" : "Equipment AP Profile Created",
      "source" : "c2994f5aebe9dcb0.attach",
      "type" : "text/plain",
      "size" : 46
    }, {
      "uid" : "94d7cc1b04f813ad",
      "name" : "APNOS LIbrary: ",
      "source" : "94d7cc1b04f813ad.attach",
      "type" : "text/plain",
      "size" : 313
    }, {
      "uid" : "27f48bea4bb375de",
      "name" : "openwrt_ctl Setup",
      "source" : "27f48bea4bb375de.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "d8f3b5d0df952fe8",
      "name" : "vif config Output Msg: ",
      "source" : "d8f3b5d0df952fe8.attach",
      "type" : "text/plain",
      "size" : 63
    }, {
      "uid" : "59cd076233e7f5a2",
      "name" : "vif config Err Msg: ",
      "source" : "59cd076233e7f5a2.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "90feabfbe7069a9d",
      "name" : "get_vif_config_ssids ",
      "source" : "90feabfbe7069a9d.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "1e39950b7f5d97c7",
      "name" : "vif config Output Msg: ",
      "source" : "1e39950b7f5d97c7.attach",
      "type" : "text/plain",
      "size" : 10224
    }, {
      "uid" : "ff934e83cd59746b",
      "name" : "vif config Err Msg: ",
      "source" : "ff934e83cd59746b.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "d7f17a3c1ed916c",
      "name" : "get_vif_config_ssids ",
      "source" : "d7f17a3c1ed916c.attach",
      "type" : "text/plain",
      "size" : 124
    }, {
      "uid" : "4815257c858462e9",
      "name" : "SSID Profiles in VIF Config and Controller: ",
      "source" : "4815257c858462e9.attach",
      "type" : "text/plain",
      "size" : 290
    }, {
      "uid" : "47565922a9deaf35",
      "name" : "APNOS LIbrary: ",
      "source" : "47565922a9deaf35.attach",
      "type" : "text/plain",
      "size" : 313
    }, {
      "uid" : "1c9a1c0608bf3d8a",
      "name" : "openwrt_ctl Setup",
      "source" : "1c9a1c0608bf3d8a.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "869b57063bd046a4",
      "name" : "vif state Output Msg: ",
      "source" : "869b57063bd046a4.attach",
      "type" : "text/plain",
      "size" : 62
    }, {
      "uid" : "72ae8122fce60447",
      "name" : "vif state Err Msg: ",
      "source" : "72ae8122fce60447.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "610f4972321adac8",
      "name" : "get_vif_state_ssids ",
      "source" : "610f4972321adac8.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "ff01db27381f9a48",
      "name" : "vif config Output Msg: ",
      "source" : "ff01db27381f9a48.attach",
      "type" : "text/plain",
      "size" : 10224
    }, {
      "uid" : "97fe13adb5a31958",
      "name" : "vif config Err Msg: ",
      "source" : "97fe13adb5a31958.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "7633c9e41e0a8901",
      "name" : "get_vif_config_ssids ",
      "source" : "7633c9e41e0a8901.attach",
      "type" : "text/plain",
      "size" : 124
    }, {
      "uid" : "a5cb476e3ab9616e",
      "name" : "vif state Output Msg: ",
      "source" : "a5cb476e3ab9616e.attach",
      "type" : "text/plain",
      "size" : 11494
    }, {
      "uid" : "375023c8dc30dcb0",
      "name" : "vif state Err Msg: ",
      "source" : "375023c8dc30dcb0.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "8daf6b57c0fc7c95",
      "name" : "get_vif_state_ssids ",
      "source" : "8daf6b57c0fc7c95.attach",
      "type" : "text/plain",
      "size" : 124
    }, {
      "uid" : "b1f42fca56f07c8f",
      "name" : "vif config Output Msg: ",
      "source" : "b1f42fca56f07c8f.attach",
      "type" : "text/plain",
      "size" : 10224
    }, {
      "uid" : "ef066dacc7bf189a",
      "name" : "vif config Err Msg: ",
      "source" : "ef066dacc7bf189a.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "fca56f5510ce1bf4",
      "name" : "get_vif_config_ssids ",
      "source" : "fca56f5510ce1bf4.attach",
      "type" : "text/plain",
      "size" : 124
    }, {
      "uid" : "adf94a05b31834fc",
      "name" : "SSID Profiles in VIF Config and VIF State: ",
      "source" : "adf94a05b31834fc.attach",
      "type" : "text/plain",
      "size" : 272
    }, {
      "uid" : "9008fabf4f6aaee9",
      "name" : "AP LOgs: ",
      "source" : "9008fabf4f6aaee9.attach",
      "type" : "text/plain",
      "size" : 69027
    }, {
      "uid" : "89bacbdff677bde9",
      "name" : "vif state Output Msg: ",
      "source" : "89bacbdff677bde9.attach",
      "type" : "text/plain",
      "size" : 11494
    }, {
      "uid" : "309a3042406a2d08",
      "name" : "vif state Err Msg: ",
      "source" : "309a3042406a2d08.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "c60b4d14920761f6",
      "name" : "iwinfo Output Msg: ",
      "source" : "c60b4d14920761f6.attach",
      "type" : "text/plain",
      "size" : 3270
    }, {
      "uid" : "797e35785d224ad8",
      "name" : "iwinfo config Err Msg: ",
      "source" : "797e35785d224ad8.attach",
      "type" : "text/plain",
      "size" : 109
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 37,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "get_latest_firmware",
    "time" : {
      "start" : 1627875421963,
      "stop" : 1627875421963,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_equipment_id",
    "time" : {
      "start" : 1627875421831,
      "stop" : 1627875421889,
      "duration" : 58
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "check_ap_firmware_cloud",
    "time" : {
      "start" : 1627875421889,
      "stop" : 1627875421963,
      "duration" : 74
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "update_report",
    "time" : {
      "start" : 1627875426930,
      "stop" : 1627875426931,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testbed",
    "time" : {
      "start" : 1627875420232,
      "stop" : 1627875420232,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "e7d9adccabe016c1",
      "name" : "Testbed Selected : ",
      "source" : "e7d9adccabe016c1.attach",
      "type" : "text/plain",
      "size" : 8
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_apnos",
    "time" : {
      "start" : 1627875420233,
      "stop" : 1627875420233,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_test_run",
    "time" : {
      "start" : 1627875424424,
      "stop" : 1627875426930,
      "duration" : 2506
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "bc68bfb2b087890f",
      "name" : "APNOS LIbrary: ",
      "source" : "bc68bfb2b087890f.attach",
      "type" : "text/plain",
      "size" : 313
    }, {
      "uid" : "65db37754a57c784",
      "name" : "openwrt_ctl Setup",
      "source" : "65db37754a57c784.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "a30adacf9ea1e683",
      "name" : "get_active_firmware ",
      "source" : "a30adacf9ea1e683.attach",
      "type" : "text/plain",
      "size" : 33
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "upgrade_firmware",
    "time" : {
      "start" : 1627875421964,
      "stop" : 1627875424423,
      "duration" : 2459
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "36c5b722c9fa311a",
      "name" : "APNOS LIbrary: ",
      "source" : "36c5b722c9fa311a.attach",
      "type" : "text/plain",
      "size" : 313
    }, {
      "uid" : "1f487cbb4edf58c9",
      "name" : "openwrt_ctl Setup",
      "source" : "1f487cbb4edf58c9.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "4920fe4ed4234dd0",
      "name" : "get_active_firmware ",
      "source" : "4920fe4ed4234dd0.attach",
      "type" : "text/plain",
      "size" : 33
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "afterStages" : [ {
    "name" : "lf_tools::0",
    "time" : {
      "start" : 1627884576649,
      "stop" : 1627884576649,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_vlan::0",
    "time" : {
      "start" : 1627884576686,
      "stop" : 1627884576686,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_profile::0",
    "time" : {
      "start" : 1627884576679,
      "stop" : 1627884576679,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "test_cases::0",
    "time" : {
      "start" : 1627884576689,
      "stop" : 1627884576689,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upgrade_firmware::0",
    "time" : {
      "start" : 1627884576730,
      "stop" : 1627884576730,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upload_firmware::0",
    "time" : {
      "start" : 1627884576719,
      "stop" : 1627884576719,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_controller::1",
    "time" : {
      "start" : 1627884576836,
      "stop" : 1627884576836,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_controller::teardown_controller",
    "time" : {
      "start" : 1627884576836,
      "stop" : 1627884576837,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "5cd49b3f1f7628d2",
      "name" : "Controller Teardown: ",
      "source" : "5cd49b3f1f7628d2.attach",
      "type" : "text/plain",
      "size" : 182
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "instantiate_access_point::0",
    "time" : {
      "start" : 1627884576845,
      "stop" : 1627884576845,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "radius_info::0",
    "time" : {
      "start" : 1627884576628,
      "stop" : 1627884576628,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_markers::0",
    "time" : {
      "start" : 1627884576656,
      "stop" : 1627884576657,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_firmware::0",
    "time" : {
      "start" : 1627884576803,
      "stop" : 1627884576803,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_security_flags::0",
    "time" : {
      "start" : 1627884576671,
      "stop" : 1627884576671,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_configuration::0",
    "time" : {
      "start" : 1627884576966,
      "stop" : 1627884576966,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_latest_firmware::0",
    "time" : {
      "start" : 1627884576745,
      "stop" : 1627884576745,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_equipment_id::0",
    "time" : {
      "start" : 1627884576786,
      "stop" : 1627884576786,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "check_ap_firmware_cloud::0",
    "time" : {
      "start" : 1627884576754,
      "stop" : 1627884576754,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "update_report::0",
    "time" : {
      "start" : 1627884576688,
      "stop" : 1627884576688,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testbed::0",
    "time" : {
      "start" : 1627884577011,
      "stop" : 1627884577011,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_apnos::0",
    "time" : {
      "start" : 1627884576881,
      "stop" : 1627884576882,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_test_run::0",
    "time" : {
      "start" : 1627884576696,
      "stop" : 1627884576696,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "upgrade_firmware::0",
    "time" : {
      "start" : 1627884576706,
      "stop" : 1627884576706,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "VLAN MODE CLIENT CONNECTIVITY"
  }, {
    "name" : "tag",
    "value" : "setup"
  }, {
    "name" : "tag",
    "value" : "general"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('setup_profiles')"
  }, {
    "name" : "tag",
    "value" : "sanity"
  }, {
    "name" : "tag",
    "value" : "suiteB"
  }, {
    "name" : "tag",
    "value" : "vlan"
  }, {
    "name" : "tag",
    "value" : "twog"
  }, {
    "name" : "tag",
    "value" : "wpa_wpa2_personal_mixed"
  }, {
    "name" : "parentSuite",
    "value" : "e2e.basic.configuration_tests.vlan_mode"
  }, {
    "name" : "suite",
    "value" : "test_general_security_modes_configuration"
  }, {
    "name" : "subSuite",
    "value" : "TestVLANModeConnectivitySuiteB"
  }, {
    "name" : "host",
    "value" : "testing-100-hphc4"
  }, {
    "name" : "thread",
    "value" : "6-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "e2e.basic.configuration_tests.vlan_mode.test_general_security_modes_configuration"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "setup_profiles",
    "value" : "{'mode': 'VLAN', 'ssid_modes': {'wpa3_personal': [{'ssid_name': 'ssid_wpa3_p_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal-0-VLAN', 'mode': 'BRIDGE', 'vlan': 100}, {'ssid_name': 'ssid_wpa3_p_5g', 'appliedRadios': ['is5GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal-1-VLAN', 'mode': 'BRIDGE', 'vlan': 100}], 'wpa3_personal_mixed': [{'ssid_name': 'ssid_wpa3_p_m_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal_mixed-0-VLAN', 'mode': 'BRIDGE', 'vlan': 100}, {'ssid_name': 'ssid_wpa3_p_m_5g', 'appliedRadios': ['is5GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal_mixed-1-VLAN', 'mode': 'BRIDGE', 'vlan': 100}], 'wpa_wpa2_personal_mixed': [{'ssid_name': 'ssid_wpa_wpa2_p_m_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa_wpa2_personal_mixed-0-VLAN', 'mode': 'BRIDGE', 'vlan': 100}, {'ssid_name': 'ssid_wpa_wpa2_p_m_5g', 'appliedRadios': ['is5GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa_wpa2_personal_mixed-1-VLAN', 'mode': 'BRIDGE', 'vlan': 100}]}, 'rf': {}, 'radius': False}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 9,
        "skipped" : 0,
        "passed" : 11,
        "unknown" : 0,
        "total" : 20
      },
      "items" : [ {
        "uid" : "b245f2fed3313845",
        "status" : "broken",
        "statusDetails" : "KeyError: 'wpa_wpa2_personal_mixed_2g'",
        "time" : {
          "start" : 1627792122355,
          "stop" : 1627792122355,
          "duration" : 0
        }
      }, {
        "uid" : "59411906ed4d2586",
        "status" : "broken",
        "statusDetails" : "KeyError: 'wpa_wpa2_personal_mixed_2g'",
        "time" : {
          "start" : 1627704533153,
          "stop" : 1627704533153,
          "duration" : 0
        }
      }, {
        "uid" : "b8fe2567980c2602",
        "status" : "broken",
        "statusDetails" : "KeyError: 'wpa_wpa2_personal_mixed_2g'",
        "time" : {
          "start" : 1627618668549,
          "stop" : 1627618668550,
          "duration" : 1
        }
      }, {
        "uid" : "32676ff9a12af9d8",
        "status" : "broken",
        "statusDetails" : "KeyError: 'wpa_wpa2_personal_mixed_2g'",
        "time" : {
          "start" : 1627532695899,
          "stop" : 1627532695900,
          "duration" : 1
        }
      }, {
        "uid" : "1c50a52d0ed8f9e0",
        "status" : "broken",
        "statusDetails" : "KeyError: 'wpa_wpa2_personal_mixed_2g'",
        "time" : {
          "start" : 1627446140234,
          "stop" : 1627446140234,
          "duration" : 0
        }
      }, {
        "uid" : "a03fcde8cc4f7929",
        "status" : "broken",
        "statusDetails" : "KeyError: '02:03:7f:12:a0:a0'",
        "time" : {
          "start" : 1627272662731,
          "stop" : 1627272662731,
          "duration" : 0
        }
      }, {
        "uid" : "e1248d9fecf4c728",
        "status" : "passed",
        "time" : {
          "start" : 1627184621963,
          "stop" : 1627184621964,
          "duration" : 1
        }
      }, {
        "uid" : "fa7eb3ce2eb14197",
        "status" : "broken",
        "statusDetails" : "socket.timeout: timed out",
        "time" : {
          "start" : 1626926371625,
          "stop" : 1626926371625,
          "duration" : 0
        }
      }, {
        "uid" : "7d089c4dacd7594c",
        "status" : "passed",
        "time" : {
          "start" : 1626236321570,
          "stop" : 1626236321571,
          "duration" : 1
        }
      }, {
        "uid" : "e62737e44b7531b6",
        "status" : "passed",
        "time" : {
          "start" : 1625584844659,
          "stop" : 1625584844659,
          "duration" : 0
        }
      }, {
        "uid" : "e1f960d247abd0b9",
        "status" : "passed",
        "time" : {
          "start" : 1625383522772,
          "stop" : 1625383522772,
          "duration" : 0
        }
      }, {
        "uid" : "73d65a59c01ae0c2",
        "status" : "passed",
        "time" : {
          "start" : 1625297065251,
          "stop" : 1625297065252,
          "duration" : 1
        }
      }, {
        "uid" : "2ea17dd0a92b2ec1",
        "status" : "passed",
        "time" : {
          "start" : 1625037873107,
          "stop" : 1625037873108,
          "duration" : 1
        }
      }, {
        "uid" : "4439821f97731b4e",
        "status" : "passed",
        "time" : {
          "start" : 1624670801077,
          "stop" : 1624670801078,
          "duration" : 1
        }
      }, {
        "uid" : "1c42c289ea8f05f6",
        "status" : "passed",
        "time" : {
          "start" : 1624606399063,
          "stop" : 1624606399063,
          "duration" : 0
        }
      }, {
        "uid" : "4044e56c8df95c20",
        "status" : "passed",
        "time" : {
          "start" : 1624584454782,
          "stop" : 1624584454782,
          "duration" : 0
        }
      }, {
        "uid" : "67295d72ff0e5c20",
        "status" : "broken",
        "statusDetails" : "swagger_client.rest.ApiException: (500)\nReason: \nHTTP response headers: HTTPHeaderDict({'Date': 'Thu, 24 Jun 2021 20:24:16 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'POST, PATCH, PUT, HEAD, GET, OPTIONS, DELETE', 'Access-Control-Max-Age': '10', 'Access-Control-Allow-Headers': 'x-requested-with,Content-Type,content-type,Authorization', 'Access-Control-Allow-Credentials': 'true', 'X-Content-Type-Options': 'nosniff', 'X-XSS-Protection': '1; mode=block', 'Strict-Transport-Security': 'max-age=31536000 ; includeSubDomains', 'X-Frame-Options': 'DENY', 'Cache-Control': 'no-cache, no-store, max-age=0, must-revalidate', 'Expires': '0', 'Pragma': 'no-cache', 'vary': 'accept-encoding'})\nHTTP response body: {\n  \"model_type\" : \"JsonSerializedException\",\n  \"exType\" : \"IllegalStateException\",\n  \"error\" : \"Profile with id 1834 is in use by 1 network equipment and cannot be deleted\",\n  \"path\" : \"/portal/profile?profileId=1834\",\n  \"timestamp\" : 1624566256628\n}",
        "time" : {
          "start" : 1624566257265,
          "stop" : 1624566257265,
          "duration" : 0
        }
      }, {
        "uid" : "d47d0d3920dfd5b0",
        "status" : "passed",
        "time" : {
          "start" : 1624565883533,
          "stop" : 1624565883534,
          "duration" : 1
        }
      }, {
        "uid" : "d80aefa7e879e327",
        "status" : "passed",
        "time" : {
          "start" : 1624542976490,
          "stop" : 1624542976491,
          "duration" : 1
        }
      } ]
    },
    "tags" : [ "general", "@pytest.mark.usefixtures('setup_profiles')", "vlan", "suiteB", "setup", "sanity", "wpa_wpa2_personal_mixed", "twog" ]
  },
  "source" : "63ba6e88c15aa230.json",
  "parameterValues" : [ "{'mode': 'VLAN', 'ssid_modes': {'wpa3_personal': [{'ssid_name': 'ssid_wpa3_p_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal-0-VLAN', 'mode': 'BRIDGE', 'vlan': 100}, {'ssid_name': 'ssid_wpa3_p_5g', 'appliedRadios': ['is5GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal-1-VLAN', 'mode': 'BRIDGE', 'vlan': 100}], 'wpa3_personal_mixed': [{'ssid_name': 'ssid_wpa3_p_m_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal_mixed-0-VLAN', 'mode': 'BRIDGE', 'vlan': 100}, {'ssid_name': 'ssid_wpa3_p_m_5g', 'appliedRadios': ['is5GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal_mixed-1-VLAN', 'mode': 'BRIDGE', 'vlan': 100}], 'wpa_wpa2_personal_mixed': [{'ssid_name': 'ssid_wpa_wpa2_p_m_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa_wpa2_personal_mixed-0-VLAN', 'mode': 'BRIDGE', 'vlan': 100}, {'ssid_name': 'ssid_wpa_wpa2_p_m_5g', 'appliedRadios': ['is5GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa_wpa2_personal_mixed-1-VLAN', 'mode': 'BRIDGE', 'vlan': 100}]}, 'rf': {}, 'radius': False}" ]
}