{
  "uid" : "34b1389aba393e7e",
  "name" : "test_wpa_wpa2_personal_ssid_5g[setup_profiles0]",
  "fullName" : "e2e.basic.validation_of_operating_modes.bridge_mode.client_connectivity.test_general_security_modes.TestBridgeModeConnectivitySuiteTwo#test_wpa_wpa2_personal_ssid_5g",
  "historyId" : "7721057e721b10189e7cbbb0ebe0a2e5",
  "time" : {
    "start" : 1623671436623,
    "stop" : 1623671436623,
    "duration" : 0
  },
  "description" : "Client Connectivity open ssid 2.4G\n           pytest -m \"client_connectivity and bridge and general and wpa_wpa2_personal_mixed and fiveg\"\n        ",
  "descriptionHtml" : "<p>Client Connectivity open ssid 2.4G\npytest -m &quot;client_connectivity and bridge and general and wpa_wpa2_personal_mixed and fiveg&quot;</p>\n",
  "status" : "broken",
  "statusMessage" : "IndexError: list index out of range",
  "statusTrace" : "request = <SubRequest 'setup_profiles' for <Function test_wpa3_personal_ssid_2g[setup_profiles0]>>\nsetup_controller = <controller.controller.Controller object at 0x7f7f6f6527f0>\ntestbed = 'basic-02', setup_vlan = 100, get_equipment_id = [36]\ninstantiate_profile = <controller.controller.ProfileUtility object at 0x7f7f54360250>\nget_markers = {'fiveg': True, 'open': True, 'radius': False, 'twog': True, ...}\ncreate_lanforge_chamberview_dut = 'basic-02'\nlf_tools = <lanforge.lf_tools.ChamberView object at 0x7f7f6f60f0d0>\nget_security_flags = ['open', 'wpa', 'wep', 'wpa2_personal', 'wpa3_personal', 'wpa3_personal_mixed', ...]\nget_configuration = {'access_point': [{'ip': '10.28.3.100', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP2', 'mode': 'wifi6', ...}], 'cont...'wiphy4'], '2.4G-Station-Name': 'wlan0', '5G-Radio': ['wiphy5'], '5G-Station-Name': 'wlan0', ...}, 'name': 'lanforge'}}\nradius_info = {'ip': '10.10.10.72', 'name': 'basic-02-Automation-Radius-Profile-basic-02', 'password': 'password', 'pk_password': 'whatever', ...}\nget_apnos = <class 'apnos.apnos.APNOS'>\n\n    @allure.feature(\"CLIENT CONNECTIVITY SETUP\")\n    @pytest.fixture(scope=\"class\")\n    def setup_profiles(request, setup_controller, testbed, setup_vlan, get_equipment_id,\n                       instantiate_profile, get_markers, create_lanforge_chamberview_dut, lf_tools,\n                       get_security_flags, get_configuration, radius_info, get_apnos):\n        instantiate_profile = instantiate_profile(sdk_client=setup_controller)\n        vlan_id, mode = 0, 0\n        instantiate_profile.cleanup_objects()\n        parameter = dict(request.param)\n        print(parameter)\n        test_cases = {}\n        profile_data = {}\n        if parameter['mode'] not in [\"BRIDGE\", \"NAT\", \"VLAN\"]:\n            print(\"Invalid Mode: \", parameter['mode'])\n            allure.attach(body=parameter['mode'], name=\"Invalid Mode: \")\n            yield test_cases\n    \n        if parameter['mode'] == \"NAT\":\n            mode = \"NAT\"\n            vlan_id = 1\n        if parameter['mode'] == \"BRIDGE\":\n            mode = \"BRIDGE\"\n            vlan_id = 1\n        if parameter['mode'] == \"VLAN\":\n            mode = \"BRIDGE\"\n            vlan_id = setup_vlan\n    \n        instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Equipment-AP-\" + parameter['mode'])\n    \n        profile_data[\"equipment_ap\"] = {\"profile_name\": testbed + \"-Equipment-AP-\" + parameter['mode']}\n        profile_data[\"ssid\"] = {}\n        for i in parameter[\"ssid_modes\"]:\n            profile_data[\"ssid\"][i] = []\n            for j in range(len(parameter[\"ssid_modes\"][i])):\n                profile_name = testbed + \"-SSID-\" + i + \"-\" + str(j) + \"-\" + parameter['mode']\n                data = parameter[\"ssid_modes\"][i][j]\n                data[\"profile_name\"] = profile_name\n                if \"mode\" not in dict(data).keys():\n                    data[\"mode\"] = mode\n                if \"vlan\" not in dict(data).keys():\n                    data[\"vlan\"] = vlan_id\n                instantiate_profile.delete_profile_by_name(profile_name=profile_name)\n                profile_data[\"ssid\"][i].append(data)\n        #         print(profile_name)\n        # print(profile_data)\n    \n        instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Automation-Radius-Profile-\" + mode)\n        time.sleep(10)\n        \"\"\"\n          Setting up rf profile\n        \"\"\"\n        rf_profile_data = {\n            \"name\": \"RF-Profile-\" + testbed + \"-\" + parameter['mode'] + \"-\" +\n                    get_configuration['access_point'][0]['mode']\n        }\n    \n        for i in parameter[\"rf\"]:\n            rf_profile_data[i] = parameter['rf'][i]\n        # print(rf_profile_data)\n    \n        try:\n            instantiate_profile.delete_profile_by_name(profile_name=rf_profile_data['name'])\n            instantiate_profile.set_rf_profile(profile_data=rf_profile_data,\n                                               mode=get_configuration['access_point'][0]['mode'])\n            allure.attach(body=str(rf_profile_data),\n                          name=\"RF Profile Created : \" + get_configuration['access_point'][0]['mode'])\n        except Exception as e:\n            print(e)\n            allure.attach(body=str(e), name=\"Exception \")\n    \n        # Radius Profile Creation\n        if parameter[\"radius\"]:\n            radius_info = radius_info\n            radius_info[\"name\"] = testbed + \"-Automation-Radius-Profile-\" + testbed\n            instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Automation-Radius-Profile-\" + mode)\n            try:\n                instantiate_profile.create_radius_profile(radius_info=radius_info)\n                allure.attach(body=str(radius_info),\n                              name=\"Radius Profile Created\")\n                test_cases['radius_profile'] = True\n            except Exception as e:\n                print(e)\n                test_cases['radius_profile'] = False\n    \n        # SSID Profile Creation\n        lf_dut_data = []\n        for mode in profile_data['ssid']:\n            if mode == \"open\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_open_ssid_profile(profile_data=j)\n                                test_cases[\"open_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"open_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_open_ssid_profile(profile_data=j)\n                                test_cases[\"open_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"open_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_ssid_profile(profile_data=j)\n                                test_cases[\"wpa_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_ssid_profile(profile_data=j)\n                                test_cases[\"wpa_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa2_personal\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa2_personal_ssid_profile(profile_data=j)\n                                test_cases[\"wpa2_personal_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa2_personal_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa2_personal_ssid_profile(profile_data=j)\n                                test_cases[\"wpa2_personal_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa2_personal_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_wpa2_personal_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_wpa2_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa_wpa2_personal_mixed_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_wpa2_personal_mixed_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_wpa2_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa_wpa2_personal_mixed_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_wpa2_personal_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_personal\":\n                for j in profile_data[\"ssid\"][mode]:\n                    print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_personal_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_personal_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_personal_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_personal_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_personal_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_personal_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_personal_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa3_personal_mixed_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_personal_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa3_personal_mixed_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_personal_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n    \n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa_enterprise_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n    \n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_enterprise_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa_enterprise_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa2_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa2_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa2_enterprise_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa2_enterprise_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa2_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa2_enterprise_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa2_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_enterprise_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_enterprise_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_wpa2_enterprise_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_wpa2_enterprise_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa_wpa2_enterprise_mixed_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_wpa2_enterprise_mixed_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_wpa2_enterprise_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa_wpa2_enterprise_mixed_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_wpa2_enterprise_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_enterprise_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_enterprise_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa3_enterprise_mixed_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_mixed_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_enterprise_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa3_enterprise_mixed_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wep\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wep_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_enterprise_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wep_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_enterprise_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n        # Equipment AP Profile Creation\n        try:\n            instantiate_profile.set_ap_profile(profile_data=profile_data['equipment_ap'])\n            test_cases[\"equipment_ap\"] = True\n            allure.attach(body=str(profile_data['equipment_ap']),\n                          name=\"Equipment AP Profile Created\")\n        except Exception as e:\n            print(e)\n            test_cases[\"equipment_ap\"] = False\n            allure.attach(body=str(e),\n                          name=\"Equipment AP Profile Creation Failed\")\n    \n        # Push the Equipment AP Profile to AP\n        try:\n            for i in get_equipment_id:\n                instantiate_profile.push_profile_old_method(equipment_id=i)\n        except Exception as e:\n            print(e)\n            print(\"failed to create AP Profile\")\n    \n        ap_ssh = get_apnos(get_configuration['access_point'][0], pwd=\"../libs/apnos/\")\n        ssid_names = []\n        for i in instantiate_profile.profile_creation_ids[\"ssid\"]:\n            ssid_names.append(instantiate_profile.get_ssid_name_by_profile_id(profile_id=i))\n        ssid_names.sort()\n    \n        # This loop will check the VIF Config with cloud profile\n        vif_config = []\n        test_cases['vifc'] = False\n        for i in range(0, 18):\n            vif_config = list(ap_ssh.get_vif_config_ssids())\n            vif_config.sort()\n            print(vif_config)\n            print(ssid_names)\n            if ssid_names == vif_config:\n                test_cases['vifc'] = True\n                break\n            time.sleep(10)\n        allure.attach(body=str(\"VIF Config: \" + str(vif_config) + \"\\n\" + \"SSID Pushed from Controller: \" + str(ssid_names)),\n                      name=\"SSID Profiles in VIF Config and Controller: \")\n        ap_ssh = get_apnos(get_configuration['access_point'][0], pwd=\"../libs/apnos/\")\n    \n        # This loop will check the VIF Config with VIF State\n        test_cases['vifs'] = False\n        for i in range(0, 18):\n            vif_state = list(ap_ssh.get_vif_state_ssids())\n            vif_state.sort()\n            vif_config = list(ap_ssh.get_vif_config_ssids())\n            vif_config.sort()\n            print(vif_config)\n            print(vif_state)\n            if vif_state == vif_config:\n                test_cases['vifs'] = True\n                break\n            time.sleep(10)\n        allure.attach(body=str(\"VIF Config: \" + str(vif_config) + \"\\n\" + \"VIF State: \" + str(vif_state)),\n                      name=\"SSID Profiles in VIF Config and VIF State: \")\n    \n        ssid_info = ap_ssh.get_ssid_info()\n        ssid_data = []\n        print(ssid_info)\n        for i in range(0, len(ssid_info)):\n            if ssid_info[i][1] == \"OPEN\":\n                ssid_info[i].append(\"\")\n>           ssid = [\"ssid_idx=\" + str(i) + \" ssid=\" + ssid_info[i][3] +\n                    \" password=\" + ssid_info[i][2] + \" bssid=\" + ssid_info[i][0]]\nE           IndexError: list index out of range\n\ne2e/basic/conftest.py:577: IndexError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "get_vif_state",
    "time" : {
      "start" : 1623671516662,
      "stop" : 1623671519094,
      "duration" : 2432
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "b113769252c71b6b",
      "name" : "APNOS LIbrary: ",
      "source" : "b113769252c71b6b.attach",
      "type" : "text/plain",
      "size" : 294
    }, {
      "uid" : "57371eedd818ce66",
      "name" : "openwrt_ctl Setup",
      "source" : "57371eedd818ce66.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "5aa4e0a5f2273cf0",
      "name" : "vif state Output Msg: ",
      "source" : "5aa4e0a5f2273cf0.attach",
      "type" : "text/plain",
      "size" : 3
    }, {
      "uid" : "a75ce930dc0ee3da",
      "name" : "vif state Err Msg: ",
      "source" : "a75ce930dc0ee3da.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "d9c8cf3a81077586",
      "name" : "get_vif_state_ssids ",
      "source" : "d9c8cf3a81077586.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "16345abce620f198",
      "name" : "vif_state",
      "source" : "16345abce620f198.attach",
      "type" : "text/plain",
      "size" : 2
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 6,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "update_report",
    "time" : {
      "start" : 1623665835368,
      "stop" : 1623665835368,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_apnos",
    "time" : {
      "start" : 1623665830824,
      "stop" : 1623665830824,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "test_cases",
    "time" : {
      "start" : 1623665835369,
      "stop" : 1623665835369,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_security_flags",
    "time" : {
      "start" : 1623665841683,
      "stop" : 1623665841683,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "check_ap_firmware_cloud",
    "time" : {
      "start" : 1623665832541,
      "stop" : 1623665832616,
      "duration" : 75
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_lanforge_data",
    "time" : {
      "start" : 1623669639505,
      "stop" : 1623669639505,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "radius_info",
    "time" : {
      "start" : 1623665844949,
      "stop" : 1623665844949,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "97e2a0504588b4e5",
      "name" : "Radius server Info: ",
      "source" : "97e2a0504588b4e5.attach",
      "type" : "text/plain",
      "size" : 126
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "setup_influx",
    "time" : {
      "start" : 1623669639506,
      "stop" : 1623669639506,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_configuration",
    "time" : {
      "start" : 1623665830824,
      "stop" : 1623665830824,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "150d812efa74e434",
      "name" : "Testbed Selected: ",
      "source" : "150d812efa74e434.attach",
      "type" : "text/plain",
      "size" : 8
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "setup_test_run",
    "time" : {
      "start" : 1623665832619,
      "stop" : 1623665835368,
      "duration" : 2749
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "621ca26a0a93d2f6",
      "name" : "APNOS LIbrary: ",
      "source" : "621ca26a0a93d2f6.attach",
      "type" : "text/plain",
      "size" : 294
    }, {
      "uid" : "ebeb3a6a6b20a457",
      "name" : "openwrt_ctl Setup",
      "source" : "ebeb3a6a6b20a457.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "2bc5e809d96bb27e",
      "name" : "get_active_firmware ",
      "source" : "2bc5e809d96bb27e.attach",
      "type" : "text/plain",
      "size" : 12
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "instantiate_access_point",
    "time" : {
      "start" : 1623665830824,
      "stop" : 1623665832340,
      "duration" : 1516
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "bd6de4dbe0bb6d62",
      "name" : "added openwrtctl.py to :",
      "source" : "bd6de4dbe0bb6d62.attach",
      "type" : "text/plain",
      "size" : 14
    }, {
      "uid" : "8f1510fbf4f30b63",
      "name" : "APNOS LIbrary: ",
      "source" : "8f1510fbf4f30b63.attach",
      "type" : "text/plain",
      "size" : 294
    }, {
      "uid" : "351aedba506bad61",
      "name" : "openwrt_ctl Setup",
      "source" : "351aedba506bad61.attach",
      "type" : "text/plain",
      "size" : 9
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "testbed",
    "time" : {
      "start" : 1623665830823,
      "stop" : 1623665830824,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "3aed0f1c94981c96",
      "name" : "Testbed Selected : ",
      "source" : "3aed0f1c94981c96.attach",
      "type" : "text/plain",
      "size" : 8
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "lf_tools",
    "time" : {
      "start" : 1623665841685,
      "stop" : 1623665842001,
      "duration" : 316
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "lf_test",
    "time" : {
      "start" : 1623669639506,
      "stop" : 1623669639506,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upgrade_firmware",
    "time" : {
      "start" : 1623665832617,
      "stop" : 1623665832617,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "create_lanforge_chamberview_dut",
    "time" : {
      "start" : 1623665842002,
      "stop" : 1623665844948,
      "duration" : 2946
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_profile",
    "time" : {
      "start" : 1623665841682,
      "stop" : 1623665841682,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_vlan",
    "time" : {
      "start" : 1623665841682,
      "stop" : 1623665841682,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "3c8d19d60f151d36",
      "name" : "VLAN Created: ",
      "source" : "3c8d19d60f151d36.attach",
      "type" : "text/plain",
      "size" : 5
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_latest_firmware",
    "time" : {
      "start" : 1623665832617,
      "stop" : 1623665832617,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_profiles",
    "time" : {
      "start" : 1623670896252,
      "stop" : 1623671436266,
      "duration" : 540014
    },
    "status" : "broken",
    "statusMessage" : "IndexError: list index out of range\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 1126, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 925, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/wlan-testing/tests/e2e/basic/conftest.py\", line 577, in setup_profiles\n    ssid = [\"ssid_idx=\" + str(i) + \" ssid=\" + ssid_info[i][3] +\n",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "2c1ab44100cf5cd1",
      "name" : "RF Profile Created : wifi6",
      "source" : "2c1ab44100cf5cd1.attach",
      "type" : "text/plain",
      "size" : 44
    }, {
      "uid" : "90ed4f2198fcac07",
      "name" : "SSID Profile Created",
      "source" : "90ed4f2198fcac07.attach",
      "type" : "text/plain",
      "size" : 2824
    }, {
      "uid" : "7e247d8c71c8678a",
      "name" : "SSID Profile Created",
      "source" : "7e247d8c71c8678a.attach",
      "type" : "text/plain",
      "size" : 2842
    }, {
      "uid" : "3ded682bcf3abc64",
      "name" : "SSID Profile Created",
      "source" : "3ded682bcf3abc64.attach",
      "type" : "text/plain",
      "size" : 2833
    }, {
      "uid" : "882d732ac15f54c",
      "name" : "SSID Profile Created",
      "source" : "882d732ac15f54c.attach",
      "type" : "text/plain",
      "size" : 2851
    }, {
      "uid" : "988c6835b706310b",
      "name" : "SSID Profile Created",
      "source" : "988c6835b706310b.attach",
      "type" : "text/plain",
      "size" : 2836
    }, {
      "uid" : "c919255c5280c1b0",
      "name" : "SSID Profile Created",
      "source" : "c919255c5280c1b0.attach",
      "type" : "text/plain",
      "size" : 2854
    }, {
      "uid" : "903d911a1eb62735",
      "name" : "Equipment AP Profile Created",
      "source" : "903d911a1eb62735.attach",
      "type" : "text/plain",
      "size" : 48
    }, {
      "uid" : "d4428983e21e3042",
      "name" : "APNOS LIbrary: ",
      "source" : "d4428983e21e3042.attach",
      "type" : "text/plain",
      "size" : 294
    }, {
      "uid" : "b23729b0c72ef15e",
      "name" : "openwrt_ctl Setup",
      "source" : "b23729b0c72ef15e.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "5cf7013e0aac2f31",
      "name" : "vif config Output Msg: ",
      "source" : "5cf7013e0aac2f31.attach",
      "type" : "text/plain",
      "size" : 63
    }, {
      "uid" : "b007c3e1a39f1e60",
      "name" : "vif config Err Msg: ",
      "source" : "b007c3e1a39f1e60.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "14b4931541da836b",
      "name" : "get_vif_config_ssids ",
      "source" : "14b4931541da836b.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "f9d3f8cc64b5c299",
      "name" : "vif config Output Msg: ",
      "source" : "f9d3f8cc64b5c299.attach",
      "type" : "text/plain",
      "size" : 1923
    }, {
      "uid" : "d75ffbbbeaa2d89b",
      "name" : "vif config Err Msg: ",
      "source" : "d75ffbbbeaa2d89b.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "d8aead58ec058249",
      "name" : "get_vif_config_ssids ",
      "source" : "d8aead58ec058249.attach",
      "type" : "text/plain",
      "size" : 20
    }, {
      "uid" : "39b00c354750af40",
      "name" : "vif config Output Msg: ",
      "source" : "39b00c354750af40.attach",
      "type" : "text/plain",
      "size" : 3
    }, {
      "uid" : "d2719fdb05abe929",
      "name" : "vif config Err Msg: ",
      "source" : "d2719fdb05abe929.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "e6037bc16f28f50",
      "name" : "get_vif_config_ssids ",
      "source" : "e6037bc16f28f50.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "5072d689f4e10392",
      "name" : "vif config Output Msg: ",
      "source" : "5072d689f4e10392.attach",
      "type" : "text/plain",
      "size" : 3
    }, {
      "uid" : "23a746140203163c",
      "name" : "vif config Err Msg: ",
      "source" : "23a746140203163c.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "40c0b46ab544c0f4",
      "name" : "get_vif_config_ssids ",
      "source" : "40c0b46ab544c0f4.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "c1d57117ad864611",
      "name" : "vif config Output Msg: ",
      "source" : "c1d57117ad864611.attach",
      "type" : "text/plain",
      "size" : 3
    }, {
      "uid" : "c257e8cc61162812",
      "name" : "vif config Err Msg: ",
      "source" : "c257e8cc61162812.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "4ba7b25ecb78e1a5",
      "name" : "get_vif_config_ssids ",
      "source" : "4ba7b25ecb78e1a5.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "f2d020061e438a06",
      "name" : "vif config Output Msg: ",
      "source" : "f2d020061e438a06.attach",
      "type" : "text/plain",
      "size" : 1927
    }, {
      "uid" : "3e6f1b33144234d7",
      "name" : "vif config Err Msg: ",
      "source" : "3e6f1b33144234d7.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "8c9551bc88d29804",
      "name" : "get_vif_config_ssids ",
      "source" : "8c9551bc88d29804.attach",
      "type" : "text/plain",
      "size" : 20
    }, {
      "uid" : "b5ab9ce230dce542",
      "name" : "vif config Output Msg: ",
      "source" : "b5ab9ce230dce542.attach",
      "type" : "text/plain",
      "size" : 3
    }, {
      "uid" : "71c97551b0c1b465",
      "name" : "vif config Err Msg: ",
      "source" : "71c97551b0c1b465.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "5785ea3f7b233286",
      "name" : "get_vif_config_ssids ",
      "source" : "5785ea3f7b233286.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "ab44531a2a943d5b",
      "name" : "vif config Output Msg: ",
      "source" : "ab44531a2a943d5b.attach",
      "type" : "text/plain",
      "size" : 3
    }, {
      "uid" : "a59953c659e1488",
      "name" : "vif config Err Msg: ",
      "source" : "a59953c659e1488.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "f7f8fd047cba0018",
      "name" : "get_vif_config_ssids ",
      "source" : "f7f8fd047cba0018.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "e148a9353dc76cd4",
      "name" : "vif config Output Msg: ",
      "source" : "e148a9353dc76cd4.attach",
      "type" : "text/plain",
      "size" : 3
    }, {
      "uid" : "df91aebaaad0973d",
      "name" : "vif config Err Msg: ",
      "source" : "df91aebaaad0973d.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "116dd2ad11d688de",
      "name" : "get_vif_config_ssids ",
      "source" : "116dd2ad11d688de.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "7115907120d81943",
      "name" : "vif config Output Msg: ",
      "source" : "7115907120d81943.attach",
      "type" : "text/plain",
      "size" : 3
    }, {
      "uid" : "9c30487964702050",
      "name" : "vif config Err Msg: ",
      "source" : "9c30487964702050.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "acb91c5f71163407",
      "name" : "get_vif_config_ssids ",
      "source" : "acb91c5f71163407.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "6d80cfefa2d35e33",
      "name" : "vif config Output Msg: ",
      "source" : "6d80cfefa2d35e33.attach",
      "type" : "text/plain",
      "size" : 3
    }, {
      "uid" : "439d1cdb04e2798",
      "name" : "vif config Err Msg: ",
      "source" : "439d1cdb04e2798.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "e30706cfafd4cc58",
      "name" : "get_vif_config_ssids ",
      "source" : "e30706cfafd4cc58.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "de38df535095c79f",
      "name" : "vif config Output Msg: ",
      "source" : "de38df535095c79f.attach",
      "type" : "text/plain",
      "size" : 3
    }, {
      "uid" : "b8c22ed25275ec44",
      "name" : "vif config Err Msg: ",
      "source" : "b8c22ed25275ec44.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "f03e6aa93db9cdc",
      "name" : "get_vif_config_ssids ",
      "source" : "f03e6aa93db9cdc.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "122432700d642d75",
      "name" : "vif config Output Msg: ",
      "source" : "122432700d642d75.attach",
      "type" : "text/plain",
      "size" : 3
    }, {
      "uid" : "d982a0bd9d49fc17",
      "name" : "vif config Err Msg: ",
      "source" : "d982a0bd9d49fc17.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "f5cb584c5a6a6cc0",
      "name" : "get_vif_config_ssids ",
      "source" : "f5cb584c5a6a6cc0.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "9ea63822f96b0b5f",
      "name" : "vif config Output Msg: ",
      "source" : "9ea63822f96b0b5f.attach",
      "type" : "text/plain",
      "size" : 3
    }, {
      "uid" : "c9eee85becd86dcc",
      "name" : "vif config Err Msg: ",
      "source" : "c9eee85becd86dcc.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "25be70034901f3c",
      "name" : "get_vif_config_ssids ",
      "source" : "25be70034901f3c.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "74c6f7f29d05e40",
      "name" : "vif config Output Msg: ",
      "source" : "74c6f7f29d05e40.attach",
      "type" : "text/plain",
      "size" : 3851
    }, {
      "uid" : "dc1052bf7f762f09",
      "name" : "vif config Err Msg: ",
      "source" : "dc1052bf7f762f09.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "b4dd99bffca6e719",
      "name" : "get_vif_config_ssids ",
      "source" : "b4dd99bffca6e719.attach",
      "type" : "text/plain",
      "size" : 44
    }, {
      "uid" : "1e1b7bc7709773d8",
      "name" : "vif config Output Msg: ",
      "source" : "1e1b7bc7709773d8.attach",
      "type" : "text/plain",
      "size" : 3
    }, {
      "uid" : "fc759a3d8d7a6a07",
      "name" : "vif config Err Msg: ",
      "source" : "fc759a3d8d7a6a07.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "9ca71a2f36625640",
      "name" : "get_vif_config_ssids ",
      "source" : "9ca71a2f36625640.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "ca9245137fa8e5ff",
      "name" : "vif config Output Msg: ",
      "source" : "ca9245137fa8e5ff.attach",
      "type" : "text/plain",
      "size" : 5990
    }, {
      "uid" : "a8c6ef8cc3316c27",
      "name" : "vif config Err Msg: ",
      "source" : "a8c6ef8cc3316c27.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "ba828d5c60b2bc2d",
      "name" : "get_vif_config_ssids ",
      "source" : "ba828d5c60b2bc2d.attach",
      "type" : "text/plain",
      "size" : 82
    }, {
      "uid" : "c975709e61f1a4de",
      "name" : "vif config Output Msg: ",
      "source" : "c975709e61f1a4de.attach",
      "type" : "text/plain",
      "size" : 3
    }, {
      "uid" : "ac485574775f30cf",
      "name" : "vif config Err Msg: ",
      "source" : "ac485574775f30cf.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "1b61db84dd7dbd22",
      "name" : "get_vif_config_ssids ",
      "source" : "1b61db84dd7dbd22.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "539e1a9a54a6165f",
      "name" : "SSID Profiles in VIF Config and Controller: ",
      "source" : "539e1a9a54a6165f.attach",
      "type" : "text/plain",
      "size" : 168
    }, {
      "uid" : "92b56e6b56e37bb5",
      "name" : "APNOS LIbrary: ",
      "source" : "92b56e6b56e37bb5.attach",
      "type" : "text/plain",
      "size" : 294
    }, {
      "uid" : "a0e81ee4140393d5",
      "name" : "openwrt_ctl Setup",
      "source" : "a0e81ee4140393d5.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "bb57225e29b4238b",
      "name" : "vif state Output Msg: ",
      "source" : "bb57225e29b4238b.attach",
      "type" : "text/plain",
      "size" : 3
    }, {
      "uid" : "8bfd640e3bac5548",
      "name" : "vif state Err Msg: ",
      "source" : "8bfd640e3bac5548.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "2d311fcb8fba1e45",
      "name" : "get_vif_state_ssids ",
      "source" : "2d311fcb8fba1e45.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "a8e4c7673ea9e494",
      "name" : "vif config Output Msg: ",
      "source" : "a8e4c7673ea9e494.attach",
      "type" : "text/plain",
      "size" : 2456
    }, {
      "uid" : "681080594ebcd75c",
      "name" : "vif config Err Msg: ",
      "source" : "681080594ebcd75c.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "457ca4fc13f4a122",
      "name" : "get_vif_config_ssids ",
      "source" : "457ca4fc13f4a122.attach",
      "type" : "text/plain",
      "size" : 20
    }, {
      "uid" : "63d8a4f9602c8f0c",
      "name" : "vif state Output Msg: ",
      "source" : "63d8a4f9602c8f0c.attach",
      "type" : "text/plain",
      "size" : 3
    }, {
      "uid" : "716b98e83f9c4282",
      "name" : "vif state Err Msg: ",
      "source" : "716b98e83f9c4282.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "66ba213ed38cda60",
      "name" : "get_vif_state_ssids ",
      "source" : "66ba213ed38cda60.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "646fa2326ff8d17d",
      "name" : "vif config Output Msg: ",
      "source" : "646fa2326ff8d17d.attach",
      "type" : "text/plain",
      "size" : 3
    }, {
      "uid" : "eea443647ce311fc",
      "name" : "vif config Err Msg: ",
      "source" : "eea443647ce311fc.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "f5f6bd14119c35d9",
      "name" : "get_vif_config_ssids ",
      "source" : "f5f6bd14119c35d9.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "6d56974b2688ced0",
      "name" : "SSID Profiles in VIF Config and VIF State: ",
      "source" : "6d56974b2688ced0.attach",
      "type" : "text/plain",
      "size" : 28
    }, {
      "uid" : "eaba973b3143a890",
      "name" : "vif state Output Msg: ",
      "source" : "eaba973b3143a890.attach",
      "type" : "text/plain",
      "size" : 2256
    }, {
      "uid" : "da8d47eda0f5dafb",
      "name" : "vif state Err Msg: ",
      "source" : "da8d47eda0f5dafb.attach",
      "type" : "text/plain",
      "size" : 109
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 82,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "instantiate_firmware",
    "time" : {
      "start" : 1623665832470,
      "stop" : 1623665832470,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "station_names_fiveg",
    "time" : {
      "start" : 1623669983303,
      "stop" : 1623669983303,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upload_firmware",
    "time" : {
      "start" : 1623665832618,
      "stop" : 1623665832618,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "upgrade_firmware",
    "time" : {
      "start" : 1623665832618,
      "stop" : 1623665832619,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_controller",
    "time" : {
      "start" : 1623665832340,
      "stop" : 1623665832470,
      "duration" : 130
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "65bc3e617c006058",
      "name" : "Controller Instantiated: ",
      "source" : "65bc3e617c006058.attach",
      "type" : "text/plain",
      "size" : 186
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_markers",
    "time" : {
      "start" : 1623665841683,
      "stop" : 1623665841684,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "d49b5d8619005a47",
      "name" : "Test Cases Requires: ",
      "source" : "d49b5d8619005a47.attach",
      "type" : "text/plain",
      "size" : 335
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_equipment_id",
    "time" : {
      "start" : 1623665832470,
      "stop" : 1623665832540,
      "duration" : 70
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "get_vif_state::0",
    "time" : {
      "start" : 1623671519240,
      "stop" : 1623671519240,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "update_report::0",
    "time" : {
      "start" : 1623674565969,
      "stop" : 1623674565970,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_apnos::0",
    "time" : {
      "start" : 1623674566325,
      "stop" : 1623674566325,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "test_cases::0",
    "time" : {
      "start" : 1623674565971,
      "stop" : 1623674565971,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_security_flags::0",
    "time" : {
      "start" : 1623674565824,
      "stop" : 1623674565824,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "check_ap_firmware_cloud::0",
    "time" : {
      "start" : 1623674566043,
      "stop" : 1623674566044,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_lanforge_data::0",
    "time" : {
      "start" : 1623674565978,
      "stop" : 1623674565978,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "radius_info::0",
    "time" : {
      "start" : 1623674565122,
      "stop" : 1623674565122,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_influx::0",
    "time" : {
      "start" : 1623674565977,
      "stop" : 1623674565977,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_configuration::0",
    "time" : {
      "start" : 1623674566552,
      "stop" : 1623674566552,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_test_run::0",
    "time" : {
      "start" : 1623674565979,
      "stop" : 1623674565979,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_access_point::0",
    "time" : {
      "start" : 1623674566286,
      "stop" : 1623674566286,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testbed::0",
    "time" : {
      "start" : 1623674566584,
      "stop" : 1623674566585,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "lf_tools::0",
    "time" : {
      "start" : 1623674565786,
      "stop" : 1623674565786,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "lf_test::0",
    "time" : {
      "start" : 1623674565972,
      "stop" : 1623674565972,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upgrade_firmware::0",
    "time" : {
      "start" : 1623674566015,
      "stop" : 1623674566015,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_profile::0",
    "time" : {
      "start" : 1623674565924,
      "stop" : 1623674565924,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_vlan::0",
    "time" : {
      "start" : 1623674565961,
      "stop" : 1623674565961,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_latest_firmware::0",
    "time" : {
      "start" : 1623674566034,
      "stop" : 1623674566034,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_firmware::0",
    "time" : {
      "start" : 1623674566211,
      "stop" : 1623674566211,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "station_names_fiveg::0",
    "time" : {
      "start" : 1623674565979,
      "stop" : 1623674565979,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upload_firmware::0",
    "time" : {
      "start" : 1623674566003,
      "stop" : 1623674566003,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "upgrade_firmware::0",
    "time" : {
      "start" : 1623674565992,
      "stop" : 1623674565992,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_controller::1",
    "time" : {
      "start" : 1623674566271,
      "stop" : 1623674566271,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_controller::teardown_controller",
    "time" : {
      "start" : 1623674566271,
      "stop" : 1623674566272,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "f972b2294b3b1324",
      "name" : "Controller Teardown: ",
      "source" : "f972b2294b3b1324.attach",
      "type" : "text/plain",
      "size" : 186
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_markers::0",
    "time" : {
      "start" : 1623674565799,
      "stop" : 1623674565799,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_equipment_id::0",
    "time" : {
      "start" : 1623674566126,
      "stop" : 1623674566126,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "BRIDGE MODE CLIENT CONNECTIVITY"
  }, {
    "name" : "story",
    "value" : "wpa wpa2 personal mixed 5 GHZ Band"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('setup_profiles')"
  }, {
    "name" : "tag",
    "value" : "general"
  }, {
    "name" : "tag",
    "value" : "fiveg"
  }, {
    "name" : "tag",
    "value" : "sanity"
  }, {
    "name" : "tag",
    "value" : "wpa_wpa2_personal_mixed"
  }, {
    "name" : "tag",
    "value" : "suiteB"
  }, {
    "name" : "tag",
    "value" : "client_connectivity"
  }, {
    "name" : "tag",
    "value" : "bridge"
  }, {
    "name" : "parentSuite",
    "value" : "e2e.basic.validation_of_operating_modes.bridge_mode.client_connectivity"
  }, {
    "name" : "suite",
    "value" : "test_general_security_modes"
  }, {
    "name" : "subSuite",
    "value" : "TestBridgeModeConnectivitySuiteTwo"
  }, {
    "name" : "host",
    "value" : "nightly-ci-489-6ks62"
  }, {
    "name" : "thread",
    "value" : "6-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "e2e.basic.validation_of_operating_modes.bridge_mode.client_connectivity.test_general_security_modes"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "setup_profiles",
    "value" : "{'mode': 'BRIDGE', 'ssid_modes': {'wpa3_personal': [{'ssid_name': 'ssid_wpa3_p_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa3_p_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}], 'wpa3_personal_mixed': [{'ssid_name': 'ssid_wpa3_p_m_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal_mixed-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa3_p_m_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal_mixed-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}], 'wpa_wpa2_personal_mixed': [{'ssid_name': 'ssid_wpa_wpa2_p_m_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa_wpa2_personal_mixed-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa_wpa2_p_m_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa_wpa2_personal_mixed-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}]}, 'rf': {}, 'radius': False}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 2,
        "skipped" : 4,
        "passed" : 0,
        "unknown" : 0,
        "total" : 7
      },
      "items" : [ {
        "uid" : "348127acbee364a4",
        "status" : "skipped",
        "statusDetails" : "XFAIL reason: SSID NOT AVAILABLE IN VIF STATE\n\n_pytest.outcomes.XFailed: SSID NOT AVAILABLE IN VIF STATE",
        "time" : {
          "start" : 1623635491084,
          "stop" : 1623635491085,
          "duration" : 1
        }
      }, {
        "uid" : "da51505be7d5a371",
        "status" : "skipped",
        "statusDetails" : "XFAIL reason: SSID NOT AVAILABLE IN VIF STATE\n\n_pytest.outcomes.XFailed: SSID NOT AVAILABLE IN VIF STATE",
        "time" : {
          "start" : 1623498080228,
          "stop" : 1623498080228,
          "duration" : 0
        }
      }, {
        "uid" : "e7cf2cb117e166f5",
        "status" : "skipped",
        "statusDetails" : "XFAIL reason: SSID NOT AVAILABLE IN VIF STATE\n\n_pytest.outcomes.XFailed: SSID NOT AVAILABLE IN VIF STATE",
        "time" : {
          "start" : 1623417110000,
          "stop" : 1623417110001,
          "duration" : 1
        }
      }, {
        "uid" : "cf13fbb67229ce86",
        "status" : "broken",
        "statusDetails" : "swagger_client.rest.ApiException: (500)\nReason: \nHTTP response headers: HTTPHeaderDict({'Date': 'Fri, 11 Jun 2021 11:38:27 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'POST, PATCH, PUT, HEAD, GET, OPTIONS, DELETE', 'Access-Control-Max-Age': '10', 'Access-Control-Allow-Headers': 'x-requested-with,Content-Type,content-type,Authorization', 'Access-Control-Allow-Credentials': 'true', 'X-Content-Type-Options': 'nosniff', 'X-XSS-Protection': '1; mode=block', 'Strict-Transport-Security': 'max-age=31536000 ; includeSubDomains', 'X-Frame-Options': 'DENY', 'Cache-Control': 'no-cache, no-store, max-age=0, must-revalidate', 'Expires': '0', 'Pragma': 'no-cache', 'vary': 'accept-encoding'})\nHTTP response body: {\n  \"model_type\" : \"JsonSerializedException\",\n  \"exType\" : \"ResourceAccessException\",\n  \"error\" : \"I/O error on GET request for \\\"https://tip-wlan-prov-service:9091/api/equipment/forCustomer\\\": Connect to tip-wlan-prov-service:9091 [tip-wlan-prov-service/172.20.29.206] failed: Connection refused; nested exception is org.apache.http.conn.HttpHostConnectException: Connect to tip-wlan-prov-service:9091 [tip-wlan-prov-service/172.20.29.206] failed: Connection refused\",\n  \"path\" : \"/portal/equipment/forCustomer?customerId=2&amp;paginationContext=%7B%0A++++++++++++++++%22model_type%22%3A+%22PaginationContext%22%2C%0A++++++++++++++++%22maxItemsPerPage%22%3A+100%0A++++++++%7D\",\n  \"timestamp\" : 1623411507541\n}",
        "time" : {
          "start" : 1623411531898,
          "stop" : 1623411531898,
          "duration" : 0
        }
      }, {
        "uid" : "26337d1c6a1e888",
        "status" : "skipped",
        "statusDetails" : "XFAIL reason: SSID NOT AVAILABLE IN VIF STATE\n\n_pytest.outcomes.XFailed: SSID NOT AVAILABLE IN VIF STATE",
        "time" : {
          "start" : 1623407530930,
          "stop" : 1623407530931,
          "duration" : 1
        }
      }, {
        "uid" : "6b68a360e66ac072",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert False",
        "time" : {
          "start" : 1623394894742,
          "stop" : 1623395030208,
          "duration" : 135466
        }
      } ]
    },
    "tags" : [ "@pytest.mark.usefixtures('setup_profiles')", "general", "suiteB", "sanity", "wpa_wpa2_personal_mixed", "client_connectivity", "fiveg", "bridge" ]
  },
  "source" : "34b1389aba393e7e.json",
  "parameterValues" : [ "{'mode': 'BRIDGE', 'ssid_modes': {'wpa3_personal': [{'ssid_name': 'ssid_wpa3_p_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa3_p_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}], 'wpa3_personal_mixed': [{'ssid_name': 'ssid_wpa3_p_m_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal_mixed-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa3_p_m_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal_mixed-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}], 'wpa_wpa2_personal_mixed': [{'ssid_name': 'ssid_wpa_wpa2_p_m_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa_wpa2_personal_mixed-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa_wpa2_p_m_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa_wpa2_personal_mixed-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}]}, 'rf': {}, 'radius': False}" ]
}