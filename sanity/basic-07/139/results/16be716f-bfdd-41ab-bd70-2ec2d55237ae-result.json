{"name": "test_open_ssid_2g[setup_profiles0]", "status": "broken", "statusDetails": {"message": "TypeError: 'NoneType' object is not subscriptable", "trace": "self = <tests.e2e.basic.validation_of_operating_modes.nat_mode.client_connectivity.test_general_security_modes.TestNATModeConnectivitySuiteA object at 0x7fd8f2c85460>\nget_vif_state = ['ssid_wpa2_eap_2g', 'ssid_wpa2_eap_5g', 'ssid_wpa3_eap_2g', 'ssid_wpa3_eap_5g', 'ssid_wpa2_eap_2g', 'ssid_wpa2_eap_5g', ...]\nget_ap_logs = None, setup_profiles = {'wpa_2g': True}\nget_lanforge_data = {'lanforge-port-number': 8080, 'lanforge_2dot4g': '1.1.wiphy0', 'lanforge_2dot4g_prefix': 'sta10', 'lanforge_2dot4g_station': 'sta10', ...}\nlf_test = <lanforge.lf_tests.RunTest object at 0x7fd8f41d4c70>\nupdate_report = <testrails.reporting.Reporting object at 0x7fd8f42658b0>\nstation_names_twog = ['sta1000'], test_cases = []\n\n    @pytest.mark.open\n    @pytest.mark.twog\n    @allure.story('open 2.4 GHZ Band')\n    def test_open_ssid_2g(self, get_vif_state, get_ap_logs,\n                          setup_profiles, get_lanforge_data, lf_test, update_report,\n                          station_names_twog,\n                          test_cases):\n        \"\"\"Client Connectivity open ssid 2.4G\n           pytest -m \"client_connectivity and nat and general and open and twog\"\n        \"\"\"\n        global setup_params_general\n        profile_data = setup_params_general[\"ssid_modes\"][\"open\"][0]\n        ssid_name = profile_data[\"ssid_name\"]\n        print(ssid_name)\n        security_key = \"[BLANK]\"\n        security = \"open\"\n        mode = \"NAT\"\n        band = \"twog\"\n        vlan = 1\n        get_vif_state.append(ssid_name)\n        if ssid_name not in get_vif_state:\n            allure.attach(name=\"retest,vif state ssid not available:\", body=str(get_vif_state))\n            pytest.xfail(\"SSID NOT AVAILABLE IN VIF STATE\")\n>       passes, result = lf_test.Client_Connectivity(ssid=ssid_name, security=security,\n                                                     passkey=security_key, mode=mode, band=band,\n                                                     station_name=station_names_twog, vlan_id=vlan)\n\ne2e/basic/validation_of_operating_modes/nat_mode/client_connectivity/test_general_security_modes.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../libs/lanforge/lf_tests.py:102: in Client_Connectivity\n    self.staConnect.start()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sta_connect2.StaConnect2 object at 0x7fd8f02886a0>\n\n    def start(self):\n        if self.station_profile is None:\n            self._fail(\"Incorrect setup\")\n        pprint.pprint(self.station_profile)\n        if self.station_profile.up is None:\n            self._fail(\"Incorrect station profile, missing profile.up\")\n        if self.station_profile.up == False:\n            print(\"\\nBringing ports up...\")\n            data = {\"shelf\": 1,\n                     \"resource\": self.resource,\n                     \"port\": \"ALL\",\n                     \"probe_flags\": 1}\n            self.json_post(\"/cli-json/nc_show_ports\", data)\n            self.station_profile.admin_up()\n            LFUtils.waitUntilPortsAdminUp(self.resource, self.lfclient_url, self.station_names)\n    \n        if self.influx_db is not None:\n            grapher = RecordInflux(_influx_host=self.influx_host,\n                                   _influx_db=self.influx_db,\n                                   _influx_user=self.influx_user,\n                                   _influx_passwd=self.influx_passwd,\n                                   _longevity=1,\n                                   _devices=self.station_names,\n                                   _monitor_interval=1,\n                                   _target_kpi=['bps rx'])\n    \n        # station_info = self.jsonGet(self.mgr_url, \"%s?fields=port,ip,ap\" % (self.getStaUrl()))\n        duration = 0\n        maxTime = self.bringup_time_sec\n        ip = \"0.0.0.0\"\n        ap = \"\"\n        print(\"Waiting for %s stations to associate to AP: \" % len(self.station_names), end=\"\")\n        connected_stations = {}\n        while (len(connected_stations.keys()) < len(self.station_names)) and (duration < maxTime):\n            duration += 3\n            time.sleep(3)\n            print(\".\", end=\"\")\n            for sta_name in self.station_names:\n                sta_url = self.get_station_url(sta_name)\n                station_info = self.json_get(sta_url + \"?fields=port,ip,ap\")\n    \n                # LFUtils.debug_printer.pprint(station_info)\n                if (station_info is not None) and (\"interface\" in station_info):\n                    if \"ip\" in station_info[\"interface\"]:\n                        ip = station_info[\"interface\"][\"ip\"]\n                    if \"ap\" in station_info[\"interface\"]:\n                        ap = station_info[\"interface\"][\"ap\"]\n    \n                if (ap == \"Not-Associated\") or (ap == \"\"):\n                    if self.debug:\n                        print(\" -%s,\" % sta_name, end=\"\")\n                else:\n                    if ip == \"0.0.0.0\":\n                        if self.debug:\n                            print(\" %s (0.0.0.0)\" % sta_name, end=\"\")\n                    else:\n                        connected_stations[sta_name] = sta_url\n            data = {\n                \"shelf\":1,\n                \"resource\": self.resource,\n                \"port\": \"ALL\",\n                \"probe_flags\": 1\n            }\n            self.json_post(\"/cli-json/nc_show_ports\", data)\n            if self.influx_db is not None:\n                grapher.getdata()\n        LFUtils.wait_until_ports_appear()\n    \n        for sta_name in self.station_names:\n            sta_url = self.get_station_url(sta_name)\n            station_info = self.json_get(sta_url) # + \"?fields=port,ip,ap\")\n            if station_info is None:\n                print(\"unable to query %s\" % sta_url)\n            self.resulting_stations[sta_url] = station_info\n            try:\n                ap = station_info[\"interface\"][\"ap\"]\n            except Exception as e:\n                print(e)\n                ap = \"NULL\"\n>           ip = station_info[\"interface\"][\"ip\"]\nE           TypeError: 'NoneType' object is not subscriptable\n\n../lanforge/lanforge-scripts/py-scripts/sta_connect2.py:286: TypeError"}, "description": "Client Connectivity open ssid 2.4G\n           pytest -m \"client_connectivity and nat and general and open and twog\"\n        ", "parameters": [{"name": "setup_profiles", "value": "{'mode': 'NAT', 'ssid_modes': {'open': [{'ssid_name': 'ssid_open_2g_nat', 'appliedRadios': ['2G'], 'security_key': 'something', 'security': 'none'}, {'ssid_name': 'ssid_open_5g_nat', 'appliedRadios': ['5G'], 'security_key': 'something', 'security': 'none'}], 'wpa': [{'ssid_name': 'ssid_wpa_2g_nat', 'appliedRadios': ['2G'], 'security_key': 'something', 'security': 'psk'}, {'ssid_name': 'ssid_wpa_5g_nat', 'appliedRadios': ['5G'], 'security_key': 'something', 'security': 'psk'}], 'wpa2_personal': [{'ssid_name': 'ssid_wpa2_2g_nat', 'appliedRadios': ['2G'], 'security_key': 'something', 'security': 'psk2'}, {'ssid_name': 'ssid_wpa2_5g_nat', 'appliedRadios': ['5G'], 'security_key': 'something', 'security': 'psk2'}]}, 'rf': {}, 'radius': False}"}], "start": 1631666955969, "stop": 1631667061106, "uuid": "dd8df4d6-6f16-436e-8e5f-b9658025f93c", "historyId": "fccd225e49cdf62decab85dcfc14aa55", "testCaseId": "4ccb218e39484470d86eba888cdf6192", "fullName": "e2e.basic.validation_of_operating_modes.nat_mode.client_connectivity.test_general_security_modes.TestNATModeConnectivitySuiteA#test_open_ssid_2g", "labels": [{"name": "story", "value": "open 2.4 GHZ Band"}, {"name": "feature", "value": "NAT MODE CLIENT CONNECTIVITY"}, {"name": "tag", "value": "uc_sanity"}, {"name": "tag", "value": "ucentral"}, {"name": "tag", "value": "general"}, {"name": "tag", "value": "nat"}, {"name": "tag", "value": "suiteA"}, {"name": "tag", "value": "open"}, {"name": "tag", "value": "sanity_ucentral"}, {"name": "tag", "value": "client_connectivity"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "twog"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "parentSuite", "value": "e2e.basic.validation_of_operating_modes.nat_mode.client_connectivity"}, {"name": "suite", "value": "test_general_security_modes"}, {"name": "subSuite", "value": "TestNATModeConnectivitySuiteA"}, {"name": "host", "value": "testing-139-zh76k"}, {"name": "thread", "value": "6-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.basic.validation_of_operating_modes.nat_mode.client_connectivity.test_general_security_modes"}]}