{"name": "test_wpa3_enterprise_5g[setup_profiles0]", "status": "broken", "statusDetails": {"message": "TypeError: 'NoneType' object is not subscriptable", "trace": "self = <tests.e2e.basic.validation_of_operating_modes.vlan_mode.client_connectivity.test_enterprise_ttls.TestVLANModeEnterpriseTTLSSuiteOne object at 0x7f4e303368b0>\nget_vif_state = ['ssid_wpa2_eap_2g', 'ssid_wpa2_eap_5g', 'ssid_open_2g_br', 'ssid_open_5g_br', 'ssid_wpa_2g_br', 'ssid_wpa_5g_br', ...]\nget_ap_logs = None, station_names_fiveg = ['sta1000']\nsetup_profiles = {'wpa_2g': True}\nget_lanforge_data = {'lanforge-port-number': 8080, 'lanforge_2dot4g': '1.1.wiphy0', 'lanforge_2dot4g_prefix': 'sta00', 'lanforge_2dot4g_station': 'sta00', ...}\nlf_test = <lanforge.lf_tests.RunTest object at 0x7f4e50c3d220>\nupdate_report = <testrails.reporting.Reporting object at 0x7f4e50c3df40>\ntest_cases = []\nradius_info = {'ip': '10.10.10.180', 'password': 'password', 'pk_password': 'whatever', 'port': 1812, ...}\nexit_on_fail = False\n\n    @pytest.mark.wpa3_enterprise\n    @pytest.mark.fiveg\n    @pytest.mark.uc_sanity\n    def test_wpa3_enterprise_5g(self, get_vif_state, get_ap_logs,\n                                station_names_fiveg, setup_profiles, get_lanforge_data, lf_test,\n                                update_report,\n                                test_cases, radius_info, exit_on_fail):\n        profile_data = setup_params_enterprise[\"ssid_modes\"][\"wpa3_enterprise\"][1]\n        ssid_name = profile_data[\"ssid_name\"]\n        security = \"wpa3\"\n        mode = \"VLAN\"\n        band = \"fiveg\"\n        vlan = 100\n        ttls_passwd = radius_info[\"password\"]\n        eap = \"TTLS\"\n        identity = radius_info['user']\n        if ssid_name not in get_vif_state:\n            allure.attach(name=\"retest,vif state ssid not available:\", body=str(get_vif_state))\n            pytest.xfail(\"SSID NOT AVAILABLE IN VIF STATE\")\n>       passes = lf_test.EAP_Connect(ssid=ssid_name, security=security,\n                                     mode=mode, band=band, ieee80211w=2, key_mgmt=\"WPA-EAP-SHA256\",\n                                     eap=eap, ttls_passwd=ttls_passwd, identity=identity,\n                                     station_name=station_names_fiveg, vlan_id=vlan)\n\ne2e/basic/validation_of_operating_modes/vlan_mode/client_connectivity/test_enterprise_ttls.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <lanforge.lf_tests.RunTest object at 0x7f4e50c3d220>\nssid = 'ssid_wpa3_eap_5g', passkey = '[BLANK]', security = 'wpa3'\nextra_securities = [], mode = 'VLAN', band = 'fiveg', vlan_id = 100\nstation_name = ['sta1000'], key_mgmt = 'WPA-EAP-SHA256', pairwise = 'NA'\ngroup = 'NA', wpa_psk = 'DEFAULT', ttls_passwd = 'password', ieee80211w = 2\nwep_key = 'NA', ca_cert = 'NA', eap = 'TTLS', identity = 'user'\n\n    def EAP_Connect(self, ssid=\"[BLANK]\", passkey=\"[BLANK]\", security=\"wpa2\", extra_securities=[],\n                    mode=\"BRIDGE\", band=\"twog\", vlan_id=100,\n                    station_name=[], key_mgmt=\"WPA-EAP\",\n                    pairwise=\"NA\", group=\"NA\", wpa_psk=\"DEFAULT\",\n                    ttls_passwd=\"nolastart\", ieee80211w=1,\n                    wep_key=\"NA\", ca_cert=\"NA\", eap=\"TTLS\", identity=\"nolaradius\"):\n        self.eap_connect = TTLSTest(host=self.lanforge_ip, port=self.lanforge_port,\n                                    sta_list=station_name, vap=False, _debug_on=self.debug)\n    \n        self.eap_connect.station_profile.sta_mode = 0\n        self.eap_connect.upstream_resource = 1\n        if mode == \"BRIDGE\":\n            self.eap_connect.l3_cx_obj_udp.upstream = self.upstream_port\n            self.eap_connect.l3_cx_obj_tcp.upstream = self.upstream_port\n        elif mode == \"NAT\":\n            self.eap_connect.l3_cx_obj_udp.upstream = self.upstream_port\n            self.eap_connect.l3_cx_obj_tcp.upstream = self.upstream_port\n        else:\n            self.eap_connect.l3_cx_obj_udp.upstream = self.upstream_port + \".\" + str(vlan_id)\n            self.eap_connect.l3_cx_obj_tcp.upstream = self.upstream_port + \".\" + str(vlan_id)\n        if band == \"twog\":\n            self.eap_connect.radio = self.twog_radios[0]\n            # self.eap_connect.sta_prefix = self.twog_prefix\n        if band == \"fiveg\":\n            self.eap_connect.radio = self.fiveg_radios[0]\n            # self.eap_connect.sta_prefix = self.fiveg_prefix\n        # self.eap_connect.resource = 1\n        if eap == \"TTLS\":\n            self.eap_connect.ieee80211w = ieee80211w\n            self.eap_connect.key_mgmt = key_mgmt\n            self.eap_connect.station_profile.set_command_flag(\"add_sta\", \"80211u_enable\", 0)\n            self.eap_connect.identity = identity\n            self.eap_connect.ttls_passwd = ttls_passwd\n            self.eap_connect.pairwise = pairwise\n            self.eap_connect.group = group\n        if eap == \"TLS\":\n            self.eap_connect.key_mgmt = \"WPA-EAP-SUITE-B\"\n            self.eap_connect.station_profile.set_command_flag(\"add_sta\", \"80211u_enable\", 0)\n            self.eap_connect.pairwise = \"TKIP\"\n            self.eap_connect.group = \"TKIP\"\n            self.eap_connect.eap = \"EAP-TLS\"\n    \n        # self.eap_connect.hs20_enable = False\n        self.eap_connect.ssid = ssid\n        self.eap_connect.password = passkey\n        self.eap_connect.security = security\n        self.eap_connect.sta_list = station_name\n        self.eap_connect.build(extra_securities=extra_securities)\n        self.eap_connect.start(station_name, True, True)\n        for sta_name in station_name:\n            # try:\n            station_data_str = \"\"\n            # sta_url = self.eap_connect.get_station_url(sta_name)\n            # station_info = self.eap_connect.json_get(sta_url)\n            station_info = self.eap_connect.json_get(\"port/1/1/\" + sta_name)\n>           for i in station_info[\"interface\"]:\nE           TypeError: 'NoneType' object is not subscriptable\n\n../libs/lanforge/lf_tests.py:197: TypeError"}, "parameters": [{"name": "setup_profiles", "value": "{'mode': 'VLAN', 'ssid_modes': {'wpa_enterprise': [{'ssid_name': 'ssid_wpa_eap_2g', 'appliedRadios': ['2G'], 'vlan': 100}, {'ssid_name': 'ssid_wpa_eap_5g', 'appliedRadios': ['5G'], 'vlan': 100}], 'wpa2_enterprise': [{'ssid_name': 'ssid_wpa2_eap_2g', 'appliedRadios': ['2G'], 'vlan': 100, 'security': 'wpa2'}, {'ssid_name': 'ssid_wpa2_eap_5g', 'appliedRadios': ['5G'], 'vlan': 100, 'security': 'wpa2'}], 'wpa3_enterprise': [{'ssid_name': 'ssid_wpa3_eap_2g', 'appliedRadios': ['2G'], 'vlan': 100, 'security': 'wpa3'}, {'ssid_name': 'ssid_wpa3_eap_5g', 'appliedRadios': ['5G'], 'vlan': 100, 'security': 'wpa3'}]}, 'rf': {}, 'radius': True}"}], "start": 1631668950847, "stop": 1631669152078, "uuid": "da4a10b6-7ac5-4ed6-a53c-798761c3205b", "historyId": "8f033fec41da816f0440c335195f4696", "testCaseId": "41226566dbbfbfc1a66b5c043eacbbde", "fullName": "e2e.basic.validation_of_operating_modes.vlan_mode.client_connectivity.test_enterprise_ttls.TestVLANModeEnterpriseTTLSSuiteOne#test_wpa3_enterprise_5g", "labels": [{"name": "tag", "value": "fiveg"}, {"name": "tag", "value": "client_connectivity"}, {"name": "tag", "value": "wpa3_enterprise"}, {"name": "tag", "value": "vlan"}, {"name": "tag", "value": "ucentral"}, {"name": "tag", "value": "enterprise"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "uc_sanity"}, {"name": "tag", "value": "ttls"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "parentSuite", "value": "e2e.basic.validation_of_operating_modes.vlan_mode.client_connectivity"}, {"name": "suite", "value": "test_enterprise_ttls"}, {"name": "subSuite", "value": "TestVLANModeEnterpriseTTLSSuiteOne"}, {"name": "host", "value": "testing-139-dfwdn"}, {"name": "thread", "value": "6-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.basic.validation_of_operating_modes.vlan_mode.client_connectivity.test_enterprise_ttls"}]}