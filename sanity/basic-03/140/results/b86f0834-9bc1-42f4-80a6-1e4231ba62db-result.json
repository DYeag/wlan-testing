{"name": "test_wpa_wpa2_personal_ssid_2g[setup_profiles0]", "status": "broken", "statusDetails": {"message": "http.client.RemoteDisconnected: Remote end closed connection without response", "trace": "self = <tests.e2e.basic.validation_of_operating_modes.nat_mode.client_connectivity.test_general_security_modes.TestNATModeConnectivitySuiteB object at 0x7fefd821c6d0>\nget_vif_state = ['ssid_wpa2_eap_2g', 'ssid_wpa2_eap_5g', 'ssid_wpa3_eap_2g', 'ssid_wpa3_eap_5g', 'ssid_wpa2_eap_2g', 'ssid_wpa2_eap_5g', ...]\nget_ap_logs = None, station_names_twog = ['sta0000']\nsetup_profiles = {'wpa_2g': True}\nget_lanforge_data = {'lanforge-port-number': 8080, 'lanforge_2dot4g': '1.1.wiphy4', 'lanforge_2dot4g_prefix': 'sta00', 'lanforge_2dot4g_station': 'sta00', ...}\nlf_test = <lanforge.lf_tests.RunTest object at 0x7fefdaeb93d0>\nupdate_report = <testrails.reporting.Reporting object at 0x7fefd9d552b0>\ntest_cases = []\n\n    @pytest.mark.wpa_wpa2_personal_mixed\n    @pytest.mark.twog\n    @allure.story('wpa wpa2 personal mixed 2.4 GHZ Band')\n    def test_wpa_wpa2_personal_ssid_2g(self, get_vif_state, get_ap_logs,\n                                       station_names_twog, setup_profiles, get_lanforge_data,\n                                       lf_test,\n                                       update_report,\n                                       test_cases):\n        \"\"\"Client Connectivity open ssid 2.4G\n           pytest -m \"client_connectivity and NAT and general and wpa_wpa2_personal_mixed and twog\"\n        \"\"\"\n        profile_data = setup_params_general_two[\"ssid_modes\"][\"wpa_wpa2_personal_mixed\"][0]\n        ssid_name = profile_data[\"ssid_name\"]\n        security_key = profile_data[\"security_key\"]\n        security = \"wpa\"\n        extra_secu = [\"wpa2\"]\n        mode = \"NAT\"\n        band = \"twog\"\n        vlan = 1\n        get_vif_state.append(ssid_name)\n        if ssid_name not in get_vif_state:\n            allure.attach(name=\"retest,vif state ssid not available:\", body=str(get_vif_state))\n            pytest.xfail(\"SSID NOT AVAILABLE IN VIF STATE\")\n>       passes, result = lf_test.Client_Connectivity(ssid=ssid_name, security=security, extra_securities=extra_secu,\n                                                     passkey=security_key, mode=mode, band=band,\n                                                     station_name=station_names_twog, vlan_id=vlan)\n\ne2e/basic/validation_of_operating_modes/nat_mode/client_connectivity/test_general_security_modes.py:377: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../libs/lanforge/lf_tests.py:102: in Client_Connectivity\n    self.staConnect.start()\n../lanforge/lanforge-scripts/py-scripts/sta_connect2.py:246: in start\n    station_info = self.json_get(sta_url + \"?fields=port,ip,ap\")\n../lanforge/lanforge-scripts/py-json/LANforge/lfcli_base.py:273: in json_get\n    json_response = lf_r.get_as_json(debug_=debug_, die_on_error_=False)\n../lanforge/lanforge-scripts/py-json/LANforge/LFRequest.py:310: in get_as_json\n    j = self.get(debug=debug_, die_on_error_=die_on_error_, method_=method_)\n../lanforge/lanforge-scripts/py-json/LANforge/LFRequest.py:268: in get\n    myresponses.append(request.urlopen(myrequest))\n/usr/local/lib/python3.8/urllib/request.py:222: in urlopen\n    return opener.open(url, data, timeout)\n/usr/local/lib/python3.8/urllib/request.py:525: in open\n    response = self._open(req, data)\n/usr/local/lib/python3.8/urllib/request.py:542: in _open\n    result = self._call_chain(self.handle_open, protocol, protocol +\n/usr/local/lib/python3.8/urllib/request.py:502: in _call_chain\n    result = func(*args)\n/usr/local/lib/python3.8/urllib/request.py:1383: in http_open\n    return self.do_open(http.client.HTTPConnection, req)\n/usr/local/lib/python3.8/urllib/request.py:1358: in do_open\n    r = h.getresponse()\n/usr/local/lib/python3.8/http/client.py:1348: in getresponse\n    response.begin()\n/usr/local/lib/python3.8/http/client.py:316: in begin\n    version, status, reason = self._read_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <http.client.HTTPResponse object at 0x7fefd80d4880>\n\n    def _read_status(self):\n        line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n        if len(line) > _MAXLINE:\n            raise LineTooLong(\"status line\")\n        if self.debuglevel > 0:\n            print(\"reply:\", repr(line))\n        if not line:\n            # Presumably, the server closed the connection before\n            # sending a valid response.\n>           raise RemoteDisconnected(\"Remote end closed connection without\"\n                                     \" response\")\nE           http.client.RemoteDisconnected: Remote end closed connection without response\n\n/usr/local/lib/python3.8/http/client.py:285: RemoteDisconnected"}, "description": "Client Connectivity open ssid 2.4G\n           pytest -m \"client_connectivity and NAT and general and wpa_wpa2_personal_mixed and twog\"\n        ", "parameters": [{"name": "setup_profiles", "value": "{'mode': 'NAT', 'ssid_modes': {'wpa3_personal': [{'ssid_name': 'ssid_wpa3_p_2g', 'appliedRadios': ['2G'], 'security_key': 'something', 'security': 'sae'}, {'ssid_name': 'ssid_wpa3_p_5g', 'appliedRadios': ['5G'], 'security_key': 'something', 'security': 'sae'}], 'wpa3_personal_mixed': [{'ssid_name': 'ssid_wpa3_p_m_2g', 'appliedRadios': ['2G'], 'security_key': 'something', 'security': 'sae-mixed'}, {'ssid_name': 'ssid_wpa3_p_m_5g', 'appliedRadios': ['5G'], 'security_key': 'something', 'security': 'sae-mixed'}], 'wpa_wpa2_personal_mixed': [{'ssid_name': 'ssid_wpa_wpa2_p_m_2g', 'appliedRadios': ['2G'], 'security_key': 'something', 'security': 'psk-mixed'}, {'ssid_name': 'ssid_wpa_wpa2_p_m_5g', 'appliedRadios': ['5G'], 'security_key': 'something', 'security': 'psk-mixed'}]}, 'rf': {}, 'radius': False}"}], "start": 1631669504602, "stop": 1631669575334, "uuid": "9ad5fe81-b327-4b3c-879b-81e32589b9af", "historyId": "9832093793af33fccc16c6eb46bbcb3b", "testCaseId": "1afc5de143dbf78c3f846bf6c54a884b", "fullName": "e2e.basic.validation_of_operating_modes.nat_mode.client_connectivity.test_general_security_modes.TestNATModeConnectivitySuiteB#test_wpa_wpa2_personal_ssid_2g", "labels": [{"name": "feature", "value": "NAT MODE CLIENT CONNECTIVITY"}, {"name": "story", "value": "wpa wpa2 personal mixed 2.4 GHZ Band"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "tag", "value": "ucentral"}, {"name": "tag", "value": "twog"}, {"name": "tag", "value": "wpa_wpa2_personal_mixed"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "nat"}, {"name": "tag", "value": "client_connectivity"}, {"name": "tag", "value": "general"}, {"name": "tag", "value": "suiteB"}, {"name": "tag", "value": "uc_sanity"}, {"name": "parentSuite", "value": "e2e.basic.validation_of_operating_modes.nat_mode.client_connectivity"}, {"name": "suite", "value": "test_general_security_modes"}, {"name": "subSuite", "value": "TestNATModeConnectivitySuiteB"}, {"name": "host", "value": "testing-140-4trlw"}, {"name": "thread", "value": "7-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.basic.validation_of_operating_modes.nat_mode.client_connectivity.test_general_security_modes"}]}