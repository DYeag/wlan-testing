{
  "uid" : "d09bf1dd2d02ea70",
  "name" : "test_wpa2_enterprise_2g[setup_profiles0]",
  "fullName" : "e2e.basic.validation_of_operating_modes.nat_mode.client_connectivity.test_enterprise_ttls.TestNATModeEnterpriseTTLSSuiteOne#test_wpa2_enterprise_2g",
  "historyId" : "d96913b2fd0ad83375a63f6621187d33",
  "time" : {
    "start" : 1628814277728,
    "stop" : 1628814277728,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "paramiko.ssh_exception.NoValidConnectionsError: [Errno None] Unable to connect to port 8833 on 127.0.0.1",
  "statusTrace" : "get_configuration = {'access_point': [{'ip': '127.0.0.1', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP3', 'mode': 'wifi5', ...}], 'contro...hy4'], '2.4G-Station-Name': 'sta00', '5G-Radio': ['1.1.wiphy5'], '5G-Station-Name': 'sta10', ...}, 'name': 'lanforge'}}\nget_apnos = <class 'apnos.apnos.APNOS'>\nfixtures_ver = <fixtures_2x.Fixtures_2x object at 0x7f1f833d7bb0>\nadd_allure_environment_property = <function add_allure_environment_property.<locals>.maker at 0x7f1f833b1820>\n\n    @fixture(scope='session')\n    def add_env_properties(get_configuration, get_apnos, fixtures_ver, add_allure_environment_property: Callable) -> None:\n        add_allure_environment_property('Access-Point-Model', get_configuration[\"access_point\"][0][\"model\"])\n        add_allure_environment_property('Access-Point-Firmware-Version',\n>                                       fixtures_ver.get_ap_version(get_apnos, get_configuration)[0].split(\"\\n\")[1])\n\nconftest.py:640: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfixtures_2x.py:60: in get_ap_version\n    ap_ssh = get_apnos(access_point_info)\n../libs/apnos/apnos.py:39: in __init__\n    client = self.ssh_cli_connect()\n../libs/apnos/apnos.py:80: in ssh_cli_connect\n    client.connect(self.ip, username=self.username, password=self.password,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <paramiko.client.SSHClient object at 0x7f1f833d73a0>\nhostname = '127.0.0.1', port = 8833, username = 'lanforge'\npassword = 'pumpkin77', pkey = None, key_filename = None, timeout = 10\nallow_agent = False, look_for_keys = True, compress = False\nsock = <socket.socket fd=6, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('127.0.0.1', 40084)>\ngss_auth = False, gss_kex = False, gss_deleg_creds = True, gss_host = None\nbanner_timeout = 200, auth_timeout = None, gss_trust_dns = True\npassphrase = None, disabled_algorithms = None\n\n    def connect(\n        self,\n        hostname,\n        port=SSH_PORT,\n        username=None,\n        password=None,\n        pkey=None,\n        key_filename=None,\n        timeout=None,\n        allow_agent=True,\n        look_for_keys=True,\n        compress=False,\n        sock=None,\n        gss_auth=False,\n        gss_kex=False,\n        gss_deleg_creds=True,\n        gss_host=None,\n        banner_timeout=None,\n        auth_timeout=None,\n        gss_trust_dns=True,\n        passphrase=None,\n        disabled_algorithms=None,\n    ):\n        \"\"\"\n        Connect to an SSH server and authenticate to it.  The server's host key\n        is checked against the system host keys (see `load_system_host_keys`)\n        and any local host keys (`load_host_keys`).  If the server's hostname\n        is not found in either set of host keys, the missing host key policy\n        is used (see `set_missing_host_key_policy`).  The default policy is\n        to reject the key and raise an `.SSHException`.\n    \n        Authentication is attempted in the following order of priority:\n    \n            - The ``pkey`` or ``key_filename`` passed in (if any)\n    \n              - ``key_filename`` may contain OpenSSH public certificate paths\n                as well as regular private-key paths; when files ending in\n                ``-cert.pub`` are found, they are assumed to match a private\n                key, and both components will be loaded. (The private key\n                itself does *not* need to be listed in ``key_filename`` for\n                this to occur - *just* the certificate.)\n    \n            - Any key we can find through an SSH agent\n            - Any \"id_rsa\", \"id_dsa\" or \"id_ecdsa\" key discoverable in\n              ``~/.ssh/``\n    \n              - When OpenSSH-style public certificates exist that match an\n                existing such private key (so e.g. one has ``id_rsa`` and\n                ``id_rsa-cert.pub``) the certificate will be loaded alongside\n                the private key and used for authentication.\n    \n            - Plain username/password auth, if a password was given\n    \n        If a private key requires a password to unlock it, and a password is\n        passed in, that password will be used to attempt to unlock the key.\n    \n        :param str hostname: the server to connect to\n        :param int port: the server port to connect to\n        :param str username:\n            the username to authenticate as (defaults to the current local\n            username)\n        :param str password:\n            Used for password authentication; is also used for private key\n            decryption if ``passphrase`` is not given.\n        :param str passphrase:\n            Used for decrypting private keys.\n        :param .PKey pkey: an optional private key to use for authentication\n        :param str key_filename:\n            the filename, or list of filenames, of optional private key(s)\n            and/or certs to try for authentication\n        :param float timeout:\n            an optional timeout (in seconds) for the TCP connect\n        :param bool allow_agent:\n            set to False to disable connecting to the SSH agent\n        :param bool look_for_keys:\n            set to False to disable searching for discoverable private key\n            files in ``~/.ssh/``\n        :param bool compress: set to True to turn on compression\n        :param socket sock:\n            an open socket or socket-like object (such as a `.Channel`) to use\n            for communication to the target host\n        :param bool gss_auth:\n            ``True`` if you want to use GSS-API authentication\n        :param bool gss_kex:\n            Perform GSS-API Key Exchange and user authentication\n        :param bool gss_deleg_creds: Delegate GSS-API client credentials or not\n        :param str gss_host:\n            The targets name in the kerberos database. default: hostname\n        :param bool gss_trust_dns:\n            Indicates whether or not the DNS is trusted to securely\n            canonicalize the name of the host being connected to (default\n            ``True``).\n        :param float banner_timeout: an optional timeout (in seconds) to wait\n            for the SSH banner to be presented.\n        :param float auth_timeout: an optional timeout (in seconds) to wait for\n            an authentication response.\n        :param dict disabled_algorithms:\n            an optional dict passed directly to `.Transport` and its keyword\n            argument of the same name.\n    \n        :raises:\n            `.BadHostKeyException` -- if the server's host key could not be\n            verified\n        :raises: `.AuthenticationException` -- if authentication failed\n        :raises:\n            `.SSHException` -- if there was any other error connecting or\n            establishing an SSH session\n        :raises socket.error: if a socket error occurred while connecting\n    \n        .. versionchanged:: 1.15\n            Added the ``banner_timeout``, ``gss_auth``, ``gss_kex``,\n            ``gss_deleg_creds`` and ``gss_host`` arguments.\n        .. versionchanged:: 2.3\n            Added the ``gss_trust_dns`` argument.\n        .. versionchanged:: 2.4\n            Added the ``passphrase`` argument.\n        .. versionchanged:: 2.6\n            Added the ``disabled_algorithms`` argument.\n        \"\"\"\n        if not sock:\n            errors = {}\n            # Try multiple possible address families (e.g. IPv4 vs IPv6)\n            to_try = list(self._families_and_addresses(hostname, port))\n            for af, addr in to_try:\n                try:\n                    sock = socket.socket(af, socket.SOCK_STREAM)\n                    if timeout is not None:\n                        try:\n                            sock.settimeout(timeout)\n                        except:\n                            pass\n                    retry_on_signal(lambda: sock.connect(addr))\n                    # Break out of the loop on success\n                    break\n                except socket.error as e:\n                    # Raise anything that isn't a straight up connection error\n                    # (such as a resolution error)\n                    if e.errno not in (ECONNREFUSED, EHOSTUNREACH):\n                        raise\n                    # Capture anything else so we know how the run looks once\n                    # iteration is complete. Retain info about which attempt\n                    # this was.\n                    errors[addr] = e\n    \n            # Make sure we explode usefully if no address family attempts\n            # succeeded. We've no way of knowing which error is the \"right\"\n            # one, so we construct a hybrid exception containing all the real\n            # ones, of a subclass that client code should still be watching for\n            # (socket.error)\n            if len(errors) == len(to_try):\n>               raise NoValidConnectionsError(errors)\nE               paramiko.ssh_exception.NoValidConnectionsError: [Errno None] Unable to connect to port 8833 on 127.0.0.1\n\n/usr/local/lib/python3.8/site-packages/paramiko/client.py:368: NoValidConnectionsError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "fixtures_ver",
    "time" : {
      "start" : 1628814275110,
      "stop" : 1628814275215,
      "duration" : 105
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_influx",
    "time" : {
      "start" : 1628814275107,
      "stop" : 1628814275107,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_lanforge_data",
    "time" : {
      "start" : 1628814275107,
      "stop" : 1628814275107,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "exit_on_fail",
    "time" : {
      "start" : 1628814275109,
      "stop" : 1628814275109,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_apnos",
    "time" : {
      "start" : 1628814275110,
      "stop" : 1628814275110,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "lf_test",
    "time" : {
      "start" : 1628814275108,
      "stop" : 1628814275108,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testbed",
    "time" : {
      "start" : 1628814275106,
      "stop" : 1628814275106,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "add_allure_environment_property",
    "time" : {
      "start" : 1628814275105,
      "stop" : 1628814275106,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_configuration",
    "time" : {
      "start" : 1628814275106,
      "stop" : 1628814275106,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "update_report",
    "time" : {
      "start" : 1628814275108,
      "stop" : 1628814275108,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "test_cases",
    "time" : {
      "start" : 1628814275109,
      "stop" : 1628814275109,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "test_access_point",
    "time" : {
      "start" : 1628814275110,
      "stop" : 1628814275110,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "radius_info",
    "time" : {
      "start" : 1628814275109,
      "stop" : 1628814275109,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "station_names_twog",
    "time" : {
      "start" : 1628814275107,
      "stop" : 1628814275107,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "add_env_properties",
    "time" : {
      "start" : 1628814275215,
      "stop" : 1628814275215,
      "duration" : 0
    },
    "status" : "broken",
    "statusMessage" : "paramiko.ssh_exception.NoValidConnectionsError: [Errno None] Unable to connect to port 8833 on 127.0.0.1\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 1126, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 932, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/wlan-testing/tests/conftest.py\", line 640, in add_env_properties\n    fixtures_ver.get_ap_version(get_apnos, get_configuration)[0].split(\"\\n\")[1])\n  File \"/wlan-testing/tests/fixtures_2x.py\", line 60, in get_ap_version\n    ap_ssh = get_apnos(access_point_info)\n  File \"/wlan-testing/tests/../libs/apnos/apnos.py\", line 39, in __init__\n    client = self.ssh_cli_connect()\n  File \"/wlan-testing/tests/../libs/apnos/apnos.py\", line 80, in ssh_cli_connect\n    client.connect(self.ip, username=self.username, password=self.password,\n  File \"/usr/local/lib/python3.8/site-packages/paramiko/client.py\", line 368, in connect\n    raise NoValidConnectionsError(errors)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  } ],
  "afterStages" : [ {
    "name" : "fixtures_ver::0",
    "time" : {
      "start" : 1628814282087,
      "stop" : 1628814282087,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_influx::0",
    "time" : {
      "start" : 1628814282095,
      "stop" : 1628814282095,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_lanforge_data::0",
    "time" : {
      "start" : 1628814282096,
      "stop" : 1628814282096,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "exit_on_fail::0",
    "time" : {
      "start" : 1628814282119,
      "stop" : 1628814282119,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_apnos::0",
    "time" : {
      "start" : 1628814282092,
      "stop" : 1628814282092,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "lf_test::0",
    "time" : {
      "start" : 1628814282093,
      "stop" : 1628814282093,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testbed::0",
    "time" : {
      "start" : 1628814282112,
      "stop" : 1628814282113,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "add_allure_environment_property::0",
    "time" : {
      "start" : 1628814282114,
      "stop" : 1628814282114,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_configuration::0",
    "time" : {
      "start" : 1628814282107,
      "stop" : 1628814282107,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "update_report::0",
    "time" : {
      "start" : 1628814282092,
      "stop" : 1628814282092,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "test_cases::0",
    "time" : {
      "start" : 1628814282093,
      "stop" : 1628814282093,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "test_access_point::0",
    "time" : {
      "start" : 1628814282089,
      "stop" : 1628814282089,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "radius_info::0",
    "time" : {
      "start" : 1628814282120,
      "stop" : 1628814282120,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "station_names_twog::0",
    "time" : {
      "start" : 1628814282097,
      "stop" : 1628814282097,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "twog"
  }, {
    "name" : "tag",
    "value" : "client_connectivity"
  }, {
    "name" : "tag",
    "value" : "uc_sanity"
  }, {
    "name" : "tag",
    "value" : "enterprise"
  }, {
    "name" : "tag",
    "value" : "sanity_light"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('setup_profiles')"
  }, {
    "name" : "tag",
    "value" : "ucentral"
  }, {
    "name" : "tag",
    "value" : "sanity"
  }, {
    "name" : "tag",
    "value" : "ttls"
  }, {
    "name" : "tag",
    "value" : "wpa2_enterprise"
  }, {
    "name" : "tag",
    "value" : "nat"
  }, {
    "name" : "parentSuite",
    "value" : "e2e.basic.validation_of_operating_modes.nat_mode.client_connectivity"
  }, {
    "name" : "suite",
    "value" : "test_enterprise_ttls"
  }, {
    "name" : "subSuite",
    "value" : "TestNATModeEnterpriseTTLSSuiteOne"
  }, {
    "name" : "host",
    "value" : "testing-20-7t5wd"
  }, {
    "name" : "thread",
    "value" : "6-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "e2e.basic.validation_of_operating_modes.nat_mode.client_connectivity.test_enterprise_ttls"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "setup_profiles",
    "value" : "{'mode': 'NAT', 'ssid_modes': {'wpa_enterprise': [{'ssid_name': 'ssid_wpa_eap_2g', 'appliedRadios': ['2G']}, {'ssid_name': 'ssid_wpa_eap_5g', 'appliedRadios': ['5G']}], 'wpa2_enterprise': [{'ssid_name': 'ssid_wpa2_eap_2g', 'appliedRadios': ['2G']}, {'ssid_name': 'ssid_wpa2_eap_5g', 'appliedRadios': ['5G']}], 'wpa3_enterprise': [{'ssid_name': 'ssid_wpa3_eap_2g', 'appliedRadios': ['2G']}, {'ssid_name': 'ssid_wpa3_eap_5g', 'appliedRadios': ['5G']}]}, 'rf': {}, 'radius': True}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 5,
        "skipped" : 0,
        "passed" : 11,
        "unknown" : 0,
        "total" : 17
      },
      "items" : [ {
        "uid" : "5e650ed3ff2a4682",
        "status" : "broken",
        "statusDetails" : "KeyError: 'ifname'",
        "time" : {
          "start" : 1628728922617,
          "stop" : 1628728922617,
          "duration" : 0
        }
      }, {
        "uid" : "d125f5c54568235e",
        "status" : "passed",
        "time" : {
          "start" : 1628557989836,
          "stop" : 1628558060798,
          "duration" : 70962
        }
      }, {
        "uid" : "2188f32e6b4fa3fb",
        "status" : "passed",
        "time" : {
          "start" : 1628539362592,
          "stop" : 1628539433134,
          "duration" : 70542
        }
      }, {
        "uid" : "3760640d4dcbd8cb",
        "status" : "passed",
        "time" : {
          "start" : 1628511166006,
          "stop" : 1628511232893,
          "duration" : 66887
        }
      }, {
        "uid" : "9bf38bd21f2b3969",
        "status" : "passed",
        "time" : {
          "start" : 1628470122123,
          "stop" : 1628470187201,
          "duration" : 65078
        }
      }, {
        "uid" : "38eb807800c2fb59",
        "status" : "passed",
        "time" : {
          "start" : 1628429208166,
          "stop" : 1628429276959,
          "duration" : 68793
        }
      }, {
        "uid" : "eb682ad59b41e28f",
        "status" : "passed",
        "time" : {
          "start" : 1628297563910,
          "stop" : 1628297642061,
          "duration" : 78151
        }
      }, {
        "uid" : "11139f1ac5cda71b",
        "status" : "passed",
        "time" : {
          "start" : 1627866076987,
          "stop" : 1627866146530,
          "duration" : 69543
        }
      }, {
        "uid" : "41435052c61b1460",
        "status" : "passed",
        "time" : {
          "start" : 1627779505430,
          "stop" : 1627779571381,
          "duration" : 65951
        }
      }, {
        "uid" : "8e0db5190b7ccce",
        "status" : "passed",
        "time" : {
          "start" : 1627692673072,
          "stop" : 1627692737794,
          "duration" : 64722
        }
      }, {
        "uid" : "44f4c8d09b185fc8",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert False",
        "time" : {
          "start" : 1627606970625,
          "stop" : 1627607163523,
          "duration" : 192898
        }
      }, {
        "uid" : "dad342446bef8d88",
        "status" : "passed",
        "time" : {
          "start" : 1627519401193,
          "stop" : 1627519494117,
          "duration" : 92924
        }
      }, {
        "uid" : "6b186968bddb24",
        "status" : "passed",
        "time" : {
          "start" : 1627503436513,
          "stop" : 1627503522115,
          "duration" : 85602
        }
      }, {
        "uid" : "23d1f730a2601f1b",
        "status" : "broken",
        "statusDetails" : "TypeError: 'NoneType' object is not subscriptable",
        "time" : {
          "start" : 1627464729993,
          "stop" : 1627464819306,
          "duration" : 89313
        }
      }, {
        "uid" : "28b3119a1b57f846",
        "status" : "broken",
        "statusDetails" : "TypeError: 'bool' object is not iterable",
        "time" : {
          "start" : 1627433332702,
          "stop" : 1627433332702,
          "duration" : 0
        }
      }, {
        "uid" : "7391abe818f7c55a",
        "status" : "broken",
        "statusDetails" : "TypeError: 'bool' object does not support item assignment",
        "time" : {
          "start" : 1627410311750,
          "stop" : 1627410311750,
          "duration" : 0
        }
      } ]
    },
    "tags" : [ "ucentral", "nat", "@pytest.mark.usefixtures('setup_profiles')", "ttls", "wpa2_enterprise", "enterprise", "sanity", "client_connectivity", "sanity_light", "twog", "uc_sanity" ]
  },
  "source" : "d09bf1dd2d02ea70.json",
  "parameterValues" : [ "{'mode': 'NAT', 'ssid_modes': {'wpa_enterprise': [{'ssid_name': 'ssid_wpa_eap_2g', 'appliedRadios': ['2G']}, {'ssid_name': 'ssid_wpa_eap_5g', 'appliedRadios': ['5G']}], 'wpa2_enterprise': [{'ssid_name': 'ssid_wpa2_eap_2g', 'appliedRadios': ['2G']}, {'ssid_name': 'ssid_wpa2_eap_5g', 'appliedRadios': ['5G']}], 'wpa3_enterprise': [{'ssid_name': 'ssid_wpa3_eap_2g', 'appliedRadios': ['2G']}, {'ssid_name': 'ssid_wpa3_eap_5g', 'appliedRadios': ['5G']}]}, 'rf': {}, 'radius': True}" ]
}