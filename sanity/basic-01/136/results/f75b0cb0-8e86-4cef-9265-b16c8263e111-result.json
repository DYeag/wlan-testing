{"name": "test_wpa2_enterprise_2g[setup_profiles0]", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <tests.e2e.basic.validation_of_operating_modes.bridge_mode.client_connectivity.test_enterprise_ttls.TestBridgeModeEnterpriseTTLSSuiteA object at 0x7fbd340f36d0>\nget_vif_state = ['TipWlan-cloud-wifi', 'TipWlan-cloud-wifi', 'ssid_wpa2_eap_2g']\nstation_names_twog = ['wlan000']\nsetup_profiles = {'equipment_ap': True, 'radius_profile': True, 'vifc': False, 'vifs': True, ...}\nget_lanforge_data = {'lanforge-port-number': 8080, 'lanforge_2dot4g': '1.1.wiphy4', 'lanforge_2dot4g_prefix': 'wlan0', 'lanforge_2dot4g_station': 'wlan0', ...}\nlf_test = <lanforge.lf_tests.RunTest object at 0x7fbd3422e910>\nupdate_report = <testrails.reporting.Reporting object at 0x7fbd441d0d30>\ntest_cases = []\nradius_info = {'ip': '10.10.10.72', 'name': 'basic-01-Automation-Radius-Profile-BRIDGE', 'password': 'password', 'pk_password': 'whatever', ...}\nexit_on_fail = False\n\n    @pytest.mark.uc_sanity\n    @pytest.mark.sanity_light\n    @pytest.mark.wpa2_enterprise\n    @pytest.mark.twog\n    def test_wpa2_enterprise_2g(self, get_vif_state,\n                                station_names_twog, setup_profiles, get_lanforge_data, lf_test, update_report,\n                                test_cases, radius_info, exit_on_fail):\n        \"\"\" wpa enterprise 2g\n            pytest -m \"client_connectivity and bridge and enterprise and ttls and wpa2_enterprise and twog\"\n        \"\"\"\n        profile_data = setup_params_enterprise[\"ssid_modes\"][\"wpa2_enterprise\"][0]\n        ssid_name = profile_data[\"ssid_name\"]\n        security = \"wpa2\"\n        mode = \"BRIDGE\"\n        band = \"twog\"\n        vlan = 1\n        ttls_passwd = radius_info[\"password\"]\n        eap = \"TTLS\"\n        identity = radius_info['user']\n        get_vif_state.append(ssid_name)\n        if ssid_name not in get_vif_state:\n            allure.attach(name=\"retest,vif state ssid not available:\", body=str(get_vif_state))\n            pytest.xfail(\"SSID NOT AVAILABLE IN VIF STATE\")\n        passes = lf_test.EAP_Connect(ssid=ssid_name, security=security,\n                                     mode=mode, band=band,\n                                     eap=eap, ttls_passwd=ttls_passwd, identity=identity,\n                                     station_name=station_names_twog, vlan_id=vlan)\n>       assert passes\nE       assert False\n\ne2e/basic/validation_of_operating_modes/bridge_mode/client_connectivity/test_enterprise_ttls.py:123: AssertionError"}, "description": " wpa enterprise 2g\n            pytest -m \"client_connectivity and bridge and enterprise and ttls and wpa2_enterprise and twog\"\n        ", "attachments": [{"name": "wlan000", "source": "17884aab-c301-46bd-b30f-a0f30086ffc3-attachment.attach"}, {"name": "cx_data", "source": "b2b48190-9dcf-4576-83ac-f3eeb819547a-attachment.attach"}], "parameters": [{"name": "setup_profiles", "value": "{'mode': 'BRIDGE', 'ssid_modes': {'wpa_enterprise': [{'ssid_name': 'ssid_wpa_eap_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'basic-01-SSID-wpa_enterprise-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa_eap_5g', 'appliedRadios': ['is5GHz'], 'profile_name': 'basic-01-SSID-wpa_enterprise-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}], 'wpa2_enterprise': [{'ssid_name': 'ssid_wpa2_eap_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'basic-01-SSID-wpa2_enterprise-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa2_eap_5g', 'appliedRadios': ['is5GHz'], 'profile_name': 'basic-01-SSID-wpa2_enterprise-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}], 'wpa3_enterprise': [{'ssid_name': 'ssid_wpa3_eap_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'basic-01-SSID-wpa3_enterprise-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa3_eap_5g', 'appliedRadios': ['is5GHz'], 'profile_name': 'basic-01-SSID-wpa3_enterprise-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}]}, 'rf': {}, 'radius': True}"}], "start": 1630116940900, "stop": 1630117146014, "uuid": "ce919c43-8c30-4bde-8f19-65c5e93b1927", "historyId": "fc873d8cb388b06b57d14fb4954cae85", "testCaseId": "4e06dce07076d12907b5a67f51ad4750", "fullName": "e2e.basic.validation_of_operating_modes.bridge_mode.client_connectivity.test_enterprise_ttls.TestBridgeModeEnterpriseTTLSSuiteA#test_wpa2_enterprise_2g", "labels": [{"name": "suite", "value": "sanity"}, {"name": "subSuite", "value": "Bridge Mode EAP Client Connectivity : Suite-A"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "tag", "value": "ttls"}, {"name": "tag", "value": "wpa2_enterprise"}, {"name": "tag", "value": "client_connectivity"}, {"name": "tag", "value": "ucentral"}, {"name": "tag", "value": "sanity_light"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "suiteA"}, {"name": "tag", "value": "twog"}, {"name": "tag", "value": "bridge"}, {"name": "tag", "value": "enterprise"}, {"name": "tag", "value": "uc_sanity"}, {"name": "parentSuite", "value": "e2e.basic.validation_of_operating_modes.bridge_mode.client_connectivity"}, {"name": "host", "value": "testing-136-cj599"}, {"name": "thread", "value": "6-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.basic.validation_of_operating_modes.bridge_mode.client_connectivity.test_enterprise_ttls"}]}