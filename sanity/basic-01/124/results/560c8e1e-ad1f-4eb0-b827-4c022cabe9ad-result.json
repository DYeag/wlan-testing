{"name": "test_wpa_wpa2_enterprise_2g[setup_profiles0]", "status": "broken", "statusDetails": {"message": "http.client.RemoteDisconnected: Remote end closed connection without response", "trace": "self = <tests.e2e.basic.validation_of_operating_modes.vlan_mode.client_connectivity.test_enterprise_ttls.TestVLANModeEnterpriseTTLSSuiteTwo object at 0x7f93f02ae1c0>\nget_vif_state = ['ssid_wpa3_mixed_eap_2g', 'ssid_wpa3_mixed_eap_5g', 'ssid_wpa_wpa2_eap_2g', 'ssid_wpa_wpa2_eap_5g']\nstation_names_twog = ['wlan000']\nsetup_profiles = {'equipment_ap': True, 'radius_profile': True, 'vifc': True, 'vifs': True, ...}\nget_lanforge_data = {'lanforge-port-number': 8080, 'lanforge_2dot4g': '1.1.wiphy4', 'lanforge_2dot4g_prefix': 'wlan0', 'lanforge_2dot4g_station': 'wlan0', ...}\nlf_test = <lanforge.lf_tests.RunTest object at 0x7f9434404310>\nupdate_report = <testrails.reporting.Reporting object at 0x7f943647a340>\ntest_cases = []\nradius_info = {'ip': '10.10.10.72', 'name': 'basic-01-Automation-Radius-Profile-BRIDGE', 'password': 'password', 'pk_password': 'whatever', ...}\nexit_on_fail = False\n\n    @pytest.mark.wpa_wpa2_enterprise_mixed\n    @pytest.mark.twog\n    def test_wpa_wpa2_enterprise_2g(self, get_vif_state, station_names_twog, setup_profiles, get_lanforge_data, lf_test,\n                                    update_report,\n                                    test_cases, radius_info, exit_on_fail):\n        profile_data = setup_params_enterprise_two[\"ssid_modes\"][\"wpa_wpa2_enterprise_mixed\"][0]\n        ssid_name = profile_data[\"ssid_name\"]\n        security = \"wpa\"\n        extra_secu = [\"wpa2\"]\n        mode = \"VLAN\"\n        band = \"twog\"\n        vlan = 100\n        ttls_passwd = radius_info[\"password\"]\n        eap = \"TTLS\"\n        identity = radius_info['user']\n        if ssid_name not in get_vif_state:\n            allure.attach(name=\"retest,vif state ssid not available:\", body=str(get_vif_state))\n            pytest.xfail(\"SSID NOT AVAILABLE IN VIF STATE\")\n>       passes = lf_test.EAP_Connect(ssid=ssid_name, security=security, extra_securities=extra_secu,\n                                     mode=mode, band=band,\n                                     eap=eap, ttls_passwd=ttls_passwd, identity=identity,\n                                     station_name=station_names_twog, vlan_id=vlan)\n\ne2e/basic/validation_of_operating_modes/vlan_mode/client_connectivity/test_enterprise_ttls.py:230: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../libs/lanforge/lf_tests.py:187: in EAP_Connect\n    self.eap_connect.start(station_name, True, True)\n../lanforge/lanforge-scripts/py-scripts/test_ipv4_ttls.py:223: in start\n    sta_status = self.json_get(\"port/1/1/\" + sta_name + \"?fields=port,alias,ip,ap\", debug_=self.debug)\n../lanforge/lanforge-scripts/py-json/LANforge/lfcli_base.py:273: in json_get\n    json_response = lf_r.get_as_json(debug_=debug_, die_on_error_=False)\n../lanforge/lanforge-scripts/py-json/LANforge/LFRequest.py:310: in get_as_json\n    j = self.get(debug=debug_, die_on_error_=die_on_error_, method_=method_)\n../lanforge/lanforge-scripts/py-json/LANforge/LFRequest.py:268: in get\n    myresponses.append(request.urlopen(myrequest))\n/usr/local/lib/python3.8/urllib/request.py:222: in urlopen\n    return opener.open(url, data, timeout)\n/usr/local/lib/python3.8/urllib/request.py:525: in open\n    response = self._open(req, data)\n/usr/local/lib/python3.8/urllib/request.py:542: in _open\n    result = self._call_chain(self.handle_open, protocol, protocol +\n/usr/local/lib/python3.8/urllib/request.py:502: in _call_chain\n    result = func(*args)\n/usr/local/lib/python3.8/urllib/request.py:1383: in http_open\n    return self.do_open(http.client.HTTPConnection, req)\n/usr/local/lib/python3.8/urllib/request.py:1358: in do_open\n    r = h.getresponse()\n/usr/local/lib/python3.8/http/client.py:1348: in getresponse\n    response.begin()\n/usr/local/lib/python3.8/http/client.py:316: in begin\n    version, status, reason = self._read_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <http.client.HTTPResponse object at 0x7f9424132580>\n\n    def _read_status(self):\n        line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n        if len(line) > _MAXLINE:\n            raise LineTooLong(\"status line\")\n        if self.debuglevel > 0:\n            print(\"reply:\", repr(line))\n        if not line:\n            # Presumably, the server closed the connection before\n            # sending a valid response.\n>           raise RemoteDisconnected(\"Remote end closed connection without\"\n                                     \" response\")\nE           http.client.RemoteDisconnected: Remote end closed connection without response\n\n/usr/local/lib/python3.8/http/client.py:285: RemoteDisconnected"}, "parameters": [{"name": "setup_profiles", "value": "{'mode': 'VLAN', 'ssid_modes': {'wpa_wpa2_enterprise_mixed': [{'ssid_name': 'ssid_wpa_wpa2_eap_2g', 'appliedRadios': ['is2dot4GHz'], 'vlan': 100, 'profile_name': 'basic-01-SSID-wpa_wpa2_enterprise_mixed-0-VLAN', 'mode': 'BRIDGE'}, {'ssid_name': 'ssid_wpa_wpa2_eap_5g', 'appliedRadios': ['is5GHz'], 'vlan': 100, 'profile_name': 'basic-01-SSID-wpa_wpa2_enterprise_mixed-1-VLAN', 'mode': 'BRIDGE'}], 'wpa3_enterprise_mixed': [{'ssid_name': 'ssid_wpa3_mixed_eap_2g', 'appliedRadios': ['is2dot4GHz'], 'vlan': 100, 'profile_name': 'basic-01-SSID-wpa3_enterprise_mixed-0-VLAN', 'mode': 'BRIDGE'}, {'ssid_name': 'ssid_wpa3_mixed_eap_5g', 'appliedRadios': ['is5GHz'], 'vlan': 100, 'profile_name': 'basic-01-SSID-wpa3_enterprise_mixed-1-VLAN', 'mode': 'BRIDGE'}]}, 'rf': {}, 'radius': True}"}], "start": 1629124840708, "stop": 1629124945530, "uuid": "1a73a378-62d7-4f01-b1be-1db2a2e15acb", "historyId": "91f431ba3087d90935ea1171b2b715b9", "testCaseId": "a2c341ffdfd6a82afb23af6790bd4d74", "fullName": "e2e.basic.validation_of_operating_modes.vlan_mode.client_connectivity.test_enterprise_ttls.TestVLANModeEnterpriseTTLSSuiteTwo#test_wpa_wpa2_enterprise_2g", "labels": [{"name": "tag", "value": "ucentral"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "client_connectivity"}, {"name": "tag", "value": "twog"}, {"name": "tag", "value": "vlan"}, {"name": "tag", "value": "ttls"}, {"name": "tag", "value": "wpa_wpa2_enterprise_mixed"}, {"name": "tag", "value": "enterprise"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "parentSuite", "value": "e2e.basic.validation_of_operating_modes.vlan_mode.client_connectivity"}, {"name": "suite", "value": "test_enterprise_ttls"}, {"name": "subSuite", "value": "TestVLANModeEnterpriseTTLSSuiteTwo"}, {"name": "host", "value": "testing-124-l7s5m"}, {"name": "thread", "value": "6-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.basic.validation_of_operating_modes.vlan_mode.client_connectivity.test_enterprise_ttls"}]}