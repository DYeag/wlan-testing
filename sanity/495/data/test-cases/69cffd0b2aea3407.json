{
  "uid" : "69cffd0b2aea3407",
  "name" : "test_wpa2_personal_ssid_5g[setup_profiles0]",
  "fullName" : "e2e.basic.validation_of_operating_modes.nat_mode.client_connectivity.test_general_security_modes.TestNATModeConnectivitySuiteA#test_wpa2_personal_ssid_5g",
  "historyId" : "109ede2baf71034d150f832fcc8358c7",
  "time" : {
    "start" : 1623895069975,
    "stop" : 1623895150781,
    "duration" : 80806
  },
  "description" : "Client Connectivity wpa2_personal ssid 5G\n           pytest -m \"client_connectivity and bridge and general and wpa2_personal and fiveg\"\n        ",
  "descriptionHtml" : "<p>Client Connectivity wpa2_personal ssid 5G\npytest -m &quot;client_connectivity and bridge and general and wpa2_personal and fiveg&quot;</p>\n",
  "status" : "broken",
  "statusMessage" : "swagger_client.rest.ApiException: (502)\nReason: Bad Gateway\nHTTP response headers: HTTPHeaderDict({'Server': 'awselb/2.0', 'Date': 'Thu, 17 Jun 2021 01:59:10 GMT', 'Content-Type': 'text/html', 'Content-Length': '122', 'Connection': 'keep-alive'})\nHTTP response body: <html>\r\n<head><title>502 Bad Gateway</title></head>\r\n<body>\r\n<center><h1>502 Bad Gateway</h1></center>\r\n</body>\r\n</html>",
  "statusTrace" : "self = <allure_commons._allure.fixture object at 0x7ff3e01e4190>, args = ()\nkwargs = {}\n\n    def __call__(self, *args, **kwargs):\n        self.parameters = func_parameters(self._fixture_function, *args, **kwargs)\n    \n        with self:\n>           return self._fixture_function(*args, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/allure_commons/_allure.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ne2e/basic/conftest.py:592: in teardown_session\n    instantiate_profile.delete_profile_by_name(profile_name=profile_data['equipment_ap']['profile_name'])\n../libs/controller/controller.py:420: in delete_profile_by_name\n    all_profiles = self.profile_client.get_profiles_by_customer_id(customer_id=self.sdk_client.customer_id,\n/usr/local/lib/python3.8/site-packages/swagger_client/api/profile_api.py:527: in get_profiles_by_customer_id\n    (data) = self.get_profiles_by_customer_id_with_http_info(customer_id, pagination_context, **kwargs)  # noqa: E501\n/usr/local/lib/python3.8/site-packages/swagger_client/api/profile_api.py:603: in get_profiles_by_customer_id_with_http_info\n    return self.api_client.call_api(\n/usr/local/lib/python3.8/site-packages/swagger_client/api_client.py:316: in call_api\n    return self.__call_api(resource_path, method,\n/usr/local/lib/python3.8/site-packages/swagger_client/api_client.py:148: in __call_api\n    response_data = self.request(\n/usr/local/lib/python3.8/site-packages/swagger_client/api_client.py:338: in request\n    return self.rest_client.GET(url,\n/usr/local/lib/python3.8/site-packages/swagger_client/rest.py:233: in GET\n    return self.request(\"GET\", url,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <swagger_client.rest.RESTClientObject object at 0x7ff3e02fd1c0>\nmethod = 'GET'\nurl = 'https://wlan-portal-svc-nola-ext-04.cicd.lab.wlan.tip.build/portal/profile/forCustomer'\nquery_params = [('customerId', 2), ('paginationContext', '{\\n                                                \"model_type\": \"Paginatio...\\n                                                \"maxItemsPerPage\": 5000\\n                                        }')]\nheaders = {'Accept': 'application/json', 'Authorization': 'Bearer eyJpc3MiOiJ0aXAiLCJqdGkiOiJmYzk5OGFjYy01NTU2LTQ4NDMtOTEwNy01Mm...g.VSfjyahqQMd1DtQaOGpuzJWpHYzLpcc30', 'Content-Type': 'application/json', 'User-Agent': 'Swagger-Codegen/1.0.0/python'}\nbody = None, post_params = {}, _preload_content = True, _request_timeout = None\n\n    def request(self, method, url, query_params=None, headers=None,\n                body=None, post_params=None, _preload_content=True,\n                _request_timeout=None):\n        \"\"\"Perform requests.\n    \n        :param method: http request method\n        :param url: http request url\n        :param query_params: query parameters in the url\n        :param headers: http request headers\n        :param body: request json body, for `application/json`\n        :param post_params: request post parameters,\n                            `application/x-www-form-urlencoded`\n                            and `multipart/form-data`\n        :param _preload_content: if False, the urllib3.HTTPResponse object will\n                                 be returned without reading/decoding response\n                                 data. Default is True.\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        \"\"\"\n        method = method.upper()\n        assert method in ['GET', 'HEAD', 'DELETE', 'POST', 'PUT',\n                          'PATCH', 'OPTIONS']\n    \n        if post_params and body:\n            raise ValueError(\n                \"body parameter cannot be used with post_params parameter.\"\n            )\n    \n        post_params = post_params or {}\n        headers = headers or {}\n    \n        timeout = None\n        if _request_timeout:\n            if isinstance(_request_timeout, (int, ) if six.PY3 else (int, long)):  # noqa: E501,F821\n                timeout = urllib3.Timeout(total=_request_timeout)\n            elif (isinstance(_request_timeout, tuple) and\n                  len(_request_timeout) == 2):\n                timeout = urllib3.Timeout(\n                    connect=_request_timeout[0], read=_request_timeout[1])\n    \n        if 'Content-Type' not in headers:\n            headers['Content-Type'] = 'application/json'\n    \n        try:\n            # For `POST`, `PUT`, `PATCH`, `OPTIONS`, `DELETE`\n            if method in ['POST', 'PUT', 'PATCH', 'OPTIONS', 'DELETE']:\n                if query_params:\n                    url += '?' + urlencode(query_params)\n                if re.search('json', headers['Content-Type'], re.IGNORECASE):\n                    request_body = '{}'\n                    if body is not None:\n                        request_body = json.dumps(body)\n                    r = self.pool_manager.request(\n                        method, url,\n                        body=request_body,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                elif headers['Content-Type'] == 'application/x-www-form-urlencoded':  # noqa: E501\n                    r = self.pool_manager.request(\n                        method, url,\n                        fields=post_params,\n                        encode_multipart=False,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                elif headers['Content-Type'] == 'multipart/form-data':\n                    # must del headers['Content-Type'], or the correct\n                    # Content-Type which generated by urllib3 will be\n                    # overwritten.\n                    del headers['Content-Type']\n                    r = self.pool_manager.request(\n                        method, url,\n                        fields=post_params,\n                        encode_multipart=True,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                # Pass a `string` parameter directly in the body to support\n                # other content types than Json when `body` argument is\n                # provided in serialized form\n                elif isinstance(body, str):\n                    request_body = body\n                    r = self.pool_manager.request(\n                        method, url,\n                        body=request_body,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                else:\n                    # Cannot generate the request from given parameters\n                    msg = \"\"\"Cannot prepare a request message for provided\n                             arguments. Please check that your arguments match\n                             declared content type.\"\"\"\n                    raise ApiException(status=0, reason=msg)\n            # For `GET`, `HEAD`\n            else:\n                r = self.pool_manager.request(method, url,\n                                              fields=query_params,\n                                              preload_content=_preload_content,\n                                              timeout=timeout,\n                                              headers=headers)\n        except urllib3.exceptions.SSLError as e:\n            msg = \"{0}\\n{1}\".format(type(e).__name__, str(e))\n            raise ApiException(status=0, reason=msg)\n    \n        if _preload_content:\n            r = RESTResponse(r)\n    \n            # In the python 3, the response.data is bytes.\n            # we need to decode it to string.\n            if six.PY3:\n                r.data = r.data.decode('utf8')\n    \n            # log response body\n            logger.debug(\"response body: %s\", r.data)\n    \n        if not 200 <= r.status <= 299:\n>           raise ApiException(http_resp=r)\nE           swagger_client.rest.ApiException: (502)\nE           Reason: Bad Gateway\nE           HTTP response headers: HTTPHeaderDict({'Server': 'awselb/2.0', 'Date': 'Thu, 17 Jun 2021 01:59:10 GMT', 'Content-Type': 'text/html', 'Content-Length': '122', 'Connection': 'keep-alive'})\nE           HTTP response body: <html>\r\nE           <head><title>502 Bad Gateway</title></head>\r\nE           <body>\r\nE           <center><h1>502 Bad Gateway</h1></center>\r\nE           </body>\r\nE           </html>\n\n/usr/local/lib/python3.8/site-packages/swagger_client/rest.py:227: ApiException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "should_upgrade_firmware",
    "time" : {
      "start" : 1623889824360,
      "stop" : 1623889824360,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "lf_tools",
    "time" : {
      "start" : 1623889832941,
      "stop" : 1623889833253,
      "duration" : 312
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_latest_firmware",
    "time" : {
      "start" : 1623889824359,
      "stop" : 1623889824360,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "station_names_fiveg",
    "time" : {
      "start" : 1623893264017,
      "stop" : 1623893264017,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_markers",
    "time" : {
      "start" : 1623889832939,
      "stop" : 1623889832940,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "ce3d6cd287084dab",
      "name" : "Test Cases Requires: ",
      "source" : "ce3d6cd287084dab.attach",
      "type" : "text/plain",
      "size" : 335
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_lanforge_data",
    "time" : {
      "start" : 1623893039252,
      "stop" : 1623893039252,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_firmware",
    "time" : {
      "start" : 1623889823824,
      "stop" : 1623889823824,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_configuration",
    "time" : {
      "start" : 1623889822240,
      "stop" : 1623889822240,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "848bee5b2bf6123a",
      "name" : "Testbed Selected: ",
      "source" : "848bee5b2bf6123a.attach",
      "type" : "text/plain",
      "size" : 8
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "should_upload_firmware",
    "time" : {
      "start" : 1623889824360,
      "stop" : 1623889824360,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_test_run",
    "time" : {
      "start" : 1623889824360,
      "stop" : 1623889827085,
      "duration" : 2725
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "ef7622547283f470",
      "name" : "APNOS LIbrary: ",
      "source" : "ef7622547283f470.attach",
      "type" : "text/plain",
      "size" : 313
    }, {
      "uid" : "271a3b6228264cdc",
      "name" : "openwrt_ctl Setup",
      "source" : "271a3b6228264cdc.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "cb8c850bce5fddb7",
      "name" : "get_active_firmware ",
      "source" : "cb8c850bce5fddb7.attach",
      "type" : "text/plain",
      "size" : 33
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "update_report",
    "time" : {
      "start" : 1623889827086,
      "stop" : 1623889827086,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_security_flags",
    "time" : {
      "start" : 1623889832939,
      "stop" : 1623889832939,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "check_ap_firmware_cloud",
    "time" : {
      "start" : 1623889824282,
      "stop" : 1623889824359,
      "duration" : 77
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_vlan",
    "time" : {
      "start" : 1623889832938,
      "stop" : 1623889832938,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "a7ac2153c71ff6ed",
      "name" : "VLAN Created: ",
      "source" : "a7ac2153c71ff6ed.attach",
      "type" : "text/plain",
      "size" : 5
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "instantiate_profile",
    "time" : {
      "start" : 1623889832939,
      "stop" : 1623889832939,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_access_point",
    "time" : {
      "start" : 1623889822240,
      "stop" : 1623889823724,
      "duration" : 1484
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "a42ab2d97fbe2ae2",
      "name" : "added openwrtctl.py to :",
      "source" : "a42ab2d97fbe2ae2.attach",
      "type" : "text/plain",
      "size" : 14
    }, {
      "uid" : "247b3b16fc6d13ac",
      "name" : "APNOS LIbrary: ",
      "source" : "247b3b16fc6d13ac.attach",
      "type" : "text/plain",
      "size" : 313
    }, {
      "uid" : "b1d1a12d1eacc690",
      "name" : "openwrt_ctl Setup",
      "source" : "b1d1a12d1eacc690.attach",
      "type" : "text/plain",
      "size" : 9
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "testbed",
    "time" : {
      "start" : 1623889822239,
      "stop" : 1623889822240,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "bd21ab13a5dbc968",
      "name" : "Testbed Selected : ",
      "source" : "bd21ab13a5dbc968.attach",
      "type" : "text/plain",
      "size" : 8
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "lf_test",
    "time" : {
      "start" : 1623893039253,
      "stop" : 1623893039253,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "create_lanforge_chamberview_dut",
    "time" : {
      "start" : 1623889833253,
      "stop" : 1623889836211,
      "duration" : 2958
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_influx",
    "time" : {
      "start" : 1623893039252,
      "stop" : 1623893039253,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_equipment_id",
    "time" : {
      "start" : 1623889823824,
      "stop" : 1623889824282,
      "duration" : 458
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_controller",
    "time" : {
      "start" : 1623889823724,
      "stop" : 1623889823824,
      "duration" : 100
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "92bc4947c5378627",
      "name" : "Controller Instantiated: ",
      "source" : "92bc4947c5378627.attach",
      "type" : "text/plain",
      "size" : 186
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_apnos",
    "time" : {
      "start" : 1623889822240,
      "stop" : 1623889822240,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_profiles",
    "time" : {
      "start" : 1623894587463,
      "stop" : 1623894624056,
      "duration" : 36593
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "ab8b19d5d731678f",
      "name" : "RF Profile Created : wifi6",
      "source" : "ab8b19d5d731678f.attach",
      "type" : "text/plain",
      "size" : 41
    }, {
      "uid" : "faa2c2244a5e6e0b",
      "name" : "SSID Profile Created",
      "source" : "faa2c2244a5e6e0b.attach",
      "type" : "text/plain",
      "size" : 2807
    }, {
      "uid" : "63b36a79b13660d6",
      "name" : "SSID Profile Created",
      "source" : "63b36a79b13660d6.attach",
      "type" : "text/plain",
      "size" : 2825
    }, {
      "uid" : "d45e07676b8ff1f6",
      "name" : "SSID Profile Created",
      "source" : "d45e07676b8ff1f6.attach",
      "type" : "text/plain",
      "size" : 2800
    }, {
      "uid" : "5884c659abd7b3e7",
      "name" : "SSID Profile Created",
      "source" : "5884c659abd7b3e7.attach",
      "type" : "text/plain",
      "size" : 2818
    }, {
      "uid" : "171474a744df46d",
      "name" : "SSID Profile Created",
      "source" : "171474a744df46d.attach",
      "type" : "text/plain",
      "size" : 2816
    }, {
      "uid" : "da51a84b2615f501",
      "name" : "SSID Profile Created",
      "source" : "da51a84b2615f501.attach",
      "type" : "text/plain",
      "size" : 2834
    }, {
      "uid" : "d7ee22ef09f7dcb3",
      "name" : "Equipment AP Profile Created",
      "source" : "d7ee22ef09f7dcb3.attach",
      "type" : "text/plain",
      "size" : 45
    }, {
      "uid" : "f58421b4f704c925",
      "name" : "APNOS LIbrary: ",
      "source" : "f58421b4f704c925.attach",
      "type" : "text/plain",
      "size" : 313
    }, {
      "uid" : "a66a9f56bd43853a",
      "name" : "openwrt_ctl Setup",
      "source" : "a66a9f56bd43853a.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "cb23be8bc0f2e21c",
      "name" : "vif config Output Msg: ",
      "source" : "cb23be8bc0f2e21c.attach",
      "type" : "text/plain",
      "size" : 63
    }, {
      "uid" : "747a270a9395a042",
      "name" : "vif config Err Msg: ",
      "source" : "747a270a9395a042.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "2ce5d65b325b35a7",
      "name" : "get_vif_config_ssids ",
      "source" : "2ce5d65b325b35a7.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "c774e96a3544133b",
      "name" : "vif config Output Msg: ",
      "source" : "c774e96a3544133b.attach",
      "type" : "text/plain",
      "size" : 10094
    }, {
      "uid" : "f082fb57fc34de54",
      "name" : "vif config Err Msg: ",
      "source" : "f082fb57fc34de54.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "86c8270431cc865c",
      "name" : "get_vif_config_ssids ",
      "source" : "86c8270431cc865c.attach",
      "type" : "text/plain",
      "size" : 94
    }, {
      "uid" : "5beb1b9b1cc6fbf2",
      "name" : "SSID Profiles in VIF Config and Controller: ",
      "source" : "5beb1b9b1cc6fbf2.attach",
      "type" : "text/plain",
      "size" : 230
    }, {
      "uid" : "1ad473bcc21091ac",
      "name" : "APNOS LIbrary: ",
      "source" : "1ad473bcc21091ac.attach",
      "type" : "text/plain",
      "size" : 313
    }, {
      "uid" : "ea4a903b2d8473",
      "name" : "openwrt_ctl Setup",
      "source" : "ea4a903b2d8473.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "8d92a78142507549",
      "name" : "vif state Output Msg: ",
      "source" : "8d92a78142507549.attach",
      "type" : "text/plain",
      "size" : 11364
    }, {
      "uid" : "c585b2d6c6e8e7b0",
      "name" : "vif state Err Msg: ",
      "source" : "c585b2d6c6e8e7b0.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "3695280b82a306a",
      "name" : "get_vif_state_ssids ",
      "source" : "3695280b82a306a.attach",
      "type" : "text/plain",
      "size" : 94
    }, {
      "uid" : "8b898ca04dc8a097",
      "name" : "vif config Output Msg: ",
      "source" : "8b898ca04dc8a097.attach",
      "type" : "text/plain",
      "size" : 10094
    }, {
      "uid" : "1659fd6f7a18d82b",
      "name" : "vif config Err Msg: ",
      "source" : "1659fd6f7a18d82b.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "b03419f544e95a2a",
      "name" : "get_vif_config_ssids ",
      "source" : "b03419f544e95a2a.attach",
      "type" : "text/plain",
      "size" : 94
    }, {
      "uid" : "f571dd4b4a789040",
      "name" : "SSID Profiles in VIF Config and VIF State: ",
      "source" : "f571dd4b4a789040.attach",
      "type" : "text/plain",
      "size" : 212
    }, {
      "uid" : "f750666752430aaa",
      "name" : "vif state Output Msg: ",
      "source" : "f750666752430aaa.attach",
      "type" : "text/plain",
      "size" : 11364
    }, {
      "uid" : "dde6d9a8eb90edb",
      "name" : "vif state Err Msg: ",
      "source" : "dde6d9a8eb90edb.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "f771f9cfc3cb2615",
      "name" : "SSID DATA IN LF DUT",
      "source" : "f771f9cfc3cb2615.attach",
      "type" : "text/plain",
      "size" : 442
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 29,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "upgrade_firmware",
    "time" : {
      "start" : 1623889824360,
      "stop" : 1623889824360,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_vif_state",
    "time" : {
      "start" : 1623894624056,
      "stop" : 1623894627779,
      "duration" : 3723
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "ea739167e9736028",
      "name" : "APNOS LIbrary: ",
      "source" : "ea739167e9736028.attach",
      "type" : "text/plain",
      "size" : 313
    }, {
      "uid" : "ac9ae3d63c83da40",
      "name" : "openwrt_ctl Setup",
      "source" : "ac9ae3d63c83da40.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "bd696fc71662091d",
      "name" : "vif state Output Msg: ",
      "source" : "bd696fc71662091d.attach",
      "type" : "text/plain",
      "size" : 11364
    }, {
      "uid" : "ba20efd552065c4a",
      "name" : "vif state Err Msg: ",
      "source" : "ba20efd552065c4a.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "e55c686d9705a356",
      "name" : "get_vif_state_ssids ",
      "source" : "e55c686d9705a356.attach",
      "type" : "text/plain",
      "size" : 94
    }, {
      "uid" : "cc0e6b83c3dfec89",
      "name" : "vif_state",
      "source" : "cc0e6b83c3dfec89.attach",
      "type" : "text/plain",
      "size" : 94
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 6,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "test_cases",
    "time" : {
      "start" : 1623889827086,
      "stop" : 1623889827086,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "radius_info",
    "time" : {
      "start" : 1623889836211,
      "stop" : 1623889836211,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "f2d632b45b5a911b",
      "name" : "Radius server Info: ",
      "source" : "f2d632b45b5a911b.attach",
      "type" : "text/plain",
      "size" : 126
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "testStage" : {
    "description" : "Client Connectivity wpa2_personal ssid 5G\n           pytest -m \"client_connectivity and bridge and general and wpa2_personal and fiveg\"\n        ",
    "status" : "broken",
    "statusMessage" : "swagger_client.rest.ApiException: (502)\nReason: Bad Gateway\nHTTP response headers: HTTPHeaderDict({'Server': 'awselb/2.0', 'Date': 'Thu, 17 Jun 2021 01:59:10 GMT', 'Content-Type': 'text/html', 'Content-Length': '122', 'Connection': 'keep-alive'})\nHTTP response body: <html>\r\n<head><title>502 Bad Gateway</title></head>\r\n<body>\r\n<center><h1>502 Bad Gateway</h1></center>\r\n</body>\r\n</html>",
    "statusTrace" : "self = <allure_commons._allure.fixture object at 0x7ff3e01e4190>, args = ()\nkwargs = {}\n\n    def __call__(self, *args, **kwargs):\n        self.parameters = func_parameters(self._fixture_function, *args, **kwargs)\n    \n        with self:\n>           return self._fixture_function(*args, **kwargs)\n\n/usr/local/lib/python3.8/site-packages/allure_commons/_allure.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ne2e/basic/conftest.py:592: in teardown_session\n    instantiate_profile.delete_profile_by_name(profile_name=profile_data['equipment_ap']['profile_name'])\n../libs/controller/controller.py:420: in delete_profile_by_name\n    all_profiles = self.profile_client.get_profiles_by_customer_id(customer_id=self.sdk_client.customer_id,\n/usr/local/lib/python3.8/site-packages/swagger_client/api/profile_api.py:527: in get_profiles_by_customer_id\n    (data) = self.get_profiles_by_customer_id_with_http_info(customer_id, pagination_context, **kwargs)  # noqa: E501\n/usr/local/lib/python3.8/site-packages/swagger_client/api/profile_api.py:603: in get_profiles_by_customer_id_with_http_info\n    return self.api_client.call_api(\n/usr/local/lib/python3.8/site-packages/swagger_client/api_client.py:316: in call_api\n    return self.__call_api(resource_path, method,\n/usr/local/lib/python3.8/site-packages/swagger_client/api_client.py:148: in __call_api\n    response_data = self.request(\n/usr/local/lib/python3.8/site-packages/swagger_client/api_client.py:338: in request\n    return self.rest_client.GET(url,\n/usr/local/lib/python3.8/site-packages/swagger_client/rest.py:233: in GET\n    return self.request(\"GET\", url,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <swagger_client.rest.RESTClientObject object at 0x7ff3e02fd1c0>\nmethod = 'GET'\nurl = 'https://wlan-portal-svc-nola-ext-04.cicd.lab.wlan.tip.build/portal/profile/forCustomer'\nquery_params = [('customerId', 2), ('paginationContext', '{\\n                                                \"model_type\": \"Paginatio...\\n                                                \"maxItemsPerPage\": 5000\\n                                        }')]\nheaders = {'Accept': 'application/json', 'Authorization': 'Bearer eyJpc3MiOiJ0aXAiLCJqdGkiOiJmYzk5OGFjYy01NTU2LTQ4NDMtOTEwNy01Mm...g.VSfjyahqQMd1DtQaOGpuzJWpHYzLpcc30', 'Content-Type': 'application/json', 'User-Agent': 'Swagger-Codegen/1.0.0/python'}\nbody = None, post_params = {}, _preload_content = True, _request_timeout = None\n\n    def request(self, method, url, query_params=None, headers=None,\n                body=None, post_params=None, _preload_content=True,\n                _request_timeout=None):\n        \"\"\"Perform requests.\n    \n        :param method: http request method\n        :param url: http request url\n        :param query_params: query parameters in the url\n        :param headers: http request headers\n        :param body: request json body, for `application/json`\n        :param post_params: request post parameters,\n                            `application/x-www-form-urlencoded`\n                            and `multipart/form-data`\n        :param _preload_content: if False, the urllib3.HTTPResponse object will\n                                 be returned without reading/decoding response\n                                 data. Default is True.\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        \"\"\"\n        method = method.upper()\n        assert method in ['GET', 'HEAD', 'DELETE', 'POST', 'PUT',\n                          'PATCH', 'OPTIONS']\n    \n        if post_params and body:\n            raise ValueError(\n                \"body parameter cannot be used with post_params parameter.\"\n            )\n    \n        post_params = post_params or {}\n        headers = headers or {}\n    \n        timeout = None\n        if _request_timeout:\n            if isinstance(_request_timeout, (int, ) if six.PY3 else (int, long)):  # noqa: E501,F821\n                timeout = urllib3.Timeout(total=_request_timeout)\n            elif (isinstance(_request_timeout, tuple) and\n                  len(_request_timeout) == 2):\n                timeout = urllib3.Timeout(\n                    connect=_request_timeout[0], read=_request_timeout[1])\n    \n        if 'Content-Type' not in headers:\n            headers['Content-Type'] = 'application/json'\n    \n        try:\n            # For `POST`, `PUT`, `PATCH`, `OPTIONS`, `DELETE`\n            if method in ['POST', 'PUT', 'PATCH', 'OPTIONS', 'DELETE']:\n                if query_params:\n                    url += '?' + urlencode(query_params)\n                if re.search('json', headers['Content-Type'], re.IGNORECASE):\n                    request_body = '{}'\n                    if body is not None:\n                        request_body = json.dumps(body)\n                    r = self.pool_manager.request(\n                        method, url,\n                        body=request_body,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                elif headers['Content-Type'] == 'application/x-www-form-urlencoded':  # noqa: E501\n                    r = self.pool_manager.request(\n                        method, url,\n                        fields=post_params,\n                        encode_multipart=False,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                elif headers['Content-Type'] == 'multipart/form-data':\n                    # must del headers['Content-Type'], or the correct\n                    # Content-Type which generated by urllib3 will be\n                    # overwritten.\n                    del headers['Content-Type']\n                    r = self.pool_manager.request(\n                        method, url,\n                        fields=post_params,\n                        encode_multipart=True,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                # Pass a `string` parameter directly in the body to support\n                # other content types than Json when `body` argument is\n                # provided in serialized form\n                elif isinstance(body, str):\n                    request_body = body\n                    r = self.pool_manager.request(\n                        method, url,\n                        body=request_body,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                else:\n                    # Cannot generate the request from given parameters\n                    msg = \"\"\"Cannot prepare a request message for provided\n                             arguments. Please check that your arguments match\n                             declared content type.\"\"\"\n                    raise ApiException(status=0, reason=msg)\n            # For `GET`, `HEAD`\n            else:\n                r = self.pool_manager.request(method, url,\n                                              fields=query_params,\n                                              preload_content=_preload_content,\n                                              timeout=timeout,\n                                              headers=headers)\n        except urllib3.exceptions.SSLError as e:\n            msg = \"{0}\\n{1}\".format(type(e).__name__, str(e))\n            raise ApiException(status=0, reason=msg)\n    \n        if _preload_content:\n            r = RESTResponse(r)\n    \n            # In the python 3, the response.data is bytes.\n            # we need to decode it to string.\n            if six.PY3:\n                r.data = r.data.decode('utf8')\n    \n            # log response body\n            logger.debug(\"response body: %s\", r.data)\n    \n        if not 200 <= r.status <= 299:\n>           raise ApiException(http_resp=r)\nE           swagger_client.rest.ApiException: (502)\nE           Reason: Bad Gateway\nE           HTTP response headers: HTTPHeaderDict({'Server': 'awselb/2.0', 'Date': 'Thu, 17 Jun 2021 01:59:10 GMT', 'Content-Type': 'text/html', 'Content-Length': '122', 'Connection': 'keep-alive'})\nE           HTTP response body: <html>\r\nE           <head><title>502 Bad Gateway</title></head>\r\nE           <body>\r\nE           <center><h1>502 Bad Gateway</h1></center>\r\nE           </body>\r\nE           </html>\n\n/usr/local/lib/python3.8/site-packages/swagger_client/rest.py:227: ApiException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "dead5ffac5eae44b",
      "name" : "5G WPA2 Client Connectivity Passed successfully - bridge modeTrue",
      "source" : "dead5ffac5eae44b.attach",
      "type" : "application/octet-stream",
      "size" : 0
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "should_upgrade_firmware::0",
    "time" : {
      "start" : 1623895174965,
      "stop" : 1623895174965,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "lf_tools::0",
    "time" : {
      "start" : 1623895174900,
      "stop" : 1623895174900,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_latest_firmware::0",
    "time" : {
      "start" : 1623895174978,
      "stop" : 1623895174978,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "station_names_fiveg::0",
    "time" : {
      "start" : 1623895174945,
      "stop" : 1623895174945,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_markers::0",
    "time" : {
      "start" : 1623895174907,
      "stop" : 1623895174907,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_lanforge_data::0",
    "time" : {
      "start" : 1623895174945,
      "stop" : 1623895174945,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_firmware::0",
    "time" : {
      "start" : 1623895175027,
      "stop" : 1623895175027,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_configuration::0",
    "time" : {
      "start" : 1623895175898,
      "stop" : 1623895175898,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upload_firmware::0",
    "time" : {
      "start" : 1623895174958,
      "stop" : 1623895174958,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_test_run::0",
    "time" : {
      "start" : 1623895174946,
      "stop" : 1623895174946,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "update_report::0",
    "time" : {
      "start" : 1623895174941,
      "stop" : 1623895174941,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_security_flags::0",
    "time" : {
      "start" : 1623895174928,
      "stop" : 1623895174928,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "check_ap_firmware_cloud::0",
    "time" : {
      "start" : 1623895174986,
      "stop" : 1623895174986,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_vlan::0",
    "time" : {
      "start" : 1623895174940,
      "stop" : 1623895174940,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_profile::0",
    "time" : {
      "start" : 1623895174934,
      "stop" : 1623895174934,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_access_point::0",
    "time" : {
      "start" : 1623895175228,
      "stop" : 1623895175228,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testbed::0",
    "time" : {
      "start" : 1623895175937,
      "stop" : 1623895175937,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "lf_test::0",
    "time" : {
      "start" : 1623895174942,
      "stop" : 1623895174942,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_influx::0",
    "time" : {
      "start" : 1623895174944,
      "stop" : 1623895174944,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_equipment_id::0",
    "time" : {
      "start" : 1623895175012,
      "stop" : 1623895175012,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_controller::1",
    "time" : {
      "start" : 1623895175152,
      "stop" : 1623895175152,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_controller::teardown_controller",
    "time" : {
      "start" : 1623895175153,
      "stop" : 1623895175192,
      "duration" : 39
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "f8eb74a68d20f62b",
      "name" : "Controller Teardown: ",
      "source" : "f8eb74a68d20f62b.attach",
      "type" : "text/plain",
      "size" : 186
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_apnos::0",
    "time" : {
      "start" : 1623895175803,
      "stop" : 1623895175803,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_profiles::1",
    "time" : {
      "start" : 1623895150782,
      "stop" : 1623895150782,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_profiles::teardown_session",
    "time" : {
      "start" : 1623895150782,
      "stop" : 1623895150809,
      "duration" : 27
    },
    "status" : "broken",
    "statusMessage" : "swagger_client.rest.ApiException: (502)\nReason: Bad Gateway\nHTTP response headers: HTTPHeaderDict({'Server': 'awselb/2.0', 'Date': 'Thu, 17 Jun 2021 01:59:10 GMT', 'Content-Type': 'text/html', 'Content-Length': '122', 'Connection': 'keep-alive'})\nHTTP response body: <html>\r\n<head><title>502 Bad Gateway</title></head>\r\n<body>\r\n<center><h1>502 Bad Gateway</h1></center>\r\n</body>\r\n</html>\r\n\n\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.8/site-packages/allure_commons/_allure.py\", line 200, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"/wlan-testing/tests/e2e/basic/conftest.py\", line 592, in teardown_session\n    instantiate_profile.delete_profile_by_name(profile_name=profile_data['equipment_ap']['profile_name'])\n  File \"/wlan-testing/tests/../libs/controller/controller.py\", line 420, in delete_profile_by_name\n    all_profiles = self.profile_client.get_profiles_by_customer_id(customer_id=self.sdk_client.customer_id,\n  File \"/usr/local/lib/python3.8/site-packages/swagger_client/api/profile_api.py\", line 527, in get_profiles_by_customer_id\n    (data) = self.get_profiles_by_customer_id_with_http_info(customer_id, pagination_context, **kwargs)  # noqa: E501\n  File \"/usr/local/lib/python3.8/site-packages/swagger_client/api/profile_api.py\", line 603, in get_profiles_by_customer_id_with_http_info\n    return self.api_client.call_api(\n  File \"/usr/local/lib/python3.8/site-packages/swagger_client/api_client.py\", line 316, in call_api\n    return self.__call_api(resource_path, method,\n  File \"/usr/local/lib/python3.8/site-packages/swagger_client/api_client.py\", line 148, in __call_api\n    response_data = self.request(\n  File \"/usr/local/lib/python3.8/site-packages/swagger_client/api_client.py\", line 338, in request\n    return self.rest_client.GET(url,\n  File \"/usr/local/lib/python3.8/site-packages/swagger_client/rest.py\", line 233, in GET\n    return self.request(\"GET\", url,\n  File \"/usr/local/lib/python3.8/site-packages/swagger_client/rest.py\", line 227, in request\n    raise ApiException(http_resp=r)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "upgrade_firmware::0",
    "time" : {
      "start" : 1623895174951,
      "stop" : 1623895174951,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_vif_state::0",
    "time" : {
      "start" : 1623895150782,
      "stop" : 1623895150782,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "test_cases::0",
    "time" : {
      "start" : 1623895174942,
      "stop" : 1623895174942,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "radius_info::0",
    "time" : {
      "start" : 1623895174878,
      "stop" : 1623895174878,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "wpa2_personal 5 GHZ Band"
  }, {
    "name" : "feature",
    "value" : "NAT MODE CLIENT CONNECTIVITY"
  }, {
    "name" : "tag",
    "value" : "nat"
  }, {
    "name" : "tag",
    "value" : "general"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('setup_profiles')"
  }, {
    "name" : "tag",
    "value" : "sanity"
  }, {
    "name" : "tag",
    "value" : "wpa2_personal"
  }, {
    "name" : "tag",
    "value" : "suiteA"
  }, {
    "name" : "tag",
    "value" : "fiveg"
  }, {
    "name" : "tag",
    "value" : "sanity_light"
  }, {
    "name" : "tag",
    "value" : "client_connectivity"
  }, {
    "name" : "parentSuite",
    "value" : "e2e.basic.validation_of_operating_modes.nat_mode.client_connectivity"
  }, {
    "name" : "suite",
    "value" : "test_general_security_modes"
  }, {
    "name" : "subSuite",
    "value" : "TestNATModeConnectivitySuiteA"
  }, {
    "name" : "host",
    "value" : "nightly-ci-495-cf6jf"
  }, {
    "name" : "thread",
    "value" : "6-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "e2e.basic.validation_of_operating_modes.nat_mode.client_connectivity.test_general_security_modes"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "setup_profiles",
    "value" : "{'mode': 'NAT', 'ssid_modes': {'open': [{'ssid_name': 'ssid_open_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'basic-02-SSID-open-0-NAT', 'mode': 'NAT', 'vlan': 1}, {'ssid_name': 'ssid_open_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'profile_name': 'basic-02-SSID-open-1-NAT', 'mode': 'NAT', 'vlan': 1}], 'wpa': [{'ssid_name': 'ssid_wpa_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa-0-NAT', 'mode': 'NAT', 'vlan': 1}, {'ssid_name': 'ssid_wpa_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa-1-NAT', 'mode': 'NAT', 'vlan': 1}], 'wpa2_personal': [{'ssid_name': 'ssid_wpa2_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa2_personal-0-NAT', 'mode': 'NAT', 'vlan': 1}, {'ssid_name': 'ssid_wpa2_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa2_personal-1-NAT', 'mode': 'NAT', 'vlan': 1}]}, 'rf': {}, 'radius': False}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 9,
        "passed" : 0,
        "unknown" : 0,
        "total" : 11
      },
      "items" : [ {
        "uid" : "fa151983876ad459",
        "status" : "skipped",
        "statusDetails" : "XFAIL reason: SSID NOT AVAILABLE IN VIF STATE\n\n_pytest.outcomes.XFailed: SSID NOT AVAILABLE IN VIF STATE",
        "time" : {
          "start" : 1623808482888,
          "stop" : 1623808482889,
          "duration" : 1
        }
      }, {
        "uid" : "1682ef3ed4b9e72f",
        "status" : "skipped",
        "statusDetails" : "XFAIL reason: SSID NOT AVAILABLE IN VIF STATE\n\n_pytest.outcomes.XFailed: SSID NOT AVAILABLE IN VIF STATE",
        "time" : {
          "start" : 1623764223420,
          "stop" : 1623764223421,
          "duration" : 1
        }
      }, {
        "uid" : "6b6d332b3891e778",
        "status" : "skipped",
        "statusDetails" : "XFAIL reason: SSID NOT AVAILABLE IN VIF STATE\n\n_pytest.outcomes.XFailed: SSID NOT AVAILABLE IN VIF STATE",
        "time" : {
          "start" : 1623722663079,
          "stop" : 1623722663079,
          "duration" : 0
        }
      }, {
        "uid" : "c0990c5b01beda67",
        "status" : "skipped",
        "statusDetails" : "XFAIL reason: SSID NOT AVAILABLE IN VIF STATE\n\n_pytest.outcomes.XFailed: SSID NOT AVAILABLE IN VIF STATE",
        "time" : {
          "start" : 1623672240826,
          "stop" : 1623672240826,
          "duration" : 0
        }
      }, {
        "uid" : "fcd69b07e5d5a7d1",
        "status" : "skipped",
        "statusDetails" : "XFAIL reason: SSID NOT AVAILABLE IN VIF STATE\n\n_pytest.outcomes.XFailed: SSID NOT AVAILABLE IN VIF STATE",
        "time" : {
          "start" : 1623635761119,
          "stop" : 1623635761120,
          "duration" : 1
        }
      }, {
        "uid" : "2f43f2f658875eb0",
        "status" : "skipped",
        "statusDetails" : "XFAIL reason: SSID NOT AVAILABLE IN VIF STATE\n\n_pytest.outcomes.XFailed: SSID NOT AVAILABLE IN VIF STATE",
        "time" : {
          "start" : 1623498725295,
          "stop" : 1623498725296,
          "duration" : 1
        }
      }, {
        "uid" : "c7e1e103f4feec4d",
        "status" : "skipped",
        "statusDetails" : "XFAIL reason: SSID NOT AVAILABLE IN VIF STATE\n\n_pytest.outcomes.XFailed: SSID NOT AVAILABLE IN VIF STATE",
        "time" : {
          "start" : 1623417806391,
          "stop" : 1623417806392,
          "duration" : 1
        }
      }, {
        "uid" : "61eb14a6a6fa0456",
        "status" : "broken",
        "statusDetails" : "swagger_client.rest.ApiException: (500)\nReason: \nHTTP response headers: HTTPHeaderDict({'Date': 'Fri, 11 Jun 2021 11:38:27 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'POST, PATCH, PUT, HEAD, GET, OPTIONS, DELETE', 'Access-Control-Max-Age': '10', 'Access-Control-Allow-Headers': 'x-requested-with,Content-Type,content-type,Authorization', 'Access-Control-Allow-Credentials': 'true', 'X-Content-Type-Options': 'nosniff', 'X-XSS-Protection': '1; mode=block', 'Strict-Transport-Security': 'max-age=31536000 ; includeSubDomains', 'X-Frame-Options': 'DENY', 'Cache-Control': 'no-cache, no-store, max-age=0, must-revalidate', 'Expires': '0', 'Pragma': 'no-cache', 'vary': 'accept-encoding'})\nHTTP response body: {\n  \"model_type\" : \"JsonSerializedException\",\n  \"exType\" : \"ResourceAccessException\",\n  \"error\" : \"I/O error on GET request for \\\"https://tip-wlan-prov-service:9091/api/equipment/forCustomer\\\": Connect to tip-wlan-prov-service:9091 [tip-wlan-prov-service/172.20.29.206] failed: Connection refused; nested exception is org.apache.http.conn.HttpHostConnectException: Connect to tip-wlan-prov-service:9091 [tip-wlan-prov-service/172.20.29.206] failed: Connection refused\",\n  \"path\" : \"/portal/equipment/forCustomer?customerId=2&amp;paginationContext=%7B%0A++++++++++++++++%22model_type%22%3A+%22PaginationContext%22%2C%0A++++++++++++++++%22maxItemsPerPage%22%3A+100%0A++++++++%7D\",\n  \"timestamp\" : 1623411507541\n}",
        "time" : {
          "start" : 1623411533745,
          "stop" : 1623411533745,
          "duration" : 0
        }
      }, {
        "uid" : "bb8dca4a6c65a244",
        "status" : "skipped",
        "statusDetails" : "XFAIL reason: SSID NOT AVAILABLE IN VIF STATE\n\n_pytest.outcomes.XFailed: SSID NOT AVAILABLE IN VIF STATE",
        "time" : {
          "start" : 1623408202668,
          "stop" : 1623408202668,
          "duration" : 0
        }
      }, {
        "uid" : "b8326a290c7a5ef",
        "status" : "skipped",
        "statusDetails" : "XFAIL reason: SSID NOT AVAILABLE IN VIF STATE\n\n_pytest.outcomes.XFailed: SSID NOT AVAILABLE IN VIF STATE",
        "time" : {
          "start" : 1623395347041,
          "stop" : 1623395347041,
          "duration" : 0
        }
      } ]
    },
    "tags" : [ "nat", "general", "@pytest.mark.usefixtures('setup_profiles')", "suiteA", "sanity", "wpa2_personal", "sanity_light", "client_connectivity", "fiveg" ]
  },
  "source" : "69cffd0b2aea3407.json",
  "parameterValues" : [ "{'mode': 'NAT', 'ssid_modes': {'open': [{'ssid_name': 'ssid_open_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'basic-02-SSID-open-0-NAT', 'mode': 'NAT', 'vlan': 1}, {'ssid_name': 'ssid_open_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'profile_name': 'basic-02-SSID-open-1-NAT', 'mode': 'NAT', 'vlan': 1}], 'wpa': [{'ssid_name': 'ssid_wpa_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa-0-NAT', 'mode': 'NAT', 'vlan': 1}, {'ssid_name': 'ssid_wpa_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa-1-NAT', 'mode': 'NAT', 'vlan': 1}], 'wpa2_personal': [{'ssid_name': 'ssid_wpa2_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa2_personal-0-NAT', 'mode': 'NAT', 'vlan': 1}, {'ssid_name': 'ssid_wpa2_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa2_personal-1-NAT', 'mode': 'NAT', 'vlan': 1}]}, 'rf': {}, 'radius': False}" ]
}