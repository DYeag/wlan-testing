{"name": "test_client_wpa2_personal_5g_11a[setup_profiles0]", "status": "broken", "statusDetails": {"message": "ValueError: 'usecols' must either be list-like of all strings, all unicode, all integers or a callable.", "trace": "self = <test_bridge_mode.TestRatevsRangeBridge object at 0x7f7bf8186a90>, get_vif_state = ['ssid_wpa2_2g', 'ssid_wpa2_5g'], lf_test = <lanforge.lf_tests.RunTest object at 0x7f7bf8137f70>, station_names_fiveg = ['wlan000']\ncreate_lanforge_chamberview_dut = 'advanced-02'\nget_configuration = {'access_point': [{'ip': 'localhost', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP3', 'mode': 'wifi6', ...}], 'contro... '2.4G-Station-Name': 'wlan0', '5G-Radio': ['wiphy5', 'wiphy3'], '5G-Station-Name': 'wlan0', ...}, 'name': 'lanforge'}}\nlf_tools = <lanforge.lf_tools.ChamberView object at 0x7f7bf81252e0>\n\n    @pytest.mark.wpa2_personal\n    @pytest.mark.fiveg\n    @pytest.mark.client11a\n    def test_client_wpa2_personal_5g_11a(self, get_vif_state,\n                                         lf_test, station_names_fiveg, create_lanforge_chamberview_dut,\n                                         get_configuration,lf_tools):\n        \"\"\"\n    \n        pytest -m \"ratevsrange and bridge and client11a\" -s -vvv --skip-testrail --testbed=advanced-02\n        jira- wifi-2497\n        \"\"\"\n        profile_data = setup_params_general[\"ssid_modes\"][\"wpa2_personal\"][1]\n        ssid_name = profile_data[\"ssid_name\"]\n        security_key = profile_data[\"security_key\"]\n        security = \"wpa2\"\n        mode = \"BRIDGE\"\n        band = \"fiveg\"\n        vlan = 1\n        dut_name = create_lanforge_chamberview_dut\n        if ssid_name not in get_vif_state:\n            allure.attach(name=\"retest,vif state ssid not available:\", body=str(get_vif_state))\n            pytest.xfail(\"SSID NOT AVAILABLE IN VIF STATE\")\n        station = lf_test.Client_Connect(ssid=ssid_name, security=security,\n                                         passkey=security_key, mode=mode, band=band,\n                                         station_name=station_names_fiveg, vlan_id=vlan)\n        print(\"station\", station)\n    \n        val = [['modes: 802.11a'], ['pkts: MTU'], ['directions: DUT Transmit;DUT Receive'], ['traffic_types: TCP'],\n               ['bandw_options: AUTO'], ['spatial_streams: AUTO'], ['attenuator: 1.1.3034'], ['attenuations: 0..+50']]\n    \n        if station:\n            time.sleep(3)\n            rvr_o = lf_test.ratevsrange(station_name=station_names_fiveg, mode=mode,\n                                        instance_name=\"WPA2_2G_bridge_rvr_11a\",\n                                        vlan_id=vlan, dut_name=dut_name, raw_lines=val)\n            report_name = rvr_o.report_name[0]['LAST'][\"response\"].split(\":::\")[1].split(\"/\")[-1]\n            entries = os.listdir(\"../reports/\" + report_name + '/')\n            pdf = False\n            for i in entries:\n                if \".pdf\" in i:\n                    pdf = i\n            if pdf:\n                allure.attach.file(source=\"../reports/\" + report_name + \"/\" + pdf,\n                                   name=get_configuration[\"access_point\"][0][\"model\"] + \"ratevsrange\")\n            print(\"Test Completed... Cleaning up Stations\")\n            lf_test.Client_disconnect(station_name=station_names_fiveg)\n>           kpi_val = lf_tools.read_kpi_file(column_name='numeric-score', dir_name=report_name)\n\ne2e/advanced/rate_vs_range/wpa2_personal/test_bridge_mode.py:223: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../libs/lanforge/lf_tools.py:117: in read_kpi_file\n    df = pd.read_csv(\"../reports/\" + str(dir_name) + \"/kpi.csv\", sep=r'\\t', usecols=column_name, engine='python')\n../../../../.local/lib/python3.8/site-packages/pandas/io/parsers.py:610: in read_csv\n    return _read(filepath_or_buffer, kwds)\n../../../../.local/lib/python3.8/site-packages/pandas/io/parsers.py:462: in _read\n    parser = TextFileReader(filepath_or_buffer, **kwds)\n../../../../.local/lib/python3.8/site-packages/pandas/io/parsers.py:819: in __init__\n    self._engine = self._make_engine(self.engine)\n../../../../.local/lib/python3.8/site-packages/pandas/io/parsers.py:1050: in _make_engine\n    return mapping[engine](self.f, **self.options)  # type: ignore[call-arg]\n../../../../.local/lib/python3.8/site-packages/pandas/io/parsers.py:2267: in __init__\n    self.usecols, _ = _validate_usecols_arg(kwds[\"usecols\"])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nusecols = 'numeric-score'\n\n    def _validate_usecols_arg(usecols):\n        \"\"\"\n        Validate the 'usecols' parameter.\n    \n        Checks whether or not the 'usecols' parameter contains all integers\n        (column selection by index), strings (column by name) or is a callable.\n        Raises a ValueError if that is not the case.\n    \n        Parameters\n        ----------\n        usecols : list-like, callable, or None\n            List of columns to use when parsing or a callable that can be used\n            to filter a list of table columns.\n    \n        Returns\n        -------\n        usecols_tuple : tuple\n            A tuple of (verified_usecols, usecols_dtype).\n    \n            'verified_usecols' is either a set if an array-like is passed in or\n            'usecols' if a callable or None is passed in.\n    \n            'usecols_dtype` is the inferred dtype of 'usecols' if an array-like\n            is passed in or None if a callable or None is passed in.\n        \"\"\"\n        msg = (\n            \"'usecols' must either be list-like of all strings, all unicode, \"\n            \"all integers or a callable.\"\n        )\n        if usecols is not None:\n            if callable(usecols):\n                return usecols, None\n    \n            if not is_list_like(usecols):\n                # see gh-20529\n                #\n                # Ensure it is iterable container but not string.\n>               raise ValueError(msg)\nE               ValueError: 'usecols' must either be list-like of all strings, all unicode, all integers or a callable.\n\n../../../../.local/lib/python3.8/site-packages/pandas/io/parsers.py:1236: ValueError"}, "description": "\n\n        pytest -m \"ratevsrange and bridge and client11a\" -s -vvv --skip-testrail --testbed=advanced-02\n        jira- wifi-2497\n        ", "attachments": [{"name": "eap102ratevsrange", "source": "f5018205-08a5-411c-8a96-74bc30a2e2a3-attachment.attach"}, {"name": "log", "source": "1b31c2b1-f73d-4589-9713-bc7d0c37b039-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "setup_profiles", "value": "{'mode': 'BRIDGE', 'ssid_modes': {'open': [{'ssid_name': 'ssid_open_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'advanced-02-SSID-open-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_open_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'profile_name': 'advanced-02-SSID-open-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}], 'wpa': [{'ssid_name': 'ssid_wpa_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'advanced-02-SSID-wpa-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'security_key': 'something', 'profile_name': 'advanced-02-SSID-wpa-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}], 'wpa2_personal': [{'ssid_name': 'ssid_wpa2_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'advanced-02-SSID-wpa2_personal-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa2_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'security_key': 'something', 'profile_name': 'advanced-02-SSID-wpa2_personal-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}]}, 'rf': {'is5GHz': {'channelBandwidth': 'is20MHz'}, 'is5GHzL': {'channelBandwidth': 'is20MHz'}, 'is5GHzU': {'channelBandwidth': 'is20MHz'}}, 'radius': False}"}], "start": 1625743182636, "stop": 1625743397511, "uuid": "e3d75387-4efb-4508-b47e-8d3c51cec135", "historyId": "2c476231ebff844f6504e509ddfe4124", "testCaseId": "5e5af398d3c170974b86487ab606804a", "fullName": "e2e.advanced.rate_vs_range.wpa2_personal.test_bridge_mode.TestRatevsRangeBridge#test_client_wpa2_personal_5g_11a", "labels": [{"name": "feature", "value": "BRIDGE MODE CLIENT CONNECTIVITY"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "tag", "value": "bridge"}, {"name": "tag", "value": "wpa2_personal"}, {"name": "tag", "value": "fiveg"}, {"name": "tag", "value": "performance"}, {"name": "tag", "value": "Mhz20"}, {"name": "tag", "value": "ratevsrange"}, {"name": "tag", "value": "client11a"}, {"name": "parentSuite", "value": "e2e.advanced.rate_vs_range.wpa2_personal"}, {"name": "suite", "value": "test_bridge_mode"}, {"name": "subSuite", "value": "TestRatevsRangeBridge"}, {"name": "host", "value": "candela-nikita"}, {"name": "thread", "value": "713565-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.advanced.rate_vs_range.wpa2_personal.test_bridge_mode"}]}