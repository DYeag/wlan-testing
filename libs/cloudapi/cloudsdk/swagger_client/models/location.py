# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Location(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'location_type': 'str',
        'customer_id': 'int',
        'name': 'str',
        'parent_id': 'int',
        'details': 'LocationDetails',
        'created_timestamp': 'int',
        'last_modified_timestamp': 'int'
    }

    attribute_map = {
        'id': 'id',
        'location_type': 'locationType',
        'customer_id': 'customerId',
        'name': 'name',
        'parent_id': 'parentId',
        'details': 'details',
        'created_timestamp': 'createdTimestamp',
        'last_modified_timestamp': 'lastModifiedTimestamp'
    }

    def __init__(self, id=None, location_type=None, customer_id=None, name=None, parent_id=None, details=None, created_timestamp=None, last_modified_timestamp=None):  # noqa: E501
        """Location - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._location_type = None
        self._customer_id = None
        self._name = None
        self._parent_id = None
        self._details = None
        self._created_timestamp = None
        self._last_modified_timestamp = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if location_type is not None:
            self.location_type = location_type
        if customer_id is not None:
            self.customer_id = customer_id
        if name is not None:
            self.name = name
        if parent_id is not None:
            self.parent_id = parent_id
        if details is not None:
            self.details = details
        if created_timestamp is not None:
            self.created_timestamp = created_timestamp
        if last_modified_timestamp is not None:
            self.last_modified_timestamp = last_modified_timestamp

    @property
    def id(self):
        """Gets the id of this Location.  # noqa: E501


        :return: The id of this Location.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Location.


        :param id: The id of this Location.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def location_type(self):
        """Gets the location_type of this Location.  # noqa: E501


        :return: The location_type of this Location.  # noqa: E501
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this Location.


        :param location_type: The location_type of this Location.  # noqa: E501
        :type: str
        """
        allowed_values = ["COUNTRY", "SITE", "BUILDING", "FLOOR", "UNSUPPORTED"]  # noqa: E501
        if location_type not in allowed_values:
            raise ValueError(
                "Invalid value for `location_type` ({0}), must be one of {1}"  # noqa: E501
                .format(location_type, allowed_values)
            )

        self._location_type = location_type

    @property
    def customer_id(self):
        """Gets the customer_id of this Location.  # noqa: E501


        :return: The customer_id of this Location.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Location.


        :param customer_id: The customer_id of this Location.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def name(self):
        """Gets the name of this Location.  # noqa: E501


        :return: The name of this Location.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Location.


        :param name: The name of this Location.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parent_id(self):
        """Gets the parent_id of this Location.  # noqa: E501


        :return: The parent_id of this Location.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Location.


        :param parent_id: The parent_id of this Location.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def details(self):
        """Gets the details of this Location.  # noqa: E501


        :return: The details of this Location.  # noqa: E501
        :rtype: LocationDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Location.


        :param details: The details of this Location.  # noqa: E501
        :type: LocationDetails
        """

        self._details = details

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this Location.  # noqa: E501


        :return: The created_timestamp of this Location.  # noqa: E501
        :rtype: int
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this Location.


        :param created_timestamp: The created_timestamp of this Location.  # noqa: E501
        :type: int
        """

        self._created_timestamp = created_timestamp

    @property
    def last_modified_timestamp(self):
        """Gets the last_modified_timestamp of this Location.  # noqa: E501

        must be provided for update operation, update will be rejected if provided value does not match the one currently stored in the database  # noqa: E501

        :return: The last_modified_timestamp of this Location.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_timestamp

    @last_modified_timestamp.setter
    def last_modified_timestamp(self, last_modified_timestamp):
        """Sets the last_modified_timestamp of this Location.

        must be provided for update operation, update will be rejected if provided value does not match the one currently stored in the database  # noqa: E501

        :param last_modified_timestamp: The last_modified_timestamp of this Location.  # noqa: E501
        :type: int
        """

        self._last_modified_timestamp = last_modified_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Location, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Location):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
