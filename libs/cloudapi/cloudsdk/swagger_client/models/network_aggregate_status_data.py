# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NetworkAggregateStatusData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_type': 'str',
        'status_data_type': 'str',
        'dhcp_details': 'CommonProbeDetails',
        'dns_details': 'CommonProbeDetails',
        'cloud_link_details': 'CommonProbeDetails',
        'noise_floor_details': 'NoiseFloorDetails',
        'channel_utilization_details': 'ChannelUtilizationDetails',
        'radio_utilization_details': 'RadioUtilizationDetails',
        'user_details': 'UserDetails',
        'traffic_details': 'TrafficDetails',
        'radius_details': 'RadiusDetails',
        'equipment_performance_details': 'EquipmentPerformanceDetails',
        'capacity_details': 'CapacityDetails',
        'number_of_reporting_equipment': 'int',
        'number_of_total_equipment': 'int',
        'begin_generation_ts_ms': 'int',
        'end_generation_ts_ms': 'int',
        'begin_aggregation_ts_ms': 'int',
        'end_aggregation_ts_ms': 'int',
        'num_metrics_aggregated': 'int',
        'coverage': 'int',
        'behavior': 'int',
        'handoff': 'int',
        'wlan_latency': 'int'
    }

    attribute_map = {
        'model_type': 'model_type',
        'status_data_type': 'statusDataType',
        'dhcp_details': 'dhcpDetails',
        'dns_details': 'dnsDetails',
        'cloud_link_details': 'cloudLinkDetails',
        'noise_floor_details': 'noiseFloorDetails',
        'channel_utilization_details': 'channelUtilizationDetails',
        'radio_utilization_details': 'radioUtilizationDetails',
        'user_details': 'userDetails',
        'traffic_details': 'trafficDetails',
        'radius_details': 'radiusDetails',
        'equipment_performance_details': 'equipmentPerformanceDetails',
        'capacity_details': 'capacityDetails',
        'number_of_reporting_equipment': 'numberOfReportingEquipment',
        'number_of_total_equipment': 'numberOfTotalEquipment',
        'begin_generation_ts_ms': 'beginGenerationTsMs',
        'end_generation_ts_ms': 'endGenerationTsMs',
        'begin_aggregation_ts_ms': 'beginAggregationTsMs',
        'end_aggregation_ts_ms': 'endAggregationTsMs',
        'num_metrics_aggregated': 'numMetricsAggregated',
        'coverage': 'coverage',
        'behavior': 'behavior',
        'handoff': 'handoff',
        'wlan_latency': 'wlanLatency'
    }

    def __init__(self, model_type=None, status_data_type=None, dhcp_details=None, dns_details=None, cloud_link_details=None, noise_floor_details=None, channel_utilization_details=None, radio_utilization_details=None, user_details=None, traffic_details=None, radius_details=None, equipment_performance_details=None, capacity_details=None, number_of_reporting_equipment=None, number_of_total_equipment=None, begin_generation_ts_ms=None, end_generation_ts_ms=None, begin_aggregation_ts_ms=None, end_aggregation_ts_ms=None, num_metrics_aggregated=None, coverage=None, behavior=None, handoff=None, wlan_latency=None):  # noqa: E501
        """NetworkAggregateStatusData - a model defined in Swagger"""  # noqa: E501
        self._model_type = None
        self._status_data_type = None
        self._dhcp_details = None
        self._dns_details = None
        self._cloud_link_details = None
        self._noise_floor_details = None
        self._channel_utilization_details = None
        self._radio_utilization_details = None
        self._user_details = None
        self._traffic_details = None
        self._radius_details = None
        self._equipment_performance_details = None
        self._capacity_details = None
        self._number_of_reporting_equipment = None
        self._number_of_total_equipment = None
        self._begin_generation_ts_ms = None
        self._end_generation_ts_ms = None
        self._begin_aggregation_ts_ms = None
        self._end_aggregation_ts_ms = None
        self._num_metrics_aggregated = None
        self._coverage = None
        self._behavior = None
        self._handoff = None
        self._wlan_latency = None
        self.discriminator = None
        self.model_type = model_type
        if status_data_type is not None:
            self.status_data_type = status_data_type
        if dhcp_details is not None:
            self.dhcp_details = dhcp_details
        if dns_details is not None:
            self.dns_details = dns_details
        if cloud_link_details is not None:
            self.cloud_link_details = cloud_link_details
        if noise_floor_details is not None:
            self.noise_floor_details = noise_floor_details
        if channel_utilization_details is not None:
            self.channel_utilization_details = channel_utilization_details
        if radio_utilization_details is not None:
            self.radio_utilization_details = radio_utilization_details
        if user_details is not None:
            self.user_details = user_details
        if traffic_details is not None:
            self.traffic_details = traffic_details
        if radius_details is not None:
            self.radius_details = radius_details
        if equipment_performance_details is not None:
            self.equipment_performance_details = equipment_performance_details
        if capacity_details is not None:
            self.capacity_details = capacity_details
        if number_of_reporting_equipment is not None:
            self.number_of_reporting_equipment = number_of_reporting_equipment
        if number_of_total_equipment is not None:
            self.number_of_total_equipment = number_of_total_equipment
        if begin_generation_ts_ms is not None:
            self.begin_generation_ts_ms = begin_generation_ts_ms
        if end_generation_ts_ms is not None:
            self.end_generation_ts_ms = end_generation_ts_ms
        if begin_aggregation_ts_ms is not None:
            self.begin_aggregation_ts_ms = begin_aggregation_ts_ms
        if end_aggregation_ts_ms is not None:
            self.end_aggregation_ts_ms = end_aggregation_ts_ms
        if num_metrics_aggregated is not None:
            self.num_metrics_aggregated = num_metrics_aggregated
        if coverage is not None:
            self.coverage = coverage
        if behavior is not None:
            self.behavior = behavior
        if handoff is not None:
            self.handoff = handoff
        if wlan_latency is not None:
            self.wlan_latency = wlan_latency

    @property
    def model_type(self):
        """Gets the model_type of this NetworkAggregateStatusData.  # noqa: E501


        :return: The model_type of this NetworkAggregateStatusData.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this NetworkAggregateStatusData.


        :param model_type: The model_type of this NetworkAggregateStatusData.  # noqa: E501
        :type: str
        """
        if model_type is None:
            raise ValueError("Invalid value for `model_type`, must not be `None`")  # noqa: E501
        allowed_values = ["NetworkAggregateStatusData"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"  # noqa: E501
                .format(model_type, allowed_values)
            )

        self._model_type = model_type

    @property
    def status_data_type(self):
        """Gets the status_data_type of this NetworkAggregateStatusData.  # noqa: E501


        :return: The status_data_type of this NetworkAggregateStatusData.  # noqa: E501
        :rtype: str
        """
        return self._status_data_type

    @status_data_type.setter
    def status_data_type(self, status_data_type):
        """Sets the status_data_type of this NetworkAggregateStatusData.


        :param status_data_type: The status_data_type of this NetworkAggregateStatusData.  # noqa: E501
        :type: str
        """
        allowed_values = ["NETWORK_AGGREGATE"]  # noqa: E501
        if status_data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `status_data_type` ({0}), must be one of {1}"  # noqa: E501
                .format(status_data_type, allowed_values)
            )

        self._status_data_type = status_data_type

    @property
    def dhcp_details(self):
        """Gets the dhcp_details of this NetworkAggregateStatusData.  # noqa: E501


        :return: The dhcp_details of this NetworkAggregateStatusData.  # noqa: E501
        :rtype: CommonProbeDetails
        """
        return self._dhcp_details

    @dhcp_details.setter
    def dhcp_details(self, dhcp_details):
        """Sets the dhcp_details of this NetworkAggregateStatusData.


        :param dhcp_details: The dhcp_details of this NetworkAggregateStatusData.  # noqa: E501
        :type: CommonProbeDetails
        """

        self._dhcp_details = dhcp_details

    @property
    def dns_details(self):
        """Gets the dns_details of this NetworkAggregateStatusData.  # noqa: E501


        :return: The dns_details of this NetworkAggregateStatusData.  # noqa: E501
        :rtype: CommonProbeDetails
        """
        return self._dns_details

    @dns_details.setter
    def dns_details(self, dns_details):
        """Sets the dns_details of this NetworkAggregateStatusData.


        :param dns_details: The dns_details of this NetworkAggregateStatusData.  # noqa: E501
        :type: CommonProbeDetails
        """

        self._dns_details = dns_details

    @property
    def cloud_link_details(self):
        """Gets the cloud_link_details of this NetworkAggregateStatusData.  # noqa: E501


        :return: The cloud_link_details of this NetworkAggregateStatusData.  # noqa: E501
        :rtype: CommonProbeDetails
        """
        return self._cloud_link_details

    @cloud_link_details.setter
    def cloud_link_details(self, cloud_link_details):
        """Sets the cloud_link_details of this NetworkAggregateStatusData.


        :param cloud_link_details: The cloud_link_details of this NetworkAggregateStatusData.  # noqa: E501
        :type: CommonProbeDetails
        """

        self._cloud_link_details = cloud_link_details

    @property
    def noise_floor_details(self):
        """Gets the noise_floor_details of this NetworkAggregateStatusData.  # noqa: E501


        :return: The noise_floor_details of this NetworkAggregateStatusData.  # noqa: E501
        :rtype: NoiseFloorDetails
        """
        return self._noise_floor_details

    @noise_floor_details.setter
    def noise_floor_details(self, noise_floor_details):
        """Sets the noise_floor_details of this NetworkAggregateStatusData.


        :param noise_floor_details: The noise_floor_details of this NetworkAggregateStatusData.  # noqa: E501
        :type: NoiseFloorDetails
        """

        self._noise_floor_details = noise_floor_details

    @property
    def channel_utilization_details(self):
        """Gets the channel_utilization_details of this NetworkAggregateStatusData.  # noqa: E501


        :return: The channel_utilization_details of this NetworkAggregateStatusData.  # noqa: E501
        :rtype: ChannelUtilizationDetails
        """
        return self._channel_utilization_details

    @channel_utilization_details.setter
    def channel_utilization_details(self, channel_utilization_details):
        """Sets the channel_utilization_details of this NetworkAggregateStatusData.


        :param channel_utilization_details: The channel_utilization_details of this NetworkAggregateStatusData.  # noqa: E501
        :type: ChannelUtilizationDetails
        """

        self._channel_utilization_details = channel_utilization_details

    @property
    def radio_utilization_details(self):
        """Gets the radio_utilization_details of this NetworkAggregateStatusData.  # noqa: E501


        :return: The radio_utilization_details of this NetworkAggregateStatusData.  # noqa: E501
        :rtype: RadioUtilizationDetails
        """
        return self._radio_utilization_details

    @radio_utilization_details.setter
    def radio_utilization_details(self, radio_utilization_details):
        """Sets the radio_utilization_details of this NetworkAggregateStatusData.


        :param radio_utilization_details: The radio_utilization_details of this NetworkAggregateStatusData.  # noqa: E501
        :type: RadioUtilizationDetails
        """

        self._radio_utilization_details = radio_utilization_details

    @property
    def user_details(self):
        """Gets the user_details of this NetworkAggregateStatusData.  # noqa: E501


        :return: The user_details of this NetworkAggregateStatusData.  # noqa: E501
        :rtype: UserDetails
        """
        return self._user_details

    @user_details.setter
    def user_details(self, user_details):
        """Sets the user_details of this NetworkAggregateStatusData.


        :param user_details: The user_details of this NetworkAggregateStatusData.  # noqa: E501
        :type: UserDetails
        """

        self._user_details = user_details

    @property
    def traffic_details(self):
        """Gets the traffic_details of this NetworkAggregateStatusData.  # noqa: E501


        :return: The traffic_details of this NetworkAggregateStatusData.  # noqa: E501
        :rtype: TrafficDetails
        """
        return self._traffic_details

    @traffic_details.setter
    def traffic_details(self, traffic_details):
        """Sets the traffic_details of this NetworkAggregateStatusData.


        :param traffic_details: The traffic_details of this NetworkAggregateStatusData.  # noqa: E501
        :type: TrafficDetails
        """

        self._traffic_details = traffic_details

    @property
    def radius_details(self):
        """Gets the radius_details of this NetworkAggregateStatusData.  # noqa: E501


        :return: The radius_details of this NetworkAggregateStatusData.  # noqa: E501
        :rtype: RadiusDetails
        """
        return self._radius_details

    @radius_details.setter
    def radius_details(self, radius_details):
        """Sets the radius_details of this NetworkAggregateStatusData.


        :param radius_details: The radius_details of this NetworkAggregateStatusData.  # noqa: E501
        :type: RadiusDetails
        """

        self._radius_details = radius_details

    @property
    def equipment_performance_details(self):
        """Gets the equipment_performance_details of this NetworkAggregateStatusData.  # noqa: E501


        :return: The equipment_performance_details of this NetworkAggregateStatusData.  # noqa: E501
        :rtype: EquipmentPerformanceDetails
        """
        return self._equipment_performance_details

    @equipment_performance_details.setter
    def equipment_performance_details(self, equipment_performance_details):
        """Sets the equipment_performance_details of this NetworkAggregateStatusData.


        :param equipment_performance_details: The equipment_performance_details of this NetworkAggregateStatusData.  # noqa: E501
        :type: EquipmentPerformanceDetails
        """

        self._equipment_performance_details = equipment_performance_details

    @property
    def capacity_details(self):
        """Gets the capacity_details of this NetworkAggregateStatusData.  # noqa: E501


        :return: The capacity_details of this NetworkAggregateStatusData.  # noqa: E501
        :rtype: CapacityDetails
        """
        return self._capacity_details

    @capacity_details.setter
    def capacity_details(self, capacity_details):
        """Sets the capacity_details of this NetworkAggregateStatusData.


        :param capacity_details: The capacity_details of this NetworkAggregateStatusData.  # noqa: E501
        :type: CapacityDetails
        """

        self._capacity_details = capacity_details

    @property
    def number_of_reporting_equipment(self):
        """Gets the number_of_reporting_equipment of this NetworkAggregateStatusData.  # noqa: E501


        :return: The number_of_reporting_equipment of this NetworkAggregateStatusData.  # noqa: E501
        :rtype: int
        """
        return self._number_of_reporting_equipment

    @number_of_reporting_equipment.setter
    def number_of_reporting_equipment(self, number_of_reporting_equipment):
        """Sets the number_of_reporting_equipment of this NetworkAggregateStatusData.


        :param number_of_reporting_equipment: The number_of_reporting_equipment of this NetworkAggregateStatusData.  # noqa: E501
        :type: int
        """

        self._number_of_reporting_equipment = number_of_reporting_equipment

    @property
    def number_of_total_equipment(self):
        """Gets the number_of_total_equipment of this NetworkAggregateStatusData.  # noqa: E501


        :return: The number_of_total_equipment of this NetworkAggregateStatusData.  # noqa: E501
        :rtype: int
        """
        return self._number_of_total_equipment

    @number_of_total_equipment.setter
    def number_of_total_equipment(self, number_of_total_equipment):
        """Sets the number_of_total_equipment of this NetworkAggregateStatusData.


        :param number_of_total_equipment: The number_of_total_equipment of this NetworkAggregateStatusData.  # noqa: E501
        :type: int
        """

        self._number_of_total_equipment = number_of_total_equipment

    @property
    def begin_generation_ts_ms(self):
        """Gets the begin_generation_ts_ms of this NetworkAggregateStatusData.  # noqa: E501


        :return: The begin_generation_ts_ms of this NetworkAggregateStatusData.  # noqa: E501
        :rtype: int
        """
        return self._begin_generation_ts_ms

    @begin_generation_ts_ms.setter
    def begin_generation_ts_ms(self, begin_generation_ts_ms):
        """Sets the begin_generation_ts_ms of this NetworkAggregateStatusData.


        :param begin_generation_ts_ms: The begin_generation_ts_ms of this NetworkAggregateStatusData.  # noqa: E501
        :type: int
        """

        self._begin_generation_ts_ms = begin_generation_ts_ms

    @property
    def end_generation_ts_ms(self):
        """Gets the end_generation_ts_ms of this NetworkAggregateStatusData.  # noqa: E501


        :return: The end_generation_ts_ms of this NetworkAggregateStatusData.  # noqa: E501
        :rtype: int
        """
        return self._end_generation_ts_ms

    @end_generation_ts_ms.setter
    def end_generation_ts_ms(self, end_generation_ts_ms):
        """Sets the end_generation_ts_ms of this NetworkAggregateStatusData.


        :param end_generation_ts_ms: The end_generation_ts_ms of this NetworkAggregateStatusData.  # noqa: E501
        :type: int
        """

        self._end_generation_ts_ms = end_generation_ts_ms

    @property
    def begin_aggregation_ts_ms(self):
        """Gets the begin_aggregation_ts_ms of this NetworkAggregateStatusData.  # noqa: E501


        :return: The begin_aggregation_ts_ms of this NetworkAggregateStatusData.  # noqa: E501
        :rtype: int
        """
        return self._begin_aggregation_ts_ms

    @begin_aggregation_ts_ms.setter
    def begin_aggregation_ts_ms(self, begin_aggregation_ts_ms):
        """Sets the begin_aggregation_ts_ms of this NetworkAggregateStatusData.


        :param begin_aggregation_ts_ms: The begin_aggregation_ts_ms of this NetworkAggregateStatusData.  # noqa: E501
        :type: int
        """

        self._begin_aggregation_ts_ms = begin_aggregation_ts_ms

    @property
    def end_aggregation_ts_ms(self):
        """Gets the end_aggregation_ts_ms of this NetworkAggregateStatusData.  # noqa: E501


        :return: The end_aggregation_ts_ms of this NetworkAggregateStatusData.  # noqa: E501
        :rtype: int
        """
        return self._end_aggregation_ts_ms

    @end_aggregation_ts_ms.setter
    def end_aggregation_ts_ms(self, end_aggregation_ts_ms):
        """Sets the end_aggregation_ts_ms of this NetworkAggregateStatusData.


        :param end_aggregation_ts_ms: The end_aggregation_ts_ms of this NetworkAggregateStatusData.  # noqa: E501
        :type: int
        """

        self._end_aggregation_ts_ms = end_aggregation_ts_ms

    @property
    def num_metrics_aggregated(self):
        """Gets the num_metrics_aggregated of this NetworkAggregateStatusData.  # noqa: E501


        :return: The num_metrics_aggregated of this NetworkAggregateStatusData.  # noqa: E501
        :rtype: int
        """
        return self._num_metrics_aggregated

    @num_metrics_aggregated.setter
    def num_metrics_aggregated(self, num_metrics_aggregated):
        """Sets the num_metrics_aggregated of this NetworkAggregateStatusData.


        :param num_metrics_aggregated: The num_metrics_aggregated of this NetworkAggregateStatusData.  # noqa: E501
        :type: int
        """

        self._num_metrics_aggregated = num_metrics_aggregated

    @property
    def coverage(self):
        """Gets the coverage of this NetworkAggregateStatusData.  # noqa: E501


        :return: The coverage of this NetworkAggregateStatusData.  # noqa: E501
        :rtype: int
        """
        return self._coverage

    @coverage.setter
    def coverage(self, coverage):
        """Sets the coverage of this NetworkAggregateStatusData.


        :param coverage: The coverage of this NetworkAggregateStatusData.  # noqa: E501
        :type: int
        """

        self._coverage = coverage

    @property
    def behavior(self):
        """Gets the behavior of this NetworkAggregateStatusData.  # noqa: E501


        :return: The behavior of this NetworkAggregateStatusData.  # noqa: E501
        :rtype: int
        """
        return self._behavior

    @behavior.setter
    def behavior(self, behavior):
        """Sets the behavior of this NetworkAggregateStatusData.


        :param behavior: The behavior of this NetworkAggregateStatusData.  # noqa: E501
        :type: int
        """

        self._behavior = behavior

    @property
    def handoff(self):
        """Gets the handoff of this NetworkAggregateStatusData.  # noqa: E501


        :return: The handoff of this NetworkAggregateStatusData.  # noqa: E501
        :rtype: int
        """
        return self._handoff

    @handoff.setter
    def handoff(self, handoff):
        """Sets the handoff of this NetworkAggregateStatusData.


        :param handoff: The handoff of this NetworkAggregateStatusData.  # noqa: E501
        :type: int
        """

        self._handoff = handoff

    @property
    def wlan_latency(self):
        """Gets the wlan_latency of this NetworkAggregateStatusData.  # noqa: E501


        :return: The wlan_latency of this NetworkAggregateStatusData.  # noqa: E501
        :rtype: int
        """
        return self._wlan_latency

    @wlan_latency.setter
    def wlan_latency(self, wlan_latency):
        """Sets the wlan_latency of this NetworkAggregateStatusData.


        :param wlan_latency: The wlan_latency of this NetworkAggregateStatusData.  # noqa: E501
        :type: int
        """

        self._wlan_latency = wlan_latency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkAggregateStatusData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkAggregateStatusData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
