# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.profile_details import ProfileDetails  # noqa: F401,E501

class BonjourGatewayProfile(ProfileDetails):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_type': 'str',
        'profile_description': 'str',
        'bonjour_services': 'list[BonjourServiceSet]'
    }
    if hasattr(ProfileDetails, "swagger_types"):
        swagger_types.update(ProfileDetails.swagger_types)

    attribute_map = {
        'model_type': 'model_type',
        'profile_description': 'profileDescription',
        'bonjour_services': 'bonjourServices'
    }
    if hasattr(ProfileDetails, "attribute_map"):
        attribute_map.update(ProfileDetails.attribute_map)

    def __init__(self, model_type=None, profile_description=None, bonjour_services=None, *args, **kwargs):  # noqa: E501
        """BonjourGatewayProfile - a model defined in Swagger"""  # noqa: E501
        self._model_type = None
        self._profile_description = None
        self._bonjour_services = None
        self.discriminator = None
        if model_type is not None:
            self.model_type = model_type
        if profile_description is not None:
            self.profile_description = profile_description
        if bonjour_services is not None:
            self.bonjour_services = bonjour_services
        ProfileDetails.__init__(self, *args, **kwargs)

    @property
    def model_type(self):
        """Gets the model_type of this BonjourGatewayProfile.  # noqa: E501


        :return: The model_type of this BonjourGatewayProfile.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this BonjourGatewayProfile.


        :param model_type: The model_type of this BonjourGatewayProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["BonjourGatewayProfile"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"  # noqa: E501
                .format(model_type, allowed_values)
            )

        self._model_type = model_type

    @property
    def profile_description(self):
        """Gets the profile_description of this BonjourGatewayProfile.  # noqa: E501


        :return: The profile_description of this BonjourGatewayProfile.  # noqa: E501
        :rtype: str
        """
        return self._profile_description

    @profile_description.setter
    def profile_description(self, profile_description):
        """Sets the profile_description of this BonjourGatewayProfile.


        :param profile_description: The profile_description of this BonjourGatewayProfile.  # noqa: E501
        :type: str
        """

        self._profile_description = profile_description

    @property
    def bonjour_services(self):
        """Gets the bonjour_services of this BonjourGatewayProfile.  # noqa: E501


        :return: The bonjour_services of this BonjourGatewayProfile.  # noqa: E501
        :rtype: list[BonjourServiceSet]
        """
        return self._bonjour_services

    @bonjour_services.setter
    def bonjour_services(self, bonjour_services):
        """Sets the bonjour_services of this BonjourGatewayProfile.


        :param bonjour_services: The bonjour_services of this BonjourGatewayProfile.  # noqa: E501
        :type: list[BonjourServiceSet]
        """

        self._bonjour_services = bonjour_services

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BonjourGatewayProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BonjourGatewayProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
