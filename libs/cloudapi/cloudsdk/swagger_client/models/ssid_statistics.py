# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SsidStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ssid': 'str',
        'bssid': 'MacAddress',
        'num_client': 'int',
        'rx_last_rssi': 'int',
        'num_rx_no_fcs_err': 'int',
        'num_rx_data': 'int',
        'num_rx_management': 'int',
        'num_rx_control': 'int',
        'rx_bytes': 'int',
        'rx_data_bytes': 'int',
        'num_rx_rts': 'int',
        'num_rx_cts': 'int',
        'num_rx_ack': 'int',
        'num_rx_probe_req': 'int',
        'num_rx_retry': 'int',
        'num_rx_dup': 'int',
        'num_rx_null_data': 'int',
        'num_rx_pspoll': 'int',
        'num_rx_stbc': 'int',
        'num_rx_ldpc': 'int',
        'num_rcv_frame_for_tx': 'int',
        'num_tx_queued': 'int',
        'num_rcv_bc_for_tx': 'int',
        'num_tx_dropped': 'int',
        'num_tx_retry_dropped': 'int',
        'num_tx_bc_dropped': 'int',
        'num_tx_succ': 'int',
        'num_tx_bytes_succ': 'int',
        'num_tx_ps_unicast': 'int',
        'num_tx_dtim_mc': 'int',
        'num_tx_succ_no_retry': 'int',
        'num_tx_succ_retries': 'int',
        'num_tx_multi_retries': 'int',
        'num_tx_management': 'int',
        'num_tx_control': 'int',
        'num_tx_action': 'int',
        'num_tx_prop_resp': 'int',
        'num_tx_data': 'int',
        'num_tx_data_retries': 'int',
        'num_tx_rts_succ': 'int',
        'num_tx_rts_fail': 'int',
        'num_tx_no_ack': 'int',
        'num_tx_eapol': 'int',
        'num_tx_ldpc': 'int',
        'num_tx_stbc': 'int',
        'num_tx_aggr_succ': 'int',
        'num_tx_aggr_one_mpdu': 'int',
        'wmm_queue_stats': 'WmmQueueStatsPerQueueTypeMap',
        'mcs_stats': 'list[McsStats]'
    }

    attribute_map = {
        'ssid': 'ssid',
        'bssid': 'bssid',
        'num_client': 'numClient',
        'rx_last_rssi': 'rxLastRssi',
        'num_rx_no_fcs_err': 'numRxNoFcsErr',
        'num_rx_data': 'numRxData',
        'num_rx_management': 'numRxManagement',
        'num_rx_control': 'numRxControl',
        'rx_bytes': 'rxBytes',
        'rx_data_bytes': 'rxDataBytes',
        'num_rx_rts': 'numRxRts',
        'num_rx_cts': 'numRxCts',
        'num_rx_ack': 'numRxAck',
        'num_rx_probe_req': 'numRxProbeReq',
        'num_rx_retry': 'numRxRetry',
        'num_rx_dup': 'numRxDup',
        'num_rx_null_data': 'numRxNullData',
        'num_rx_pspoll': 'numRxPspoll',
        'num_rx_stbc': 'numRxStbc',
        'num_rx_ldpc': 'numRxLdpc',
        'num_rcv_frame_for_tx': 'numRcvFrameForTx',
        'num_tx_queued': 'numTxQueued',
        'num_rcv_bc_for_tx': 'numRcvBcForTx',
        'num_tx_dropped': 'numTxDropped',
        'num_tx_retry_dropped': 'numTxRetryDropped',
        'num_tx_bc_dropped': 'numTxBcDropped',
        'num_tx_succ': 'numTxSucc',
        'num_tx_bytes_succ': 'numTxBytesSucc',
        'num_tx_ps_unicast': 'numTxPsUnicast',
        'num_tx_dtim_mc': 'numTxDtimMc',
        'num_tx_succ_no_retry': 'numTxSuccNoRetry',
        'num_tx_succ_retries': 'numTxSuccRetries',
        'num_tx_multi_retries': 'numTxMultiRetries',
        'num_tx_management': 'numTxManagement',
        'num_tx_control': 'numTxControl',
        'num_tx_action': 'numTxAction',
        'num_tx_prop_resp': 'numTxPropResp',
        'num_tx_data': 'numTxData',
        'num_tx_data_retries': 'numTxDataRetries',
        'num_tx_rts_succ': 'numTxRtsSucc',
        'num_tx_rts_fail': 'numTxRtsFail',
        'num_tx_no_ack': 'numTxNoAck',
        'num_tx_eapol': 'numTxEapol',
        'num_tx_ldpc': 'numTxLdpc',
        'num_tx_stbc': 'numTxStbc',
        'num_tx_aggr_succ': 'numTxAggrSucc',
        'num_tx_aggr_one_mpdu': 'numTxAggrOneMpdu',
        'wmm_queue_stats': 'wmmQueueStats',
        'mcs_stats': 'mcsStats'
    }

    def __init__(self, ssid=None, bssid=None, num_client=None, rx_last_rssi=None, num_rx_no_fcs_err=None, num_rx_data=None, num_rx_management=None, num_rx_control=None, rx_bytes=None, rx_data_bytes=None, num_rx_rts=None, num_rx_cts=None, num_rx_ack=None, num_rx_probe_req=None, num_rx_retry=None, num_rx_dup=None, num_rx_null_data=None, num_rx_pspoll=None, num_rx_stbc=None, num_rx_ldpc=None, num_rcv_frame_for_tx=None, num_tx_queued=None, num_rcv_bc_for_tx=None, num_tx_dropped=None, num_tx_retry_dropped=None, num_tx_bc_dropped=None, num_tx_succ=None, num_tx_bytes_succ=None, num_tx_ps_unicast=None, num_tx_dtim_mc=None, num_tx_succ_no_retry=None, num_tx_succ_retries=None, num_tx_multi_retries=None, num_tx_management=None, num_tx_control=None, num_tx_action=None, num_tx_prop_resp=None, num_tx_data=None, num_tx_data_retries=None, num_tx_rts_succ=None, num_tx_rts_fail=None, num_tx_no_ack=None, num_tx_eapol=None, num_tx_ldpc=None, num_tx_stbc=None, num_tx_aggr_succ=None, num_tx_aggr_one_mpdu=None, wmm_queue_stats=None, mcs_stats=None):  # noqa: E501
        """SsidStatistics - a model defined in Swagger"""  # noqa: E501
        self._ssid = None
        self._bssid = None
        self._num_client = None
        self._rx_last_rssi = None
        self._num_rx_no_fcs_err = None
        self._num_rx_data = None
        self._num_rx_management = None
        self._num_rx_control = None
        self._rx_bytes = None
        self._rx_data_bytes = None
        self._num_rx_rts = None
        self._num_rx_cts = None
        self._num_rx_ack = None
        self._num_rx_probe_req = None
        self._num_rx_retry = None
        self._num_rx_dup = None
        self._num_rx_null_data = None
        self._num_rx_pspoll = None
        self._num_rx_stbc = None
        self._num_rx_ldpc = None
        self._num_rcv_frame_for_tx = None
        self._num_tx_queued = None
        self._num_rcv_bc_for_tx = None
        self._num_tx_dropped = None
        self._num_tx_retry_dropped = None
        self._num_tx_bc_dropped = None
        self._num_tx_succ = None
        self._num_tx_bytes_succ = None
        self._num_tx_ps_unicast = None
        self._num_tx_dtim_mc = None
        self._num_tx_succ_no_retry = None
        self._num_tx_succ_retries = None
        self._num_tx_multi_retries = None
        self._num_tx_management = None
        self._num_tx_control = None
        self._num_tx_action = None
        self._num_tx_prop_resp = None
        self._num_tx_data = None
        self._num_tx_data_retries = None
        self._num_tx_rts_succ = None
        self._num_tx_rts_fail = None
        self._num_tx_no_ack = None
        self._num_tx_eapol = None
        self._num_tx_ldpc = None
        self._num_tx_stbc = None
        self._num_tx_aggr_succ = None
        self._num_tx_aggr_one_mpdu = None
        self._wmm_queue_stats = None
        self._mcs_stats = None
        self.discriminator = None
        if ssid is not None:
            self.ssid = ssid
        if bssid is not None:
            self.bssid = bssid
        if num_client is not None:
            self.num_client = num_client
        if rx_last_rssi is not None:
            self.rx_last_rssi = rx_last_rssi
        if num_rx_no_fcs_err is not None:
            self.num_rx_no_fcs_err = num_rx_no_fcs_err
        if num_rx_data is not None:
            self.num_rx_data = num_rx_data
        if num_rx_management is not None:
            self.num_rx_management = num_rx_management
        if num_rx_control is not None:
            self.num_rx_control = num_rx_control
        if rx_bytes is not None:
            self.rx_bytes = rx_bytes
        if rx_data_bytes is not None:
            self.rx_data_bytes = rx_data_bytes
        if num_rx_rts is not None:
            self.num_rx_rts = num_rx_rts
        if num_rx_cts is not None:
            self.num_rx_cts = num_rx_cts
        if num_rx_ack is not None:
            self.num_rx_ack = num_rx_ack
        if num_rx_probe_req is not None:
            self.num_rx_probe_req = num_rx_probe_req
        if num_rx_retry is not None:
            self.num_rx_retry = num_rx_retry
        if num_rx_dup is not None:
            self.num_rx_dup = num_rx_dup
        if num_rx_null_data is not None:
            self.num_rx_null_data = num_rx_null_data
        if num_rx_pspoll is not None:
            self.num_rx_pspoll = num_rx_pspoll
        if num_rx_stbc is not None:
            self.num_rx_stbc = num_rx_stbc
        if num_rx_ldpc is not None:
            self.num_rx_ldpc = num_rx_ldpc
        if num_rcv_frame_for_tx is not None:
            self.num_rcv_frame_for_tx = num_rcv_frame_for_tx
        if num_tx_queued is not None:
            self.num_tx_queued = num_tx_queued
        if num_rcv_bc_for_tx is not None:
            self.num_rcv_bc_for_tx = num_rcv_bc_for_tx
        if num_tx_dropped is not None:
            self.num_tx_dropped = num_tx_dropped
        if num_tx_retry_dropped is not None:
            self.num_tx_retry_dropped = num_tx_retry_dropped
        if num_tx_bc_dropped is not None:
            self.num_tx_bc_dropped = num_tx_bc_dropped
        if num_tx_succ is not None:
            self.num_tx_succ = num_tx_succ
        if num_tx_bytes_succ is not None:
            self.num_tx_bytes_succ = num_tx_bytes_succ
        if num_tx_ps_unicast is not None:
            self.num_tx_ps_unicast = num_tx_ps_unicast
        if num_tx_dtim_mc is not None:
            self.num_tx_dtim_mc = num_tx_dtim_mc
        if num_tx_succ_no_retry is not None:
            self.num_tx_succ_no_retry = num_tx_succ_no_retry
        if num_tx_succ_retries is not None:
            self.num_tx_succ_retries = num_tx_succ_retries
        if num_tx_multi_retries is not None:
            self.num_tx_multi_retries = num_tx_multi_retries
        if num_tx_management is not None:
            self.num_tx_management = num_tx_management
        if num_tx_control is not None:
            self.num_tx_control = num_tx_control
        if num_tx_action is not None:
            self.num_tx_action = num_tx_action
        if num_tx_prop_resp is not None:
            self.num_tx_prop_resp = num_tx_prop_resp
        if num_tx_data is not None:
            self.num_tx_data = num_tx_data
        if num_tx_data_retries is not None:
            self.num_tx_data_retries = num_tx_data_retries
        if num_tx_rts_succ is not None:
            self.num_tx_rts_succ = num_tx_rts_succ
        if num_tx_rts_fail is not None:
            self.num_tx_rts_fail = num_tx_rts_fail
        if num_tx_no_ack is not None:
            self.num_tx_no_ack = num_tx_no_ack
        if num_tx_eapol is not None:
            self.num_tx_eapol = num_tx_eapol
        if num_tx_ldpc is not None:
            self.num_tx_ldpc = num_tx_ldpc
        if num_tx_stbc is not None:
            self.num_tx_stbc = num_tx_stbc
        if num_tx_aggr_succ is not None:
            self.num_tx_aggr_succ = num_tx_aggr_succ
        if num_tx_aggr_one_mpdu is not None:
            self.num_tx_aggr_one_mpdu = num_tx_aggr_one_mpdu
        if wmm_queue_stats is not None:
            self.wmm_queue_stats = wmm_queue_stats
        if mcs_stats is not None:
            self.mcs_stats = mcs_stats

    @property
    def ssid(self):
        """Gets the ssid of this SsidStatistics.  # noqa: E501

        SSID  # noqa: E501

        :return: The ssid of this SsidStatistics.  # noqa: E501
        :rtype: str
        """
        return self._ssid

    @ssid.setter
    def ssid(self, ssid):
        """Sets the ssid of this SsidStatistics.

        SSID  # noqa: E501

        :param ssid: The ssid of this SsidStatistics.  # noqa: E501
        :type: str
        """

        self._ssid = ssid

    @property
    def bssid(self):
        """Gets the bssid of this SsidStatistics.  # noqa: E501


        :return: The bssid of this SsidStatistics.  # noqa: E501
        :rtype: MacAddress
        """
        return self._bssid

    @bssid.setter
    def bssid(self, bssid):
        """Sets the bssid of this SsidStatistics.


        :param bssid: The bssid of this SsidStatistics.  # noqa: E501
        :type: MacAddress
        """

        self._bssid = bssid

    @property
    def num_client(self):
        """Gets the num_client of this SsidStatistics.  # noqa: E501

        Number client associated to this BSS  # noqa: E501

        :return: The num_client of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_client

    @num_client.setter
    def num_client(self, num_client):
        """Sets the num_client of this SsidStatistics.

        Number client associated to this BSS  # noqa: E501

        :param num_client: The num_client of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_client = num_client

    @property
    def rx_last_rssi(self):
        """Gets the rx_last_rssi of this SsidStatistics.  # noqa: E501

        The RSSI of last frame received.  # noqa: E501

        :return: The rx_last_rssi of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._rx_last_rssi

    @rx_last_rssi.setter
    def rx_last_rssi(self, rx_last_rssi):
        """Sets the rx_last_rssi of this SsidStatistics.

        The RSSI of last frame received.  # noqa: E501

        :param rx_last_rssi: The rx_last_rssi of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._rx_last_rssi = rx_last_rssi

    @property
    def num_rx_no_fcs_err(self):
        """Gets the num_rx_no_fcs_err of this SsidStatistics.  # noqa: E501

        The number of received frames without FCS errors.  # noqa: E501

        :return: The num_rx_no_fcs_err of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_rx_no_fcs_err

    @num_rx_no_fcs_err.setter
    def num_rx_no_fcs_err(self, num_rx_no_fcs_err):
        """Sets the num_rx_no_fcs_err of this SsidStatistics.

        The number of received frames without FCS errors.  # noqa: E501

        :param num_rx_no_fcs_err: The num_rx_no_fcs_err of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_rx_no_fcs_err = num_rx_no_fcs_err

    @property
    def num_rx_data(self):
        """Gets the num_rx_data of this SsidStatistics.  # noqa: E501

        The number of received data frames.  # noqa: E501

        :return: The num_rx_data of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_rx_data

    @num_rx_data.setter
    def num_rx_data(self, num_rx_data):
        """Sets the num_rx_data of this SsidStatistics.

        The number of received data frames.  # noqa: E501

        :param num_rx_data: The num_rx_data of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_rx_data = num_rx_data

    @property
    def num_rx_management(self):
        """Gets the num_rx_management of this SsidStatistics.  # noqa: E501

        The number of received management frames.  # noqa: E501

        :return: The num_rx_management of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_rx_management

    @num_rx_management.setter
    def num_rx_management(self, num_rx_management):
        """Sets the num_rx_management of this SsidStatistics.

        The number of received management frames.  # noqa: E501

        :param num_rx_management: The num_rx_management of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_rx_management = num_rx_management

    @property
    def num_rx_control(self):
        """Gets the num_rx_control of this SsidStatistics.  # noqa: E501

        The number of received control frames.  # noqa: E501

        :return: The num_rx_control of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_rx_control

    @num_rx_control.setter
    def num_rx_control(self, num_rx_control):
        """Sets the num_rx_control of this SsidStatistics.

        The number of received control frames.  # noqa: E501

        :param num_rx_control: The num_rx_control of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_rx_control = num_rx_control

    @property
    def rx_bytes(self):
        """Gets the rx_bytes of this SsidStatistics.  # noqa: E501

        The number of received bytes.  # noqa: E501

        :return: The rx_bytes of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._rx_bytes

    @rx_bytes.setter
    def rx_bytes(self, rx_bytes):
        """Sets the rx_bytes of this SsidStatistics.

        The number of received bytes.  # noqa: E501

        :param rx_bytes: The rx_bytes of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._rx_bytes = rx_bytes

    @property
    def rx_data_bytes(self):
        """Gets the rx_data_bytes of this SsidStatistics.  # noqa: E501

        The number of received data bytes.  # noqa: E501

        :return: The rx_data_bytes of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._rx_data_bytes

    @rx_data_bytes.setter
    def rx_data_bytes(self, rx_data_bytes):
        """Sets the rx_data_bytes of this SsidStatistics.

        The number of received data bytes.  # noqa: E501

        :param rx_data_bytes: The rx_data_bytes of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._rx_data_bytes = rx_data_bytes

    @property
    def num_rx_rts(self):
        """Gets the num_rx_rts of this SsidStatistics.  # noqa: E501

        The number of received RTS frames.  # noqa: E501

        :return: The num_rx_rts of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_rx_rts

    @num_rx_rts.setter
    def num_rx_rts(self, num_rx_rts):
        """Sets the num_rx_rts of this SsidStatistics.

        The number of received RTS frames.  # noqa: E501

        :param num_rx_rts: The num_rx_rts of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_rx_rts = num_rx_rts

    @property
    def num_rx_cts(self):
        """Gets the num_rx_cts of this SsidStatistics.  # noqa: E501

        The number of received CTS frames.  # noqa: E501

        :return: The num_rx_cts of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_rx_cts

    @num_rx_cts.setter
    def num_rx_cts(self, num_rx_cts):
        """Sets the num_rx_cts of this SsidStatistics.

        The number of received CTS frames.  # noqa: E501

        :param num_rx_cts: The num_rx_cts of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_rx_cts = num_rx_cts

    @property
    def num_rx_ack(self):
        """Gets the num_rx_ack of this SsidStatistics.  # noqa: E501

        The number of all received ACK frames (Acks + BlockAcks).  # noqa: E501

        :return: The num_rx_ack of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_rx_ack

    @num_rx_ack.setter
    def num_rx_ack(self, num_rx_ack):
        """Sets the num_rx_ack of this SsidStatistics.

        The number of all received ACK frames (Acks + BlockAcks).  # noqa: E501

        :param num_rx_ack: The num_rx_ack of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_rx_ack = num_rx_ack

    @property
    def num_rx_probe_req(self):
        """Gets the num_rx_probe_req of this SsidStatistics.  # noqa: E501

        The number of received probe request frames.  # noqa: E501

        :return: The num_rx_probe_req of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_rx_probe_req

    @num_rx_probe_req.setter
    def num_rx_probe_req(self, num_rx_probe_req):
        """Sets the num_rx_probe_req of this SsidStatistics.

        The number of received probe request frames.  # noqa: E501

        :param num_rx_probe_req: The num_rx_probe_req of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_rx_probe_req = num_rx_probe_req

    @property
    def num_rx_retry(self):
        """Gets the num_rx_retry of this SsidStatistics.  # noqa: E501

        The number of received retry frames.  # noqa: E501

        :return: The num_rx_retry of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_rx_retry

    @num_rx_retry.setter
    def num_rx_retry(self, num_rx_retry):
        """Sets the num_rx_retry of this SsidStatistics.

        The number of received retry frames.  # noqa: E501

        :param num_rx_retry: The num_rx_retry of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_rx_retry = num_rx_retry

    @property
    def num_rx_dup(self):
        """Gets the num_rx_dup of this SsidStatistics.  # noqa: E501

        The number of received duplicated frames.  # noqa: E501

        :return: The num_rx_dup of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_rx_dup

    @num_rx_dup.setter
    def num_rx_dup(self, num_rx_dup):
        """Sets the num_rx_dup of this SsidStatistics.

        The number of received duplicated frames.  # noqa: E501

        :param num_rx_dup: The num_rx_dup of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_rx_dup = num_rx_dup

    @property
    def num_rx_null_data(self):
        """Gets the num_rx_null_data of this SsidStatistics.  # noqa: E501

        The number of received null data frames.  # noqa: E501

        :return: The num_rx_null_data of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_rx_null_data

    @num_rx_null_data.setter
    def num_rx_null_data(self, num_rx_null_data):
        """Sets the num_rx_null_data of this SsidStatistics.

        The number of received null data frames.  # noqa: E501

        :param num_rx_null_data: The num_rx_null_data of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_rx_null_data = num_rx_null_data

    @property
    def num_rx_pspoll(self):
        """Gets the num_rx_pspoll of this SsidStatistics.  # noqa: E501

        The number of received ps-poll frames.  # noqa: E501

        :return: The num_rx_pspoll of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_rx_pspoll

    @num_rx_pspoll.setter
    def num_rx_pspoll(self, num_rx_pspoll):
        """Sets the num_rx_pspoll of this SsidStatistics.

        The number of received ps-poll frames.  # noqa: E501

        :param num_rx_pspoll: The num_rx_pspoll of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_rx_pspoll = num_rx_pspoll

    @property
    def num_rx_stbc(self):
        """Gets the num_rx_stbc of this SsidStatistics.  # noqa: E501

        The number of received STBC frames.  # noqa: E501

        :return: The num_rx_stbc of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_rx_stbc

    @num_rx_stbc.setter
    def num_rx_stbc(self, num_rx_stbc):
        """Sets the num_rx_stbc of this SsidStatistics.

        The number of received STBC frames.  # noqa: E501

        :param num_rx_stbc: The num_rx_stbc of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_rx_stbc = num_rx_stbc

    @property
    def num_rx_ldpc(self):
        """Gets the num_rx_ldpc of this SsidStatistics.  # noqa: E501

        The number of received LDPC frames.  # noqa: E501

        :return: The num_rx_ldpc of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_rx_ldpc

    @num_rx_ldpc.setter
    def num_rx_ldpc(self, num_rx_ldpc):
        """Sets the num_rx_ldpc of this SsidStatistics.

        The number of received LDPC frames.  # noqa: E501

        :param num_rx_ldpc: The num_rx_ldpc of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_rx_ldpc = num_rx_ldpc

    @property
    def num_rcv_frame_for_tx(self):
        """Gets the num_rcv_frame_for_tx of this SsidStatistics.  # noqa: E501

        The number of received ethernet and local generated frames for transmit.  # noqa: E501

        :return: The num_rcv_frame_for_tx of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_rcv_frame_for_tx

    @num_rcv_frame_for_tx.setter
    def num_rcv_frame_for_tx(self, num_rcv_frame_for_tx):
        """Sets the num_rcv_frame_for_tx of this SsidStatistics.

        The number of received ethernet and local generated frames for transmit.  # noqa: E501

        :param num_rcv_frame_for_tx: The num_rcv_frame_for_tx of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_rcv_frame_for_tx = num_rcv_frame_for_tx

    @property
    def num_tx_queued(self):
        """Gets the num_tx_queued of this SsidStatistics.  # noqa: E501

        The number of TX frames queued.  # noqa: E501

        :return: The num_tx_queued of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_tx_queued

    @num_tx_queued.setter
    def num_tx_queued(self, num_tx_queued):
        """Sets the num_tx_queued of this SsidStatistics.

        The number of TX frames queued.  # noqa: E501

        :param num_tx_queued: The num_tx_queued of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_tx_queued = num_tx_queued

    @property
    def num_rcv_bc_for_tx(self):
        """Gets the num_rcv_bc_for_tx of this SsidStatistics.  # noqa: E501

        The number of received ethernet and local generated broadcast frames for transmit.  # noqa: E501

        :return: The num_rcv_bc_for_tx of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_rcv_bc_for_tx

    @num_rcv_bc_for_tx.setter
    def num_rcv_bc_for_tx(self, num_rcv_bc_for_tx):
        """Sets the num_rcv_bc_for_tx of this SsidStatistics.

        The number of received ethernet and local generated broadcast frames for transmit.  # noqa: E501

        :param num_rcv_bc_for_tx: The num_rcv_bc_for_tx of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_rcv_bc_for_tx = num_rcv_bc_for_tx

    @property
    def num_tx_dropped(self):
        """Gets the num_tx_dropped of this SsidStatistics.  # noqa: E501

        The number of every TX frame dropped.  # noqa: E501

        :return: The num_tx_dropped of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_tx_dropped

    @num_tx_dropped.setter
    def num_tx_dropped(self, num_tx_dropped):
        """Sets the num_tx_dropped of this SsidStatistics.

        The number of every TX frame dropped.  # noqa: E501

        :param num_tx_dropped: The num_tx_dropped of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_tx_dropped = num_tx_dropped

    @property
    def num_tx_retry_dropped(self):
        """Gets the num_tx_retry_dropped of this SsidStatistics.  # noqa: E501

        The number of TX frame dropped due to retries.  # noqa: E501

        :return: The num_tx_retry_dropped of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_tx_retry_dropped

    @num_tx_retry_dropped.setter
    def num_tx_retry_dropped(self, num_tx_retry_dropped):
        """Sets the num_tx_retry_dropped of this SsidStatistics.

        The number of TX frame dropped due to retries.  # noqa: E501

        :param num_tx_retry_dropped: The num_tx_retry_dropped of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_tx_retry_dropped = num_tx_retry_dropped

    @property
    def num_tx_bc_dropped(self):
        """Gets the num_tx_bc_dropped of this SsidStatistics.  # noqa: E501

        The number of broadcast frames dropped.  # noqa: E501

        :return: The num_tx_bc_dropped of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_tx_bc_dropped

    @num_tx_bc_dropped.setter
    def num_tx_bc_dropped(self, num_tx_bc_dropped):
        """Sets the num_tx_bc_dropped of this SsidStatistics.

        The number of broadcast frames dropped.  # noqa: E501

        :param num_tx_bc_dropped: The num_tx_bc_dropped of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_tx_bc_dropped = num_tx_bc_dropped

    @property
    def num_tx_succ(self):
        """Gets the num_tx_succ of this SsidStatistics.  # noqa: E501

        The number of frames successfully transmitted.  # noqa: E501

        :return: The num_tx_succ of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_tx_succ

    @num_tx_succ.setter
    def num_tx_succ(self, num_tx_succ):
        """Sets the num_tx_succ of this SsidStatistics.

        The number of frames successfully transmitted.  # noqa: E501

        :param num_tx_succ: The num_tx_succ of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_tx_succ = num_tx_succ

    @property
    def num_tx_bytes_succ(self):
        """Gets the num_tx_bytes_succ of this SsidStatistics.  # noqa: E501

        The number of bytes successfully transmitted.  # noqa: E501

        :return: The num_tx_bytes_succ of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_tx_bytes_succ

    @num_tx_bytes_succ.setter
    def num_tx_bytes_succ(self, num_tx_bytes_succ):
        """Sets the num_tx_bytes_succ of this SsidStatistics.

        The number of bytes successfully transmitted.  # noqa: E501

        :param num_tx_bytes_succ: The num_tx_bytes_succ of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_tx_bytes_succ = num_tx_bytes_succ

    @property
    def num_tx_ps_unicast(self):
        """Gets the num_tx_ps_unicast of this SsidStatistics.  # noqa: E501

        The number of transmitted PS unicast frame.  # noqa: E501

        :return: The num_tx_ps_unicast of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_tx_ps_unicast

    @num_tx_ps_unicast.setter
    def num_tx_ps_unicast(self, num_tx_ps_unicast):
        """Sets the num_tx_ps_unicast of this SsidStatistics.

        The number of transmitted PS unicast frame.  # noqa: E501

        :param num_tx_ps_unicast: The num_tx_ps_unicast of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_tx_ps_unicast = num_tx_ps_unicast

    @property
    def num_tx_dtim_mc(self):
        """Gets the num_tx_dtim_mc of this SsidStatistics.  # noqa: E501

        The number of transmitted DTIM multicast frames.  # noqa: E501

        :return: The num_tx_dtim_mc of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_tx_dtim_mc

    @num_tx_dtim_mc.setter
    def num_tx_dtim_mc(self, num_tx_dtim_mc):
        """Sets the num_tx_dtim_mc of this SsidStatistics.

        The number of transmitted DTIM multicast frames.  # noqa: E501

        :param num_tx_dtim_mc: The num_tx_dtim_mc of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_tx_dtim_mc = num_tx_dtim_mc

    @property
    def num_tx_succ_no_retry(self):
        """Gets the num_tx_succ_no_retry of this SsidStatistics.  # noqa: E501

        The number of successfully transmitted frames at firt attemp.  # noqa: E501

        :return: The num_tx_succ_no_retry of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_tx_succ_no_retry

    @num_tx_succ_no_retry.setter
    def num_tx_succ_no_retry(self, num_tx_succ_no_retry):
        """Sets the num_tx_succ_no_retry of this SsidStatistics.

        The number of successfully transmitted frames at firt attemp.  # noqa: E501

        :param num_tx_succ_no_retry: The num_tx_succ_no_retry of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_tx_succ_no_retry = num_tx_succ_no_retry

    @property
    def num_tx_succ_retries(self):
        """Gets the num_tx_succ_retries of this SsidStatistics.  # noqa: E501

        The number of successfully transmitted frames with retries.  # noqa: E501

        :return: The num_tx_succ_retries of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_tx_succ_retries

    @num_tx_succ_retries.setter
    def num_tx_succ_retries(self, num_tx_succ_retries):
        """Sets the num_tx_succ_retries of this SsidStatistics.

        The number of successfully transmitted frames with retries.  # noqa: E501

        :param num_tx_succ_retries: The num_tx_succ_retries of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_tx_succ_retries = num_tx_succ_retries

    @property
    def num_tx_multi_retries(self):
        """Gets the num_tx_multi_retries of this SsidStatistics.  # noqa: E501

        The number of Tx frames with retries.  # noqa: E501

        :return: The num_tx_multi_retries of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_tx_multi_retries

    @num_tx_multi_retries.setter
    def num_tx_multi_retries(self, num_tx_multi_retries):
        """Sets the num_tx_multi_retries of this SsidStatistics.

        The number of Tx frames with retries.  # noqa: E501

        :param num_tx_multi_retries: The num_tx_multi_retries of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_tx_multi_retries = num_tx_multi_retries

    @property
    def num_tx_management(self):
        """Gets the num_tx_management of this SsidStatistics.  # noqa: E501

        The number of TX management frames.  # noqa: E501

        :return: The num_tx_management of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_tx_management

    @num_tx_management.setter
    def num_tx_management(self, num_tx_management):
        """Sets the num_tx_management of this SsidStatistics.

        The number of TX management frames.  # noqa: E501

        :param num_tx_management: The num_tx_management of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_tx_management = num_tx_management

    @property
    def num_tx_control(self):
        """Gets the num_tx_control of this SsidStatistics.  # noqa: E501

        The number of Tx control frames.  # noqa: E501

        :return: The num_tx_control of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_tx_control

    @num_tx_control.setter
    def num_tx_control(self, num_tx_control):
        """Sets the num_tx_control of this SsidStatistics.

        The number of Tx control frames.  # noqa: E501

        :param num_tx_control: The num_tx_control of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_tx_control = num_tx_control

    @property
    def num_tx_action(self):
        """Gets the num_tx_action of this SsidStatistics.  # noqa: E501

        The number of Tx action frames.  # noqa: E501

        :return: The num_tx_action of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_tx_action

    @num_tx_action.setter
    def num_tx_action(self, num_tx_action):
        """Sets the num_tx_action of this SsidStatistics.

        The number of Tx action frames.  # noqa: E501

        :param num_tx_action: The num_tx_action of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_tx_action = num_tx_action

    @property
    def num_tx_prop_resp(self):
        """Gets the num_tx_prop_resp of this SsidStatistics.  # noqa: E501

        The number of TX probe response.  # noqa: E501

        :return: The num_tx_prop_resp of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_tx_prop_resp

    @num_tx_prop_resp.setter
    def num_tx_prop_resp(self, num_tx_prop_resp):
        """Sets the num_tx_prop_resp of this SsidStatistics.

        The number of TX probe response.  # noqa: E501

        :param num_tx_prop_resp: The num_tx_prop_resp of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_tx_prop_resp = num_tx_prop_resp

    @property
    def num_tx_data(self):
        """Gets the num_tx_data of this SsidStatistics.  # noqa: E501

        The number of Tx data frames.  # noqa: E501

        :return: The num_tx_data of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_tx_data

    @num_tx_data.setter
    def num_tx_data(self, num_tx_data):
        """Sets the num_tx_data of this SsidStatistics.

        The number of Tx data frames.  # noqa: E501

        :param num_tx_data: The num_tx_data of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_tx_data = num_tx_data

    @property
    def num_tx_data_retries(self):
        """Gets the num_tx_data_retries of this SsidStatistics.  # noqa: E501

        The number of Tx data frames with retries.  # noqa: E501

        :return: The num_tx_data_retries of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_tx_data_retries

    @num_tx_data_retries.setter
    def num_tx_data_retries(self, num_tx_data_retries):
        """Sets the num_tx_data_retries of this SsidStatistics.

        The number of Tx data frames with retries.  # noqa: E501

        :param num_tx_data_retries: The num_tx_data_retries of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_tx_data_retries = num_tx_data_retries

    @property
    def num_tx_rts_succ(self):
        """Gets the num_tx_rts_succ of this SsidStatistics.  # noqa: E501

        The number of RTS frames sent successfully.  # noqa: E501

        :return: The num_tx_rts_succ of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_tx_rts_succ

    @num_tx_rts_succ.setter
    def num_tx_rts_succ(self, num_tx_rts_succ):
        """Sets the num_tx_rts_succ of this SsidStatistics.

        The number of RTS frames sent successfully.  # noqa: E501

        :param num_tx_rts_succ: The num_tx_rts_succ of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_tx_rts_succ = num_tx_rts_succ

    @property
    def num_tx_rts_fail(self):
        """Gets the num_tx_rts_fail of this SsidStatistics.  # noqa: E501

        The number of RTS frames failed transmission.  # noqa: E501

        :return: The num_tx_rts_fail of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_tx_rts_fail

    @num_tx_rts_fail.setter
    def num_tx_rts_fail(self, num_tx_rts_fail):
        """Sets the num_tx_rts_fail of this SsidStatistics.

        The number of RTS frames failed transmission.  # noqa: E501

        :param num_tx_rts_fail: The num_tx_rts_fail of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_tx_rts_fail = num_tx_rts_fail

    @property
    def num_tx_no_ack(self):
        """Gets the num_tx_no_ack of this SsidStatistics.  # noqa: E501

        The number of TX frames failed because of not Acked.  # noqa: E501

        :return: The num_tx_no_ack of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_tx_no_ack

    @num_tx_no_ack.setter
    def num_tx_no_ack(self, num_tx_no_ack):
        """Sets the num_tx_no_ack of this SsidStatistics.

        The number of TX frames failed because of not Acked.  # noqa: E501

        :param num_tx_no_ack: The num_tx_no_ack of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_tx_no_ack = num_tx_no_ack

    @property
    def num_tx_eapol(self):
        """Gets the num_tx_eapol of this SsidStatistics.  # noqa: E501

        The number of EAPOL frames sent.  # noqa: E501

        :return: The num_tx_eapol of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_tx_eapol

    @num_tx_eapol.setter
    def num_tx_eapol(self, num_tx_eapol):
        """Sets the num_tx_eapol of this SsidStatistics.

        The number of EAPOL frames sent.  # noqa: E501

        :param num_tx_eapol: The num_tx_eapol of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_tx_eapol = num_tx_eapol

    @property
    def num_tx_ldpc(self):
        """Gets the num_tx_ldpc of this SsidStatistics.  # noqa: E501

        The number of total LDPC frames sent.  # noqa: E501

        :return: The num_tx_ldpc of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_tx_ldpc

    @num_tx_ldpc.setter
    def num_tx_ldpc(self, num_tx_ldpc):
        """Sets the num_tx_ldpc of this SsidStatistics.

        The number of total LDPC frames sent.  # noqa: E501

        :param num_tx_ldpc: The num_tx_ldpc of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_tx_ldpc = num_tx_ldpc

    @property
    def num_tx_stbc(self):
        """Gets the num_tx_stbc of this SsidStatistics.  # noqa: E501

        The number of total STBC frames sent.  # noqa: E501

        :return: The num_tx_stbc of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_tx_stbc

    @num_tx_stbc.setter
    def num_tx_stbc(self, num_tx_stbc):
        """Sets the num_tx_stbc of this SsidStatistics.

        The number of total STBC frames sent.  # noqa: E501

        :param num_tx_stbc: The num_tx_stbc of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_tx_stbc = num_tx_stbc

    @property
    def num_tx_aggr_succ(self):
        """Gets the num_tx_aggr_succ of this SsidStatistics.  # noqa: E501

        The number of aggregation frames sent successfully.  # noqa: E501

        :return: The num_tx_aggr_succ of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_tx_aggr_succ

    @num_tx_aggr_succ.setter
    def num_tx_aggr_succ(self, num_tx_aggr_succ):
        """Sets the num_tx_aggr_succ of this SsidStatistics.

        The number of aggregation frames sent successfully.  # noqa: E501

        :param num_tx_aggr_succ: The num_tx_aggr_succ of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_tx_aggr_succ = num_tx_aggr_succ

    @property
    def num_tx_aggr_one_mpdu(self):
        """Gets the num_tx_aggr_one_mpdu of this SsidStatistics.  # noqa: E501

        The number of aggregation frames sent using single MPDU (where the A-MPDU contains only one MPDU ).  # noqa: E501

        :return: The num_tx_aggr_one_mpdu of this SsidStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_tx_aggr_one_mpdu

    @num_tx_aggr_one_mpdu.setter
    def num_tx_aggr_one_mpdu(self, num_tx_aggr_one_mpdu):
        """Sets the num_tx_aggr_one_mpdu of this SsidStatistics.

        The number of aggregation frames sent using single MPDU (where the A-MPDU contains only one MPDU ).  # noqa: E501

        :param num_tx_aggr_one_mpdu: The num_tx_aggr_one_mpdu of this SsidStatistics.  # noqa: E501
        :type: int
        """

        self._num_tx_aggr_one_mpdu = num_tx_aggr_one_mpdu

    @property
    def wmm_queue_stats(self):
        """Gets the wmm_queue_stats of this SsidStatistics.  # noqa: E501


        :return: The wmm_queue_stats of this SsidStatistics.  # noqa: E501
        :rtype: WmmQueueStatsPerQueueTypeMap
        """
        return self._wmm_queue_stats

    @wmm_queue_stats.setter
    def wmm_queue_stats(self, wmm_queue_stats):
        """Sets the wmm_queue_stats of this SsidStatistics.


        :param wmm_queue_stats: The wmm_queue_stats of this SsidStatistics.  # noqa: E501
        :type: WmmQueueStatsPerQueueTypeMap
        """

        self._wmm_queue_stats = wmm_queue_stats

    @property
    def mcs_stats(self):
        """Gets the mcs_stats of this SsidStatistics.  # noqa: E501


        :return: The mcs_stats of this SsidStatistics.  # noqa: E501
        :rtype: list[McsStats]
        """
        return self._mcs_stats

    @mcs_stats.setter
    def mcs_stats(self, mcs_stats):
        """Sets the mcs_stats of this SsidStatistics.


        :param mcs_stats: The mcs_stats of this SsidStatistics.  # noqa: E501
        :type: list[McsStats]
        """

        self._mcs_stats = mcs_stats

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SsidStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SsidStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
