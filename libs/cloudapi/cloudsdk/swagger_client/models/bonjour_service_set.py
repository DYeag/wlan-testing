# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BonjourServiceSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vlan_id': 'int',
        'support_all_services': 'bool',
        'service_names': 'list[str]'
    }

    attribute_map = {
        'vlan_id': 'vlanId',
        'support_all_services': 'supportAllServices',
        'service_names': 'serviceNames'
    }

    def __init__(self, vlan_id=None, support_all_services=None, service_names=None):  # noqa: E501
        """BonjourServiceSet - a model defined in Swagger"""  # noqa: E501
        self._vlan_id = None
        self._support_all_services = None
        self._service_names = None
        self.discriminator = None
        if vlan_id is not None:
            self.vlan_id = vlan_id
        if support_all_services is not None:
            self.support_all_services = support_all_services
        if service_names is not None:
            self.service_names = service_names

    @property
    def vlan_id(self):
        """Gets the vlan_id of this BonjourServiceSet.  # noqa: E501


        :return: The vlan_id of this BonjourServiceSet.  # noqa: E501
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this BonjourServiceSet.


        :param vlan_id: The vlan_id of this BonjourServiceSet.  # noqa: E501
        :type: int
        """

        self._vlan_id = vlan_id

    @property
    def support_all_services(self):
        """Gets the support_all_services of this BonjourServiceSet.  # noqa: E501


        :return: The support_all_services of this BonjourServiceSet.  # noqa: E501
        :rtype: bool
        """
        return self._support_all_services

    @support_all_services.setter
    def support_all_services(self, support_all_services):
        """Sets the support_all_services of this BonjourServiceSet.


        :param support_all_services: The support_all_services of this BonjourServiceSet.  # noqa: E501
        :type: bool
        """

        self._support_all_services = support_all_services

    @property
    def service_names(self):
        """Gets the service_names of this BonjourServiceSet.  # noqa: E501


        :return: The service_names of this BonjourServiceSet.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_names

    @service_names.setter
    def service_names(self, service_names):
        """Sets the service_names of this BonjourServiceSet.


        :param service_names: The service_names of this BonjourServiceSet.  # noqa: E501
        :type: list[str]
        """

        self._service_names = service_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BonjourServiceSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BonjourServiceSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
