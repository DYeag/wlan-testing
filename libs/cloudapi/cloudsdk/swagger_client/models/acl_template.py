# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AclTemplate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'read': 'bool',
        'read_write': 'bool',
        'read_write_create': 'bool',
        'delete': 'bool',
        'portal_login': 'bool'
    }

    attribute_map = {
        'read': 'Read',
        'read_write': 'ReadWrite',
        'read_write_create': 'ReadWriteCreate',
        'delete': 'Delete',
        'portal_login': 'PortalLogin'
    }

    def __init__(self, read=None, read_write=None, read_write_create=None, delete=None, portal_login=None):  # noqa: E501
        """AclTemplate - a model defined in Swagger"""  # noqa: E501
        self._read = None
        self._read_write = None
        self._read_write_create = None
        self._delete = None
        self._portal_login = None
        self.discriminator = None
        if read is not None:
            self.read = read
        if read_write is not None:
            self.read_write = read_write
        if read_write_create is not None:
            self.read_write_create = read_write_create
        if delete is not None:
            self.delete = delete
        if portal_login is not None:
            self.portal_login = portal_login

    @property
    def read(self):
        """Gets the read of this AclTemplate.  # noqa: E501


        :return: The read of this AclTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this AclTemplate.


        :param read: The read of this AclTemplate.  # noqa: E501
        :type: bool
        """

        self._read = read

    @property
    def read_write(self):
        """Gets the read_write of this AclTemplate.  # noqa: E501


        :return: The read_write of this AclTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._read_write

    @read_write.setter
    def read_write(self, read_write):
        """Sets the read_write of this AclTemplate.


        :param read_write: The read_write of this AclTemplate.  # noqa: E501
        :type: bool
        """

        self._read_write = read_write

    @property
    def read_write_create(self):
        """Gets the read_write_create of this AclTemplate.  # noqa: E501


        :return: The read_write_create of this AclTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._read_write_create

    @read_write_create.setter
    def read_write_create(self, read_write_create):
        """Sets the read_write_create of this AclTemplate.


        :param read_write_create: The read_write_create of this AclTemplate.  # noqa: E501
        :type: bool
        """

        self._read_write_create = read_write_create

    @property
    def delete(self):
        """Gets the delete of this AclTemplate.  # noqa: E501


        :return: The delete of this AclTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this AclTemplate.


        :param delete: The delete of this AclTemplate.  # noqa: E501
        :type: bool
        """

        self._delete = delete

    @property
    def portal_login(self):
        """Gets the portal_login of this AclTemplate.  # noqa: E501


        :return: The portal_login of this AclTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._portal_login

    @portal_login.setter
    def portal_login(self, portal_login):
        """Sets the portal_login of this AclTemplate.


        :param portal_login: The portal_login of this AclTemplate.  # noqa: E501
        :type: bool
        """

        self._portal_login = portal_login

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AclTemplate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AclTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
