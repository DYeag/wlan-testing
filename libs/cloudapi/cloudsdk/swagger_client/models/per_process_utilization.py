# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PerProcessUtilization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pid': 'int',
        'cmd': 'str',
        'util': 'int'
    }

    attribute_map = {
        'pid': 'pid',
        'cmd': 'cmd',
        'util': 'util'
    }

    def __init__(self, pid=None, cmd=None, util=None):  # noqa: E501
        """PerProcessUtilization - a model defined in Swagger"""  # noqa: E501
        self._pid = None
        self._cmd = None
        self._util = None
        self.discriminator = None
        if pid is not None:
            self.pid = pid
        if cmd is not None:
            self.cmd = cmd
        if util is not None:
            self.util = util

    @property
    def pid(self):
        """Gets the pid of this PerProcessUtilization.  # noqa: E501

        process id  # noqa: E501

        :return: The pid of this PerProcessUtilization.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this PerProcessUtilization.

        process id  # noqa: E501

        :param pid: The pid of this PerProcessUtilization.  # noqa: E501
        :type: int
        """

        self._pid = pid

    @property
    def cmd(self):
        """Gets the cmd of this PerProcessUtilization.  # noqa: E501

        process name  # noqa: E501

        :return: The cmd of this PerProcessUtilization.  # noqa: E501
        :rtype: str
        """
        return self._cmd

    @cmd.setter
    def cmd(self, cmd):
        """Sets the cmd of this PerProcessUtilization.

        process name  # noqa: E501

        :param cmd: The cmd of this PerProcessUtilization.  # noqa: E501
        :type: str
        """

        self._cmd = cmd

    @property
    def util(self):
        """Gets the util of this PerProcessUtilization.  # noqa: E501

        utilization, either as a percentage (i.e. for CPU) or in kB (for memory)  # noqa: E501

        :return: The util of this PerProcessUtilization.  # noqa: E501
        :rtype: int
        """
        return self._util

    @util.setter
    def util(self, util):
        """Sets the util of this PerProcessUtilization.

        utilization, either as a percentage (i.e. for CPU) or in kB (for memory)  # noqa: E501

        :param util: The util of this PerProcessUtilization.  # noqa: E501
        :type: int
        """

        self._util = util

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PerProcessUtilization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PerProcessUtilization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
