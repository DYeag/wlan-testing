# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClientActivityAggregatedStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mbps': 'MinMaxAvgValueInt',
        'high_client_count': 'int',
        'medium_client_count': 'int',
        'low_client_count': 'int'
    }

    attribute_map = {
        'mbps': 'mbps',
        'high_client_count': 'highClientCount',
        'medium_client_count': 'mediumClientCount',
        'low_client_count': 'lowClientCount'
    }

    def __init__(self, mbps=None, high_client_count=None, medium_client_count=None, low_client_count=None):  # noqa: E501
        """ClientActivityAggregatedStats - a model defined in Swagger"""  # noqa: E501
        self._mbps = None
        self._high_client_count = None
        self._medium_client_count = None
        self._low_client_count = None
        self.discriminator = None
        if mbps is not None:
            self.mbps = mbps
        if high_client_count is not None:
            self.high_client_count = high_client_count
        if medium_client_count is not None:
            self.medium_client_count = medium_client_count
        if low_client_count is not None:
            self.low_client_count = low_client_count

    @property
    def mbps(self):
        """Gets the mbps of this ClientActivityAggregatedStats.  # noqa: E501


        :return: The mbps of this ClientActivityAggregatedStats.  # noqa: E501
        :rtype: MinMaxAvgValueInt
        """
        return self._mbps

    @mbps.setter
    def mbps(self, mbps):
        """Sets the mbps of this ClientActivityAggregatedStats.


        :param mbps: The mbps of this ClientActivityAggregatedStats.  # noqa: E501
        :type: MinMaxAvgValueInt
        """

        self._mbps = mbps

    @property
    def high_client_count(self):
        """Gets the high_client_count of this ClientActivityAggregatedStats.  # noqa: E501


        :return: The high_client_count of this ClientActivityAggregatedStats.  # noqa: E501
        :rtype: int
        """
        return self._high_client_count

    @high_client_count.setter
    def high_client_count(self, high_client_count):
        """Sets the high_client_count of this ClientActivityAggregatedStats.


        :param high_client_count: The high_client_count of this ClientActivityAggregatedStats.  # noqa: E501
        :type: int
        """

        self._high_client_count = high_client_count

    @property
    def medium_client_count(self):
        """Gets the medium_client_count of this ClientActivityAggregatedStats.  # noqa: E501


        :return: The medium_client_count of this ClientActivityAggregatedStats.  # noqa: E501
        :rtype: int
        """
        return self._medium_client_count

    @medium_client_count.setter
    def medium_client_count(self, medium_client_count):
        """Sets the medium_client_count of this ClientActivityAggregatedStats.


        :param medium_client_count: The medium_client_count of this ClientActivityAggregatedStats.  # noqa: E501
        :type: int
        """

        self._medium_client_count = medium_client_count

    @property
    def low_client_count(self):
        """Gets the low_client_count of this ClientActivityAggregatedStats.  # noqa: E501


        :return: The low_client_count of this ClientActivityAggregatedStats.  # noqa: E501
        :rtype: int
        """
        return self._low_client_count

    @low_client_count.setter
    def low_client_count(self, low_client_count):
        """Sets the low_client_count of this ClientActivityAggregatedStats.


        :param low_client_count: The low_client_count of this ClientActivityAggregatedStats.  # noqa: E501
        :type: int
        """

        self._low_client_count = low_client_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientActivityAggregatedStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientActivityAggregatedStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
