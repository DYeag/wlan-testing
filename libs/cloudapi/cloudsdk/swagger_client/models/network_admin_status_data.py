# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NetworkAdminStatusData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_type': 'str',
        'status_data_type': 'str',
        'dhcp_status': 'StatusCode',
        'dns_status': 'StatusCode',
        'cloud_link_status': 'StatusCode',
        'radius_status': 'StatusCode',
        'average_coverage_per_radio': 'IntegerPerRadioTypeMap',
        'equipment_counts_by_severity': 'IntegerStatusCodeMap'
    }

    attribute_map = {
        'model_type': 'model_type',
        'status_data_type': 'statusDataType',
        'dhcp_status': 'dhcpStatus',
        'dns_status': 'dnsStatus',
        'cloud_link_status': 'cloudLinkStatus',
        'radius_status': 'radiusStatus',
        'average_coverage_per_radio': 'averageCoveragePerRadio',
        'equipment_counts_by_severity': 'equipmentCountsBySeverity'
    }

    def __init__(self, model_type=None, status_data_type=None, dhcp_status=None, dns_status=None, cloud_link_status=None, radius_status=None, average_coverage_per_radio=None, equipment_counts_by_severity=None):  # noqa: E501
        """NetworkAdminStatusData - a model defined in Swagger"""  # noqa: E501
        self._model_type = None
        self._status_data_type = None
        self._dhcp_status = None
        self._dns_status = None
        self._cloud_link_status = None
        self._radius_status = None
        self._average_coverage_per_radio = None
        self._equipment_counts_by_severity = None
        self.discriminator = None
        self.model_type = model_type
        if status_data_type is not None:
            self.status_data_type = status_data_type
        if dhcp_status is not None:
            self.dhcp_status = dhcp_status
        if dns_status is not None:
            self.dns_status = dns_status
        if cloud_link_status is not None:
            self.cloud_link_status = cloud_link_status
        if radius_status is not None:
            self.radius_status = radius_status
        if average_coverage_per_radio is not None:
            self.average_coverage_per_radio = average_coverage_per_radio
        if equipment_counts_by_severity is not None:
            self.equipment_counts_by_severity = equipment_counts_by_severity

    @property
    def model_type(self):
        """Gets the model_type of this NetworkAdminStatusData.  # noqa: E501


        :return: The model_type of this NetworkAdminStatusData.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this NetworkAdminStatusData.


        :param model_type: The model_type of this NetworkAdminStatusData.  # noqa: E501
        :type: str
        """
        if model_type is None:
            raise ValueError("Invalid value for `model_type`, must not be `None`")  # noqa: E501
        allowed_values = ["NetworkAdminStatusData"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"  # noqa: E501
                .format(model_type, allowed_values)
            )

        self._model_type = model_type

    @property
    def status_data_type(self):
        """Gets the status_data_type of this NetworkAdminStatusData.  # noqa: E501


        :return: The status_data_type of this NetworkAdminStatusData.  # noqa: E501
        :rtype: str
        """
        return self._status_data_type

    @status_data_type.setter
    def status_data_type(self, status_data_type):
        """Sets the status_data_type of this NetworkAdminStatusData.


        :param status_data_type: The status_data_type of this NetworkAdminStatusData.  # noqa: E501
        :type: str
        """
        allowed_values = ["NETWORK_ADMIN"]  # noqa: E501
        if status_data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `status_data_type` ({0}), must be one of {1}"  # noqa: E501
                .format(status_data_type, allowed_values)
            )

        self._status_data_type = status_data_type

    @property
    def dhcp_status(self):
        """Gets the dhcp_status of this NetworkAdminStatusData.  # noqa: E501


        :return: The dhcp_status of this NetworkAdminStatusData.  # noqa: E501
        :rtype: StatusCode
        """
        return self._dhcp_status

    @dhcp_status.setter
    def dhcp_status(self, dhcp_status):
        """Sets the dhcp_status of this NetworkAdminStatusData.


        :param dhcp_status: The dhcp_status of this NetworkAdminStatusData.  # noqa: E501
        :type: StatusCode
        """

        self._dhcp_status = dhcp_status

    @property
    def dns_status(self):
        """Gets the dns_status of this NetworkAdminStatusData.  # noqa: E501


        :return: The dns_status of this NetworkAdminStatusData.  # noqa: E501
        :rtype: StatusCode
        """
        return self._dns_status

    @dns_status.setter
    def dns_status(self, dns_status):
        """Sets the dns_status of this NetworkAdminStatusData.


        :param dns_status: The dns_status of this NetworkAdminStatusData.  # noqa: E501
        :type: StatusCode
        """

        self._dns_status = dns_status

    @property
    def cloud_link_status(self):
        """Gets the cloud_link_status of this NetworkAdminStatusData.  # noqa: E501


        :return: The cloud_link_status of this NetworkAdminStatusData.  # noqa: E501
        :rtype: StatusCode
        """
        return self._cloud_link_status

    @cloud_link_status.setter
    def cloud_link_status(self, cloud_link_status):
        """Sets the cloud_link_status of this NetworkAdminStatusData.


        :param cloud_link_status: The cloud_link_status of this NetworkAdminStatusData.  # noqa: E501
        :type: StatusCode
        """

        self._cloud_link_status = cloud_link_status

    @property
    def radius_status(self):
        """Gets the radius_status of this NetworkAdminStatusData.  # noqa: E501


        :return: The radius_status of this NetworkAdminStatusData.  # noqa: E501
        :rtype: StatusCode
        """
        return self._radius_status

    @radius_status.setter
    def radius_status(self, radius_status):
        """Sets the radius_status of this NetworkAdminStatusData.


        :param radius_status: The radius_status of this NetworkAdminStatusData.  # noqa: E501
        :type: StatusCode
        """

        self._radius_status = radius_status

    @property
    def average_coverage_per_radio(self):
        """Gets the average_coverage_per_radio of this NetworkAdminStatusData.  # noqa: E501


        :return: The average_coverage_per_radio of this NetworkAdminStatusData.  # noqa: E501
        :rtype: IntegerPerRadioTypeMap
        """
        return self._average_coverage_per_radio

    @average_coverage_per_radio.setter
    def average_coverage_per_radio(self, average_coverage_per_radio):
        """Sets the average_coverage_per_radio of this NetworkAdminStatusData.


        :param average_coverage_per_radio: The average_coverage_per_radio of this NetworkAdminStatusData.  # noqa: E501
        :type: IntegerPerRadioTypeMap
        """

        self._average_coverage_per_radio = average_coverage_per_radio

    @property
    def equipment_counts_by_severity(self):
        """Gets the equipment_counts_by_severity of this NetworkAdminStatusData.  # noqa: E501


        :return: The equipment_counts_by_severity of this NetworkAdminStatusData.  # noqa: E501
        :rtype: IntegerStatusCodeMap
        """
        return self._equipment_counts_by_severity

    @equipment_counts_by_severity.setter
    def equipment_counts_by_severity(self, equipment_counts_by_severity):
        """Sets the equipment_counts_by_severity of this NetworkAdminStatusData.


        :param equipment_counts_by_severity: The equipment_counts_by_severity of this NetworkAdminStatusData.  # noqa: E501
        :type: IntegerStatusCodeMap
        """

        self._equipment_counts_by_severity = equipment_counts_by_severity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkAdminStatusData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkAdminStatusData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
