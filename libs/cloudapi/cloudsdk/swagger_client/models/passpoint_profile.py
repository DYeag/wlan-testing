# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.profile_details import ProfileDetails  # noqa: F401,E501

class PasspointProfile(ProfileDetails):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_type': 'str',
        'enable_interworking_and_hs20': 'bool',
        'additional_steps_required_for_access': 'int',
        'deauth_request_timeout': 'int',
        'operating_class': 'int',
        'terms_and_conditions_file': 'ManagedFileInfo',
        'whitelist_domain': 'str',
        'emergency_services_reachable': 'bool',
        'unauthenticated_emergency_service_accessible': 'bool',
        'internet_connectivity': 'bool',
        'ip_address_type_availability': 'Object',
        'qos_map_set_configuration': 'list[str]',
        'hessid': 'MacAddress',
        'ap_geospatial_location': 'str',
        'ap_civic_location': 'str',
        'anqp_domain_id': 'int',
        'disable_downstream_group_addressed_forwarding': 'bool',
        'enable2pt4_g_hz': 'bool',
        'enable5_g_hz': 'bool',
        'associated_access_ssid_profile_ids': 'list[int]',
        'osu_ssid_profile_id': 'int',
        'passpoint_operator_profile_id': 'int',
        'passpoint_venue_profile_id': 'int',
        'passpoint_osu_provider_profile_ids': 'list[int]',
        'ap_public_location_id_uri': 'str',
        'access_network_type': 'PasspointAccessNetworkType',
        'network_authentication_type': 'PasspointNetworkAuthenticationType',
        'connection_capability_set': 'list[PasspointConnectionCapability]',
        'gas_addr3_behaviour': 'PasspointGasAddress3Behaviour'
    }
    if hasattr(ProfileDetails, "swagger_types"):
        swagger_types.update(ProfileDetails.swagger_types)

    attribute_map = {
        'model_type': 'model_type',
        'enable_interworking_and_hs20': 'enableInterworkingAndHs20',
        'additional_steps_required_for_access': 'additionalStepsRequiredForAccess',
        'deauth_request_timeout': 'deauthRequestTimeout',
        'operating_class': 'operatingClass',
        'terms_and_conditions_file': 'termsAndConditionsFile',
        'whitelist_domain': 'whitelistDomain',
        'emergency_services_reachable': 'emergencyServicesReachable',
        'unauthenticated_emergency_service_accessible': 'unauthenticatedEmergencyServiceAccessible',
        'internet_connectivity': 'internetConnectivity',
        'ip_address_type_availability': 'ipAddressTypeAvailability',
        'qos_map_set_configuration': 'qosMapSetConfiguration',
        'hessid': 'hessid',
        'ap_geospatial_location': 'apGeospatialLocation',
        'ap_civic_location': 'apCivicLocation',
        'anqp_domain_id': 'anqpDomainId',
        'disable_downstream_group_addressed_forwarding': 'disableDownstreamGroupAddressedForwarding',
        'enable2pt4_g_hz': 'enable2pt4GHz',
        'enable5_g_hz': 'enable5GHz',
        'associated_access_ssid_profile_ids': 'associatedAccessSsidProfileIds',
        'osu_ssid_profile_id': 'osuSsidProfileId',
        'passpoint_operator_profile_id': 'passpointOperatorProfileId',
        'passpoint_venue_profile_id': 'passpointVenueProfileId',
        'passpoint_osu_provider_profile_ids': 'passpointOsuProviderProfileIds',
        'ap_public_location_id_uri': 'apPublicLocationIdUri',
        'access_network_type': 'accessNetworkType',
        'network_authentication_type': 'networkAuthenticationType',
        'connection_capability_set': 'connectionCapabilitySet',
        'gas_addr3_behaviour': 'gasAddr3Behaviour'
    }
    if hasattr(ProfileDetails, "attribute_map"):
        attribute_map.update(ProfileDetails.attribute_map)

    def __init__(self, model_type=None, enable_interworking_and_hs20=None, additional_steps_required_for_access=None, deauth_request_timeout=None, operating_class=None, terms_and_conditions_file=None, whitelist_domain=None, emergency_services_reachable=None, unauthenticated_emergency_service_accessible=None, internet_connectivity=None, ip_address_type_availability=None, qos_map_set_configuration=None, hessid=None, ap_geospatial_location=None, ap_civic_location=None, anqp_domain_id=None, disable_downstream_group_addressed_forwarding=None, enable2pt4_g_hz=None, enable5_g_hz=None, associated_access_ssid_profile_ids=None, osu_ssid_profile_id=None, passpoint_operator_profile_id=None, passpoint_venue_profile_id=None, passpoint_osu_provider_profile_ids=None, ap_public_location_id_uri=None, access_network_type=None, network_authentication_type=None, connection_capability_set=None, gas_addr3_behaviour=None, *args, **kwargs):  # noqa: E501
        """PasspointProfile - a model defined in Swagger"""  # noqa: E501
        self._model_type = None
        self._enable_interworking_and_hs20 = None
        self._additional_steps_required_for_access = None
        self._deauth_request_timeout = None
        self._operating_class = None
        self._terms_and_conditions_file = None
        self._whitelist_domain = None
        self._emergency_services_reachable = None
        self._unauthenticated_emergency_service_accessible = None
        self._internet_connectivity = None
        self._ip_address_type_availability = None
        self._qos_map_set_configuration = None
        self._hessid = None
        self._ap_geospatial_location = None
        self._ap_civic_location = None
        self._anqp_domain_id = None
        self._disable_downstream_group_addressed_forwarding = None
        self._enable2pt4_g_hz = None
        self._enable5_g_hz = None
        self._associated_access_ssid_profile_ids = None
        self._osu_ssid_profile_id = None
        self._passpoint_operator_profile_id = None
        self._passpoint_venue_profile_id = None
        self._passpoint_osu_provider_profile_ids = None
        self._ap_public_location_id_uri = None
        self._access_network_type = None
        self._network_authentication_type = None
        self._connection_capability_set = None
        self._gas_addr3_behaviour = None
        self.discriminator = None
        if model_type is not None:
            self.model_type = model_type
        if enable_interworking_and_hs20 is not None:
            self.enable_interworking_and_hs20 = enable_interworking_and_hs20
        if additional_steps_required_for_access is not None:
            self.additional_steps_required_for_access = additional_steps_required_for_access
        if deauth_request_timeout is not None:
            self.deauth_request_timeout = deauth_request_timeout
        if operating_class is not None:
            self.operating_class = operating_class
        if terms_and_conditions_file is not None:
            self.terms_and_conditions_file = terms_and_conditions_file
        if whitelist_domain is not None:
            self.whitelist_domain = whitelist_domain
        if emergency_services_reachable is not None:
            self.emergency_services_reachable = emergency_services_reachable
        if unauthenticated_emergency_service_accessible is not None:
            self.unauthenticated_emergency_service_accessible = unauthenticated_emergency_service_accessible
        if internet_connectivity is not None:
            self.internet_connectivity = internet_connectivity
        if ip_address_type_availability is not None:
            self.ip_address_type_availability = ip_address_type_availability
        if qos_map_set_configuration is not None:
            self.qos_map_set_configuration = qos_map_set_configuration
        if hessid is not None:
            self.hessid = hessid
        if ap_geospatial_location is not None:
            self.ap_geospatial_location = ap_geospatial_location
        if ap_civic_location is not None:
            self.ap_civic_location = ap_civic_location
        if anqp_domain_id is not None:
            self.anqp_domain_id = anqp_domain_id
        if disable_downstream_group_addressed_forwarding is not None:
            self.disable_downstream_group_addressed_forwarding = disable_downstream_group_addressed_forwarding
        if enable2pt4_g_hz is not None:
            self.enable2pt4_g_hz = enable2pt4_g_hz
        if enable5_g_hz is not None:
            self.enable5_g_hz = enable5_g_hz
        if associated_access_ssid_profile_ids is not None:
            self.associated_access_ssid_profile_ids = associated_access_ssid_profile_ids
        if osu_ssid_profile_id is not None:
            self.osu_ssid_profile_id = osu_ssid_profile_id
        if passpoint_operator_profile_id is not None:
            self.passpoint_operator_profile_id = passpoint_operator_profile_id
        if passpoint_venue_profile_id is not None:
            self.passpoint_venue_profile_id = passpoint_venue_profile_id
        if passpoint_osu_provider_profile_ids is not None:
            self.passpoint_osu_provider_profile_ids = passpoint_osu_provider_profile_ids
        if ap_public_location_id_uri is not None:
            self.ap_public_location_id_uri = ap_public_location_id_uri
        if access_network_type is not None:
            self.access_network_type = access_network_type
        if network_authentication_type is not None:
            self.network_authentication_type = network_authentication_type
        if connection_capability_set is not None:
            self.connection_capability_set = connection_capability_set
        if gas_addr3_behaviour is not None:
            self.gas_addr3_behaviour = gas_addr3_behaviour
        ProfileDetails.__init__(self, *args, **kwargs)

    @property
    def model_type(self):
        """Gets the model_type of this PasspointProfile.  # noqa: E501


        :return: The model_type of this PasspointProfile.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this PasspointProfile.


        :param model_type: The model_type of this PasspointProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["PasspointProfile"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"  # noqa: E501
                .format(model_type, allowed_values)
            )

        self._model_type = model_type

    @property
    def enable_interworking_and_hs20(self):
        """Gets the enable_interworking_and_hs20 of this PasspointProfile.  # noqa: E501


        :return: The enable_interworking_and_hs20 of this PasspointProfile.  # noqa: E501
        :rtype: bool
        """
        return self._enable_interworking_and_hs20

    @enable_interworking_and_hs20.setter
    def enable_interworking_and_hs20(self, enable_interworking_and_hs20):
        """Sets the enable_interworking_and_hs20 of this PasspointProfile.


        :param enable_interworking_and_hs20: The enable_interworking_and_hs20 of this PasspointProfile.  # noqa: E501
        :type: bool
        """

        self._enable_interworking_and_hs20 = enable_interworking_and_hs20

    @property
    def additional_steps_required_for_access(self):
        """Gets the additional_steps_required_for_access of this PasspointProfile.  # noqa: E501


        :return: The additional_steps_required_for_access of this PasspointProfile.  # noqa: E501
        :rtype: int
        """
        return self._additional_steps_required_for_access

    @additional_steps_required_for_access.setter
    def additional_steps_required_for_access(self, additional_steps_required_for_access):
        """Sets the additional_steps_required_for_access of this PasspointProfile.


        :param additional_steps_required_for_access: The additional_steps_required_for_access of this PasspointProfile.  # noqa: E501
        :type: int
        """

        self._additional_steps_required_for_access = additional_steps_required_for_access

    @property
    def deauth_request_timeout(self):
        """Gets the deauth_request_timeout of this PasspointProfile.  # noqa: E501


        :return: The deauth_request_timeout of this PasspointProfile.  # noqa: E501
        :rtype: int
        """
        return self._deauth_request_timeout

    @deauth_request_timeout.setter
    def deauth_request_timeout(self, deauth_request_timeout):
        """Sets the deauth_request_timeout of this PasspointProfile.


        :param deauth_request_timeout: The deauth_request_timeout of this PasspointProfile.  # noqa: E501
        :type: int
        """

        self._deauth_request_timeout = deauth_request_timeout

    @property
    def operating_class(self):
        """Gets the operating_class of this PasspointProfile.  # noqa: E501


        :return: The operating_class of this PasspointProfile.  # noqa: E501
        :rtype: int
        """
        return self._operating_class

    @operating_class.setter
    def operating_class(self, operating_class):
        """Sets the operating_class of this PasspointProfile.


        :param operating_class: The operating_class of this PasspointProfile.  # noqa: E501
        :type: int
        """

        self._operating_class = operating_class

    @property
    def terms_and_conditions_file(self):
        """Gets the terms_and_conditions_file of this PasspointProfile.  # noqa: E501


        :return: The terms_and_conditions_file of this PasspointProfile.  # noqa: E501
        :rtype: ManagedFileInfo
        """
        return self._terms_and_conditions_file

    @terms_and_conditions_file.setter
    def terms_and_conditions_file(self, terms_and_conditions_file):
        """Sets the terms_and_conditions_file of this PasspointProfile.


        :param terms_and_conditions_file: The terms_and_conditions_file of this PasspointProfile.  # noqa: E501
        :type: ManagedFileInfo
        """

        self._terms_and_conditions_file = terms_and_conditions_file

    @property
    def whitelist_domain(self):
        """Gets the whitelist_domain of this PasspointProfile.  # noqa: E501


        :return: The whitelist_domain of this PasspointProfile.  # noqa: E501
        :rtype: str
        """
        return self._whitelist_domain

    @whitelist_domain.setter
    def whitelist_domain(self, whitelist_domain):
        """Sets the whitelist_domain of this PasspointProfile.


        :param whitelist_domain: The whitelist_domain of this PasspointProfile.  # noqa: E501
        :type: str
        """

        self._whitelist_domain = whitelist_domain

    @property
    def emergency_services_reachable(self):
        """Gets the emergency_services_reachable of this PasspointProfile.  # noqa: E501


        :return: The emergency_services_reachable of this PasspointProfile.  # noqa: E501
        :rtype: bool
        """
        return self._emergency_services_reachable

    @emergency_services_reachable.setter
    def emergency_services_reachable(self, emergency_services_reachable):
        """Sets the emergency_services_reachable of this PasspointProfile.


        :param emergency_services_reachable: The emergency_services_reachable of this PasspointProfile.  # noqa: E501
        :type: bool
        """

        self._emergency_services_reachable = emergency_services_reachable

    @property
    def unauthenticated_emergency_service_accessible(self):
        """Gets the unauthenticated_emergency_service_accessible of this PasspointProfile.  # noqa: E501


        :return: The unauthenticated_emergency_service_accessible of this PasspointProfile.  # noqa: E501
        :rtype: bool
        """
        return self._unauthenticated_emergency_service_accessible

    @unauthenticated_emergency_service_accessible.setter
    def unauthenticated_emergency_service_accessible(self, unauthenticated_emergency_service_accessible):
        """Sets the unauthenticated_emergency_service_accessible of this PasspointProfile.


        :param unauthenticated_emergency_service_accessible: The unauthenticated_emergency_service_accessible of this PasspointProfile.  # noqa: E501
        :type: bool
        """

        self._unauthenticated_emergency_service_accessible = unauthenticated_emergency_service_accessible

    @property
    def internet_connectivity(self):
        """Gets the internet_connectivity of this PasspointProfile.  # noqa: E501


        :return: The internet_connectivity of this PasspointProfile.  # noqa: E501
        :rtype: bool
        """
        return self._internet_connectivity

    @internet_connectivity.setter
    def internet_connectivity(self, internet_connectivity):
        """Sets the internet_connectivity of this PasspointProfile.


        :param internet_connectivity: The internet_connectivity of this PasspointProfile.  # noqa: E501
        :type: bool
        """

        self._internet_connectivity = internet_connectivity

    @property
    def ip_address_type_availability(self):
        """Gets the ip_address_type_availability of this PasspointProfile.  # noqa: E501


        :return: The ip_address_type_availability of this PasspointProfile.  # noqa: E501
        :rtype: Object
        """
        return self._ip_address_type_availability

    @ip_address_type_availability.setter
    def ip_address_type_availability(self, ip_address_type_availability):
        """Sets the ip_address_type_availability of this PasspointProfile.


        :param ip_address_type_availability: The ip_address_type_availability of this PasspointProfile.  # noqa: E501
        :type: Object
        """

        self._ip_address_type_availability = ip_address_type_availability

    @property
    def qos_map_set_configuration(self):
        """Gets the qos_map_set_configuration of this PasspointProfile.  # noqa: E501


        :return: The qos_map_set_configuration of this PasspointProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._qos_map_set_configuration

    @qos_map_set_configuration.setter
    def qos_map_set_configuration(self, qos_map_set_configuration):
        """Sets the qos_map_set_configuration of this PasspointProfile.


        :param qos_map_set_configuration: The qos_map_set_configuration of this PasspointProfile.  # noqa: E501
        :type: list[str]
        """

        self._qos_map_set_configuration = qos_map_set_configuration

    @property
    def hessid(self):
        """Gets the hessid of this PasspointProfile.  # noqa: E501


        :return: The hessid of this PasspointProfile.  # noqa: E501
        :rtype: MacAddress
        """
        return self._hessid

    @hessid.setter
    def hessid(self, hessid):
        """Sets the hessid of this PasspointProfile.


        :param hessid: The hessid of this PasspointProfile.  # noqa: E501
        :type: MacAddress
        """

        self._hessid = hessid

    @property
    def ap_geospatial_location(self):
        """Gets the ap_geospatial_location of this PasspointProfile.  # noqa: E501


        :return: The ap_geospatial_location of this PasspointProfile.  # noqa: E501
        :rtype: str
        """
        return self._ap_geospatial_location

    @ap_geospatial_location.setter
    def ap_geospatial_location(self, ap_geospatial_location):
        """Sets the ap_geospatial_location of this PasspointProfile.


        :param ap_geospatial_location: The ap_geospatial_location of this PasspointProfile.  # noqa: E501
        :type: str
        """

        self._ap_geospatial_location = ap_geospatial_location

    @property
    def ap_civic_location(self):
        """Gets the ap_civic_location of this PasspointProfile.  # noqa: E501


        :return: The ap_civic_location of this PasspointProfile.  # noqa: E501
        :rtype: str
        """
        return self._ap_civic_location

    @ap_civic_location.setter
    def ap_civic_location(self, ap_civic_location):
        """Sets the ap_civic_location of this PasspointProfile.


        :param ap_civic_location: The ap_civic_location of this PasspointProfile.  # noqa: E501
        :type: str
        """

        self._ap_civic_location = ap_civic_location

    @property
    def anqp_domain_id(self):
        """Gets the anqp_domain_id of this PasspointProfile.  # noqa: E501


        :return: The anqp_domain_id of this PasspointProfile.  # noqa: E501
        :rtype: int
        """
        return self._anqp_domain_id

    @anqp_domain_id.setter
    def anqp_domain_id(self, anqp_domain_id):
        """Sets the anqp_domain_id of this PasspointProfile.


        :param anqp_domain_id: The anqp_domain_id of this PasspointProfile.  # noqa: E501
        :type: int
        """

        self._anqp_domain_id = anqp_domain_id

    @property
    def disable_downstream_group_addressed_forwarding(self):
        """Gets the disable_downstream_group_addressed_forwarding of this PasspointProfile.  # noqa: E501


        :return: The disable_downstream_group_addressed_forwarding of this PasspointProfile.  # noqa: E501
        :rtype: bool
        """
        return self._disable_downstream_group_addressed_forwarding

    @disable_downstream_group_addressed_forwarding.setter
    def disable_downstream_group_addressed_forwarding(self, disable_downstream_group_addressed_forwarding):
        """Sets the disable_downstream_group_addressed_forwarding of this PasspointProfile.


        :param disable_downstream_group_addressed_forwarding: The disable_downstream_group_addressed_forwarding of this PasspointProfile.  # noqa: E501
        :type: bool
        """

        self._disable_downstream_group_addressed_forwarding = disable_downstream_group_addressed_forwarding

    @property
    def enable2pt4_g_hz(self):
        """Gets the enable2pt4_g_hz of this PasspointProfile.  # noqa: E501


        :return: The enable2pt4_g_hz of this PasspointProfile.  # noqa: E501
        :rtype: bool
        """
        return self._enable2pt4_g_hz

    @enable2pt4_g_hz.setter
    def enable2pt4_g_hz(self, enable2pt4_g_hz):
        """Sets the enable2pt4_g_hz of this PasspointProfile.


        :param enable2pt4_g_hz: The enable2pt4_g_hz of this PasspointProfile.  # noqa: E501
        :type: bool
        """

        self._enable2pt4_g_hz = enable2pt4_g_hz

    @property
    def enable5_g_hz(self):
        """Gets the enable5_g_hz of this PasspointProfile.  # noqa: E501


        :return: The enable5_g_hz of this PasspointProfile.  # noqa: E501
        :rtype: bool
        """
        return self._enable5_g_hz

    @enable5_g_hz.setter
    def enable5_g_hz(self, enable5_g_hz):
        """Sets the enable5_g_hz of this PasspointProfile.


        :param enable5_g_hz: The enable5_g_hz of this PasspointProfile.  # noqa: E501
        :type: bool
        """

        self._enable5_g_hz = enable5_g_hz

    @property
    def associated_access_ssid_profile_ids(self):
        """Gets the associated_access_ssid_profile_ids of this PasspointProfile.  # noqa: E501


        :return: The associated_access_ssid_profile_ids of this PasspointProfile.  # noqa: E501
        :rtype: list[int]
        """
        return self._associated_access_ssid_profile_ids

    @associated_access_ssid_profile_ids.setter
    def associated_access_ssid_profile_ids(self, associated_access_ssid_profile_ids):
        """Sets the associated_access_ssid_profile_ids of this PasspointProfile.


        :param associated_access_ssid_profile_ids: The associated_access_ssid_profile_ids of this PasspointProfile.  # noqa: E501
        :type: list[int]
        """

        self._associated_access_ssid_profile_ids = associated_access_ssid_profile_ids

    @property
    def osu_ssid_profile_id(self):
        """Gets the osu_ssid_profile_id of this PasspointProfile.  # noqa: E501


        :return: The osu_ssid_profile_id of this PasspointProfile.  # noqa: E501
        :rtype: int
        """
        return self._osu_ssid_profile_id

    @osu_ssid_profile_id.setter
    def osu_ssid_profile_id(self, osu_ssid_profile_id):
        """Sets the osu_ssid_profile_id of this PasspointProfile.


        :param osu_ssid_profile_id: The osu_ssid_profile_id of this PasspointProfile.  # noqa: E501
        :type: int
        """

        self._osu_ssid_profile_id = osu_ssid_profile_id

    @property
    def passpoint_operator_profile_id(self):
        """Gets the passpoint_operator_profile_id of this PasspointProfile.  # noqa: E501

        Profile Id of a PasspointOperatorProfile profile, must be also added to the children of this profile  # noqa: E501

        :return: The passpoint_operator_profile_id of this PasspointProfile.  # noqa: E501
        :rtype: int
        """
        return self._passpoint_operator_profile_id

    @passpoint_operator_profile_id.setter
    def passpoint_operator_profile_id(self, passpoint_operator_profile_id):
        """Sets the passpoint_operator_profile_id of this PasspointProfile.

        Profile Id of a PasspointOperatorProfile profile, must be also added to the children of this profile  # noqa: E501

        :param passpoint_operator_profile_id: The passpoint_operator_profile_id of this PasspointProfile.  # noqa: E501
        :type: int
        """

        self._passpoint_operator_profile_id = passpoint_operator_profile_id

    @property
    def passpoint_venue_profile_id(self):
        """Gets the passpoint_venue_profile_id of this PasspointProfile.  # noqa: E501

        Profile Id of a PasspointVenueProfile profile, must be also added to the children of this profile  # noqa: E501

        :return: The passpoint_venue_profile_id of this PasspointProfile.  # noqa: E501
        :rtype: int
        """
        return self._passpoint_venue_profile_id

    @passpoint_venue_profile_id.setter
    def passpoint_venue_profile_id(self, passpoint_venue_profile_id):
        """Sets the passpoint_venue_profile_id of this PasspointProfile.

        Profile Id of a PasspointVenueProfile profile, must be also added to the children of this profile  # noqa: E501

        :param passpoint_venue_profile_id: The passpoint_venue_profile_id of this PasspointProfile.  # noqa: E501
        :type: int
        """

        self._passpoint_venue_profile_id = passpoint_venue_profile_id

    @property
    def passpoint_osu_provider_profile_ids(self):
        """Gets the passpoint_osu_provider_profile_ids of this PasspointProfile.  # noqa: E501

        array containing Profile Ids of PasspointOsuProviderProfiles, must be also added to the children of this profile  # noqa: E501

        :return: The passpoint_osu_provider_profile_ids of this PasspointProfile.  # noqa: E501
        :rtype: list[int]
        """
        return self._passpoint_osu_provider_profile_ids

    @passpoint_osu_provider_profile_ids.setter
    def passpoint_osu_provider_profile_ids(self, passpoint_osu_provider_profile_ids):
        """Sets the passpoint_osu_provider_profile_ids of this PasspointProfile.

        array containing Profile Ids of PasspointOsuProviderProfiles, must be also added to the children of this profile  # noqa: E501

        :param passpoint_osu_provider_profile_ids: The passpoint_osu_provider_profile_ids of this PasspointProfile.  # noqa: E501
        :type: list[int]
        """

        self._passpoint_osu_provider_profile_ids = passpoint_osu_provider_profile_ids

    @property
    def ap_public_location_id_uri(self):
        """Gets the ap_public_location_id_uri of this PasspointProfile.  # noqa: E501


        :return: The ap_public_location_id_uri of this PasspointProfile.  # noqa: E501
        :rtype: str
        """
        return self._ap_public_location_id_uri

    @ap_public_location_id_uri.setter
    def ap_public_location_id_uri(self, ap_public_location_id_uri):
        """Sets the ap_public_location_id_uri of this PasspointProfile.


        :param ap_public_location_id_uri: The ap_public_location_id_uri of this PasspointProfile.  # noqa: E501
        :type: str
        """

        self._ap_public_location_id_uri = ap_public_location_id_uri

    @property
    def access_network_type(self):
        """Gets the access_network_type of this PasspointProfile.  # noqa: E501


        :return: The access_network_type of this PasspointProfile.  # noqa: E501
        :rtype: PasspointAccessNetworkType
        """
        return self._access_network_type

    @access_network_type.setter
    def access_network_type(self, access_network_type):
        """Sets the access_network_type of this PasspointProfile.


        :param access_network_type: The access_network_type of this PasspointProfile.  # noqa: E501
        :type: PasspointAccessNetworkType
        """

        self._access_network_type = access_network_type

    @property
    def network_authentication_type(self):
        """Gets the network_authentication_type of this PasspointProfile.  # noqa: E501


        :return: The network_authentication_type of this PasspointProfile.  # noqa: E501
        :rtype: PasspointNetworkAuthenticationType
        """
        return self._network_authentication_type

    @network_authentication_type.setter
    def network_authentication_type(self, network_authentication_type):
        """Sets the network_authentication_type of this PasspointProfile.


        :param network_authentication_type: The network_authentication_type of this PasspointProfile.  # noqa: E501
        :type: PasspointNetworkAuthenticationType
        """

        self._network_authentication_type = network_authentication_type

    @property
    def connection_capability_set(self):
        """Gets the connection_capability_set of this PasspointProfile.  # noqa: E501


        :return: The connection_capability_set of this PasspointProfile.  # noqa: E501
        :rtype: list[PasspointConnectionCapability]
        """
        return self._connection_capability_set

    @connection_capability_set.setter
    def connection_capability_set(self, connection_capability_set):
        """Sets the connection_capability_set of this PasspointProfile.


        :param connection_capability_set: The connection_capability_set of this PasspointProfile.  # noqa: E501
        :type: list[PasspointConnectionCapability]
        """

        self._connection_capability_set = connection_capability_set

    @property
    def gas_addr3_behaviour(self):
        """Gets the gas_addr3_behaviour of this PasspointProfile.  # noqa: E501


        :return: The gas_addr3_behaviour of this PasspointProfile.  # noqa: E501
        :rtype: PasspointGasAddress3Behaviour
        """
        return self._gas_addr3_behaviour

    @gas_addr3_behaviour.setter
    def gas_addr3_behaviour(self, gas_addr3_behaviour):
        """Sets the gas_addr3_behaviour of this PasspointProfile.


        :param gas_addr3_behaviour: The gas_addr3_behaviour of this PasspointProfile.  # noqa: E501
        :type: PasspointGasAddress3Behaviour
        """

        self._gas_addr3_behaviour = gas_addr3_behaviour

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PasspointProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PasspointProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
