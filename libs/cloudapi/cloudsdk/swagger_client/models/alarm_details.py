# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AlarmDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'affected_equipment_ids': 'list[int]',
        'generated_by': 'str',
        'context_attrs': 'AlarmDetailsAttributesMap'
    }

    attribute_map = {
        'message': 'message',
        'affected_equipment_ids': 'affectedEquipmentIds',
        'generated_by': 'generatedBy',
        'context_attrs': 'contextAttrs'
    }

    def __init__(self, message=None, affected_equipment_ids=None, generated_by=None, context_attrs=None):  # noqa: E501
        """AlarmDetails - a model defined in Swagger"""  # noqa: E501
        self._message = None
        self._affected_equipment_ids = None
        self._generated_by = None
        self._context_attrs = None
        self.discriminator = None
        if message is not None:
            self.message = message
        if affected_equipment_ids is not None:
            self.affected_equipment_ids = affected_equipment_ids
        if generated_by is not None:
            self.generated_by = generated_by
        if context_attrs is not None:
            self.context_attrs = context_attrs

    @property
    def message(self):
        """Gets the message of this AlarmDetails.  # noqa: E501


        :return: The message of this AlarmDetails.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AlarmDetails.


        :param message: The message of this AlarmDetails.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def affected_equipment_ids(self):
        """Gets the affected_equipment_ids of this AlarmDetails.  # noqa: E501


        :return: The affected_equipment_ids of this AlarmDetails.  # noqa: E501
        :rtype: list[int]
        """
        return self._affected_equipment_ids

    @affected_equipment_ids.setter
    def affected_equipment_ids(self, affected_equipment_ids):
        """Sets the affected_equipment_ids of this AlarmDetails.


        :param affected_equipment_ids: The affected_equipment_ids of this AlarmDetails.  # noqa: E501
        :type: list[int]
        """

        self._affected_equipment_ids = affected_equipment_ids

    @property
    def generated_by(self):
        """Gets the generated_by of this AlarmDetails.  # noqa: E501


        :return: The generated_by of this AlarmDetails.  # noqa: E501
        :rtype: str
        """
        return self._generated_by

    @generated_by.setter
    def generated_by(self, generated_by):
        """Sets the generated_by of this AlarmDetails.


        :param generated_by: The generated_by of this AlarmDetails.  # noqa: E501
        :type: str
        """

        self._generated_by = generated_by

    @property
    def context_attrs(self):
        """Gets the context_attrs of this AlarmDetails.  # noqa: E501


        :return: The context_attrs of this AlarmDetails.  # noqa: E501
        :rtype: AlarmDetailsAttributesMap
        """
        return self._context_attrs

    @context_attrs.setter
    def context_attrs(self, context_attrs):
        """Sets the context_attrs of this AlarmDetails.


        :param context_attrs: The context_attrs of this AlarmDetails.  # noqa: E501
        :type: AlarmDetailsAttributesMap
        """

        self._context_attrs = context_attrs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlarmDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlarmDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
