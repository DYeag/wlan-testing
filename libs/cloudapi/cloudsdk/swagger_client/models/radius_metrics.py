# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RadiusMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'server_ip': 'str',
        'number_of_no_answer': 'int',
        'latency_ms': 'MinMaxAvgValueInt'
    }

    attribute_map = {
        'server_ip': 'serverIp',
        'number_of_no_answer': 'numberOfNoAnswer',
        'latency_ms': 'latencyMs'
    }

    def __init__(self, server_ip=None, number_of_no_answer=None, latency_ms=None):  # noqa: E501
        """RadiusMetrics - a model defined in Swagger"""  # noqa: E501
        self._server_ip = None
        self._number_of_no_answer = None
        self._latency_ms = None
        self.discriminator = None
        if server_ip is not None:
            self.server_ip = server_ip
        if number_of_no_answer is not None:
            self.number_of_no_answer = number_of_no_answer
        if latency_ms is not None:
            self.latency_ms = latency_ms

    @property
    def server_ip(self):
        """Gets the server_ip of this RadiusMetrics.  # noqa: E501


        :return: The server_ip of this RadiusMetrics.  # noqa: E501
        :rtype: str
        """
        return self._server_ip

    @server_ip.setter
    def server_ip(self, server_ip):
        """Sets the server_ip of this RadiusMetrics.


        :param server_ip: The server_ip of this RadiusMetrics.  # noqa: E501
        :type: str
        """

        self._server_ip = server_ip

    @property
    def number_of_no_answer(self):
        """Gets the number_of_no_answer of this RadiusMetrics.  # noqa: E501


        :return: The number_of_no_answer of this RadiusMetrics.  # noqa: E501
        :rtype: int
        """
        return self._number_of_no_answer

    @number_of_no_answer.setter
    def number_of_no_answer(self, number_of_no_answer):
        """Sets the number_of_no_answer of this RadiusMetrics.


        :param number_of_no_answer: The number_of_no_answer of this RadiusMetrics.  # noqa: E501
        :type: int
        """

        self._number_of_no_answer = number_of_no_answer

    @property
    def latency_ms(self):
        """Gets the latency_ms of this RadiusMetrics.  # noqa: E501


        :return: The latency_ms of this RadiusMetrics.  # noqa: E501
        :rtype: MinMaxAvgValueInt
        """
        return self._latency_ms

    @latency_ms.setter
    def latency_ms(self, latency_ms):
        """Sets the latency_ms of this RadiusMetrics.


        :param latency_ms: The latency_ms of this RadiusMetrics.  # noqa: E501
        :type: MinMaxAvgValueInt
        """

        self._latency_ms = latency_ms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RadiusMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RadiusMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
