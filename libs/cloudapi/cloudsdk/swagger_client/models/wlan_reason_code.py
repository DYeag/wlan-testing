# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WlanReasonCode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    WLAN_REASON_UNSPECIFIED = "WLAN_REASON_UNSPECIFIED"
    WLAN_REASON_PREV_AUTH_NOT_VALID = "WLAN_REASON_PREV_AUTH_NOT_VALID"
    WLAN_REASON_DEAUTH_LEAVING = "WLAN_REASON_DEAUTH_LEAVING"
    WLAN_REASON_DISASSOC_DUE_TO_INACTIVITY = "WLAN_REASON_DISASSOC_DUE_TO_INACTIVITY"
    WLAN_REASON_DISASSOC_AP_BUSY = "WLAN_REASON_DISASSOC_AP_BUSY"
    WLAN_REASON_CLASS2_FRAME_FROM_NONAUTH_STA = "WLAN_REASON_CLASS2_FRAME_FROM_NONAUTH_STA"
    WLAN_REASON_CLASS3_FRAME_FROM_NONASSOC_STA = "WLAN_REASON_CLASS3_FRAME_FROM_NONASSOC_STA"
    WLAN_REASON_DISASSOC_STA_HAS_LEFT = "WLAN_REASON_DISASSOC_STA_HAS_LEFT"
    WLAN_REASON_STA_REQ_ASSOC_WITHOUT_AUTH = "WLAN_REASON_STA_REQ_ASSOC_WITHOUT_AUTH"
    WLAN_REASON_PWR_CAPABILITY_NOT_VALID = "WLAN_REASON_PWR_CAPABILITY_NOT_VALID"
    WLAN_REASON_SUPPORTED_CHANNEL_NOT_VALID = "WLAN_REASON_SUPPORTED_CHANNEL_NOT_VALID"
    WLAN_REASON_BSS_TRANSITION_DISASSOC = "WLAN_REASON_BSS_TRANSITION_DISASSOC"
    WLAN_REASON_INVALID_IE = "WLAN_REASON_INVALID_IE"
    WLAN_REASON_MICHAEL_MIC_FAILURE = "WLAN_REASON_MICHAEL_MIC_FAILURE"
    WLAN_REASON_4WAY_HANDSHAKE_TIMEOUT = "WLAN_REASON_4WAY_HANDSHAKE_TIMEOUT"
    WLAN_REASON_GROUP_KEY_UPDATE_TIMEOUT = "WLAN_REASON_GROUP_KEY_UPDATE_TIMEOUT"
    WLAN_REASON_IE_IN_4WAY_DIFFERS = "WLAN_REASON_IE_IN_4WAY_DIFFERS"
    WLAN_REASON_GROUP_CIPHER_NOT_VALID = "WLAN_REASON_GROUP_CIPHER_NOT_VALID"
    WLAN_REASON_PAIRWISE_CIPHER_NOT_VALID = "WLAN_REASON_PAIRWISE_CIPHER_NOT_VALID"
    WLAN_REASON_AKMP_NOT_VALID = "WLAN_REASON_AKMP_NOT_VALID"
    WLAN_REASON_UNSUPPORTED_RSN_IE_VERSION = "WLAN_REASON_UNSUPPORTED_RSN_IE_VERSION"
    WLAN_REASON_INVALID_RSN_IE_CAPAB = "WLAN_REASON_INVALID_RSN_IE_CAPAB"
    WLAN_REASON_IEEE_802_1X_AUTH_FAILED = "WLAN_REASON_IEEE_802_1X_AUTH_FAILED"
    WLAN_REASON_CIPHER_SUITE_REJECTED = "WLAN_REASON_CIPHER_SUITE_REJECTED"
    WLAN_REASON_TDLS_TEARDOWN_UNREACHABLE = "WLAN_REASON_TDLS_TEARDOWN_UNREACHABLE"
    WLAN_REASON_TDLS_TEARDOWN_UNSPECIFIED = "WLAN_REASON_TDLS_TEARDOWN_UNSPECIFIED"
    WLAN_REASON_SSP_REQUESTED_DISASSOC = "WLAN_REASON_SSP_REQUESTED_DISASSOC"
    WLAN_REASON_NO_SSP_ROAMING_AGREEMENT = "WLAN_REASON_NO_SSP_ROAMING_AGREEMENT"
    WLAN_REASON_BAD_CIPHER_OR_AKM = "WLAN_REASON_BAD_CIPHER_OR_AKM"
    WLAN_REASON_NOT_AUTHORIZED_THIS_LOCATION = "WLAN_REASON_NOT_AUTHORIZED_THIS_LOCATION"
    WLAN_REASON_SERVICE_CHANGE_PRECLUDES_TS = "WLAN_REASON_SERVICE_CHANGE_PRECLUDES_TS"
    WLAN_REASON_UNSPECIFIED_QOS_REASON = "WLAN_REASON_UNSPECIFIED_QOS_REASON"
    WLAN_REASON_NOT_ENOUGH_BANDWIDTH = "WLAN_REASON_NOT_ENOUGH_BANDWIDTH"
    WLAN_REASON_DISASSOC_LOW_ACK = "WLAN_REASON_DISASSOC_LOW_ACK"
    WLAN_REASON_EXCEEDED_TXOP = "WLAN_REASON_EXCEEDED_TXOP"
    WLAN_REASON_STA_LEAVING = "WLAN_REASON_STA_LEAVING"
    WLAN_REASON_END_TS_BA_DLS = "WLAN_REASON_END_TS_BA_DLS"
    WLAN_REASON_UNKNOWN_TS_BA = "WLAN_REASON_UNKNOWN_TS_BA"
    WLAN_REASON_TIMEOUT = "WLAN_REASON_TIMEOUT"
    WLAN_REASON_PEERKEY_MISMATCH = "WLAN_REASON_PEERKEY_MISMATCH"
    WLAN_REASON_AUTHORIZED_ACCESS_LIMIT_REACHED = "WLAN_REASON_AUTHORIZED_ACCESS_LIMIT_REACHED"
    WLAN_REASON_EXTERNAL_SERVICE_REQUIREMENTS = "WLAN_REASON_EXTERNAL_SERVICE_REQUIREMENTS"
    WLAN_REASON_INVALID_FT_ACTION_FRAME_COUNT = "WLAN_REASON_INVALID_FT_ACTION_FRAME_COUNT"
    WLAN_REASON_INVALID_PMKID = "WLAN_REASON_INVALID_PMKID"
    WLAN_REASON_INVALID_MDE = "WLAN_REASON_INVALID_MDE"
    WLAN_REASON_INVALID_FTE = "WLAN_REASON_INVALID_FTE"
    WLAN_REASON_MESH_PEERING_CANCELLED = "WLAN_REASON_MESH_PEERING_CANCELLED"
    WLAN_REASON_MESH_MAX_PEERS = "WLAN_REASON_MESH_MAX_PEERS"
    WLAN_REASON_MESH_CONFIG_POLICY_VIOLATION = "WLAN_REASON_MESH_CONFIG_POLICY_VIOLATION"
    WLAN_REASON_MESH_CLOSE_RCVD = "WLAN_REASON_MESH_CLOSE_RCVD"
    WLAN_REASON_MESH_MAX_RETRIES = "WLAN_REASON_MESH_MAX_RETRIES"
    WLAN_REASON_MESH_CONFIRM_TIMEOUT = "WLAN_REASON_MESH_CONFIRM_TIMEOUT"
    WLAN_REASON_MESH_INVALID_GTK = "WLAN_REASON_MESH_INVALID_GTK"
    WLAN_REASON_MESH_INCONSISTENT_PARAMS = "WLAN_REASON_MESH_INCONSISTENT_PARAMS"
    WLAN_REASON_MESH_INVALID_SECURITY_CAP = "WLAN_REASON_MESH_INVALID_SECURITY_CAP"
    WLAN_REASON_MESH_PATH_ERROR_NO_PROXY_INFO = "WLAN_REASON_MESH_PATH_ERROR_NO_PROXY_INFO"
    WLAN_REASON_MESH_PATH_ERROR_NO_FORWARDING_INFO = "WLAN_REASON_MESH_PATH_ERROR_NO_FORWARDING_INFO"
    WLAN_REASON_MESH_PATH_ERROR_DEST_UNREACHABLE = "WLAN_REASON_MESH_PATH_ERROR_DEST_UNREACHABLE"
    WLAN_REASON_MAC_ADDRESS_ALREADY_EXISTS_IN_MBSS = "WLAN_REASON_MAC_ADDRESS_ALREADY_EXISTS_IN_MBSS"
    WLAN_REASON_MESH_CHANNEL_SWITCH_REGULATORY_REQ = "WLAN_REASON_MESH_CHANNEL_SWITCH_REGULATORY_REQ"
    WLAN_REASON_MESH_CHANNEL_SWITCH_UNSPECIFIED = "WLAN_REASON_MESH_CHANNEL_SWITCH_UNSPECIFIED"
    UNSUPPORTED = "UNSUPPORTED"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """WlanReasonCode - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WlanReasonCode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WlanReasonCode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
