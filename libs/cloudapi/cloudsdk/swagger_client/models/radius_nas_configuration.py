# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RadiusNasConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nas_client_id': 'str',
        'nas_client_ip': 'str',
        'user_defined_nas_id': 'str',
        'user_defined_nas_ip': 'str',
        'operator_id': 'str'
    }

    attribute_map = {
        'nas_client_id': 'nasClientId',
        'nas_client_ip': 'nasClientIp',
        'user_defined_nas_id': 'userDefinedNasId',
        'user_defined_nas_ip': 'userDefinedNasIp',
        'operator_id': 'operatorId'
    }

    def __init__(self, nas_client_id='DEFAULT', nas_client_ip='WAN_IP', user_defined_nas_id=None, user_defined_nas_ip=None, operator_id=None):  # noqa: E501
        """RadiusNasConfiguration - a model defined in Swagger"""  # noqa: E501
        self._nas_client_id = None
        self._nas_client_ip = None
        self._user_defined_nas_id = None
        self._user_defined_nas_ip = None
        self._operator_id = None
        self.discriminator = None
        if nas_client_id is not None:
            self.nas_client_id = nas_client_id
        if nas_client_ip is not None:
            self.nas_client_ip = nas_client_ip
        if user_defined_nas_id is not None:
            self.user_defined_nas_id = user_defined_nas_id
        if user_defined_nas_ip is not None:
            self.user_defined_nas_ip = user_defined_nas_ip
        if operator_id is not None:
            self.operator_id = operator_id

    @property
    def nas_client_id(self):
        """Gets the nas_client_id of this RadiusNasConfiguration.  # noqa: E501

        String identifying the NAS (AP) – Default shall be set to the AP BASE MAC Address for the WAN Interface  # noqa: E501

        :return: The nas_client_id of this RadiusNasConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._nas_client_id

    @nas_client_id.setter
    def nas_client_id(self, nas_client_id):
        """Sets the nas_client_id of this RadiusNasConfiguration.

        String identifying the NAS (AP) – Default shall be set to the AP BASE MAC Address for the WAN Interface  # noqa: E501

        :param nas_client_id: The nas_client_id of this RadiusNasConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEFAULT", "USER_DEFINED"]  # noqa: E501
        if nas_client_id not in allowed_values:
            raise ValueError(
                "Invalid value for `nas_client_id` ({0}), must be one of {1}"  # noqa: E501
                .format(nas_client_id, allowed_values)
            )

        self._nas_client_id = nas_client_id

    @property
    def nas_client_ip(self):
        """Gets the nas_client_ip of this RadiusNasConfiguration.  # noqa: E501

        NAS-IP AVP - Default it shall be the WAN IP address of the AP when AP communicates with RADIUS server directly.  # noqa: E501

        :return: The nas_client_ip of this RadiusNasConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._nas_client_ip

    @nas_client_ip.setter
    def nas_client_ip(self, nas_client_ip):
        """Sets the nas_client_ip of this RadiusNasConfiguration.

        NAS-IP AVP - Default it shall be the WAN IP address of the AP when AP communicates with RADIUS server directly.  # noqa: E501

        :param nas_client_ip: The nas_client_ip of this RadiusNasConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["USER_DEFINED", "WAN_IP", "PROXY_IP"]  # noqa: E501
        if nas_client_ip not in allowed_values:
            raise ValueError(
                "Invalid value for `nas_client_ip` ({0}), must be one of {1}"  # noqa: E501
                .format(nas_client_ip, allowed_values)
            )

        self._nas_client_ip = nas_client_ip

    @property
    def user_defined_nas_id(self):
        """Gets the user_defined_nas_id of this RadiusNasConfiguration.  # noqa: E501

        user entered string if the nasClientId is 'USER_DEFINED'. This should not be enabled and will not be passed to the AP unless the nasClientId is USER_DEFINED.  # noqa: E501

        :return: The user_defined_nas_id of this RadiusNasConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._user_defined_nas_id

    @user_defined_nas_id.setter
    def user_defined_nas_id(self, user_defined_nas_id):
        """Sets the user_defined_nas_id of this RadiusNasConfiguration.

        user entered string if the nasClientId is 'USER_DEFINED'. This should not be enabled and will not be passed to the AP unless the nasClientId is USER_DEFINED.  # noqa: E501

        :param user_defined_nas_id: The user_defined_nas_id of this RadiusNasConfiguration.  # noqa: E501
        :type: str
        """

        self._user_defined_nas_id = user_defined_nas_id

    @property
    def user_defined_nas_ip(self):
        """Gets the user_defined_nas_ip of this RadiusNasConfiguration.  # noqa: E501

        user entered IP address if the nasClientIp is 'USER_DEFINED'.  This should not be enabled and will not be passed to the AP unless the nasClientIp is USER_DEFINED.  # noqa: E501

        :return: The user_defined_nas_ip of this RadiusNasConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._user_defined_nas_ip

    @user_defined_nas_ip.setter
    def user_defined_nas_ip(self, user_defined_nas_ip):
        """Sets the user_defined_nas_ip of this RadiusNasConfiguration.

        user entered IP address if the nasClientIp is 'USER_DEFINED'.  This should not be enabled and will not be passed to the AP unless the nasClientIp is USER_DEFINED.  # noqa: E501

        :param user_defined_nas_ip: The user_defined_nas_ip of this RadiusNasConfiguration.  # noqa: E501
        :type: str
        """

        self._user_defined_nas_ip = user_defined_nas_ip

    @property
    def operator_id(self):
        """Gets the operator_id of this RadiusNasConfiguration.  # noqa: E501

        Carries the operator namespace identifier and the operator name.  The operator name is combined with the namespace identifier to uniquely identify the owner of an access network.  The value of the Operator-Name is a non-NULL terminated text. This is not to be confused with the Passpoint Operator Domain  # noqa: E501

        :return: The operator_id of this RadiusNasConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._operator_id

    @operator_id.setter
    def operator_id(self, operator_id):
        """Sets the operator_id of this RadiusNasConfiguration.

        Carries the operator namespace identifier and the operator name.  The operator name is combined with the namespace identifier to uniquely identify the owner of an access network.  The value of the Operator-Name is a non-NULL terminated text. This is not to be confused with the Passpoint Operator Domain  # noqa: E501

        :param operator_id: The operator_id of this RadiusNasConfiguration.  # noqa: E501
        :type: str
        """

        self._operator_id = operator_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RadiusNasConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RadiusNasConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
