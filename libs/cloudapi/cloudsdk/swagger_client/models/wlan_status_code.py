# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WlanStatusCode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    WLAN_STATUS_SUCCESS = "WLAN_STATUS_SUCCESS"
    WLAN_STATUS_UNSPECIFIED_FAILURE = "WLAN_STATUS_UNSPECIFIED_FAILURE"
    WLAN_STATUS_TDLS_WAKEUP_ALTERNATE = "WLAN_STATUS_TDLS_WAKEUP_ALTERNATE"
    WLAN_STATUS_TDLS_WAKEUP_REJECT = "WLAN_STATUS_TDLS_WAKEUP_REJECT"
    WLAN_STATUS_SECURITY_DISABLED = "WLAN_STATUS_SECURITY_DISABLED"
    WLAN_STATUS_UNACCEPTABLE_LIFETIME = "WLAN_STATUS_UNACCEPTABLE_LIFETIME"
    WLAN_STATUS_NOT_IN_SAME_BSS = "WLAN_STATUS_NOT_IN_SAME_BSS"
    WLAN_STATUS_CAPS_UNSUPPORTED = "WLAN_STATUS_CAPS_UNSUPPORTED"
    WLAN_STATUS_REASSOC_NO_ASSOC = "WLAN_STATUS_REASSOC_NO_ASSOC"
    WLAN_STATUS_ASSOC_DENIED_UNSPEC = "WLAN_STATUS_ASSOC_DENIED_UNSPEC"
    WLAN_STATUS_NOT_SUPPORTED_AUTH_ALG = "WLAN_STATUS_NOT_SUPPORTED_AUTH_ALG"
    WLAN_STATUS_UNKNOWN_AUTH_TRANSACTION = "WLAN_STATUS_UNKNOWN_AUTH_TRANSACTION"
    WLAN_STATUS_CHALLENGE_FAIL = "WLAN_STATUS_CHALLENGE_FAIL"
    WLAN_STATUS_AUTH_TIMEOUT = "WLAN_STATUS_AUTH_TIMEOUT"
    WLAN_STATUS_AP_UNABLE_TO_HANDLE_NEW_STA = "WLAN_STATUS_AP_UNABLE_TO_HANDLE_NEW_STA"
    WLAN_STATUS_ASSOC_DENIED_RATES = "WLAN_STATUS_ASSOC_DENIED_RATES"
    WLAN_STATUS_ASSOC_DENIED_NOSHORT = "WLAN_STATUS_ASSOC_DENIED_NOSHORT"
    WLAN_STATUS_SPEC_MGMT_REQUIRED = "WLAN_STATUS_SPEC_MGMT_REQUIRED"
    WLAN_STATUS_PWR_CAPABILITY_NOT_VALID = "WLAN_STATUS_PWR_CAPABILITY_NOT_VALID"
    WLAN_STATUS_SUPPORTED_CHANNEL_NOT_VALID = "WLAN_STATUS_SUPPORTED_CHANNEL_NOT_VALID"
    WLAN_STATUS_ASSOC_DENIED_NO_SHORT_SLOT_TIME = "WLAN_STATUS_ASSOC_DENIED_NO_SHORT_SLOT_TIME"
    WLAN_STATUS_ASSOC_DENIED_NO_HT = "WLAN_STATUS_ASSOC_DENIED_NO_HT"
    WLAN_STATUS_R0KH_UNREACHABLE = "WLAN_STATUS_R0KH_UNREACHABLE"
    WLAN_STATUS_ASSOC_DENIED_NO_PCO = "WLAN_STATUS_ASSOC_DENIED_NO_PCO"
    WLAN_STATUS_ASSOC_REJECTED_TEMPORARILY = "WLAN_STATUS_ASSOC_REJECTED_TEMPORARILY"
    WLAN_STATUS_ROBUST_MGMT_FRAME_POLICY_VIOLATION = "WLAN_STATUS_ROBUST_MGMT_FRAME_POLICY_VIOLATION"
    WLAN_STATUS_UNSPECIFIED_QOS_FAILURE = "WLAN_STATUS_UNSPECIFIED_QOS_FAILURE"
    WLAN_STATUS_DENIED_INSUFFICIENT_BANDWIDTH = "WLAN_STATUS_DENIED_INSUFFICIENT_BANDWIDTH"
    WLAN_STATUS_DENIED_POOR_CHANNEL_CONDITIONS = "WLAN_STATUS_DENIED_POOR_CHANNEL_CONDITIONS"
    WLAN_STATUS_DENIED_QOS_NOT_SUPPORTED = "WLAN_STATUS_DENIED_QOS_NOT_SUPPORTED"
    WLAN_STATUS_REQUEST_DECLINED = "WLAN_STATUS_REQUEST_DECLINED"
    WLAN_STATUS_INVALID_PARAMETERS = "WLAN_STATUS_INVALID_PARAMETERS"
    WLAN_STATUS_REJECTED_WITH_SUGGESTED_CHANGES = "WLAN_STATUS_REJECTED_WITH_SUGGESTED_CHANGES"
    WLAN_STATUS_INVALID_IE = "WLAN_STATUS_INVALID_IE"
    WLAN_STATUS_GROUP_CIPHER_NOT_VALID = "WLAN_STATUS_GROUP_CIPHER_NOT_VALID"
    WLAN_STATUS_PAIRWISE_CIPHER_NOT_VALID = "WLAN_STATUS_PAIRWISE_CIPHER_NOT_VALID"
    WLAN_STATUS_AKMP_NOT_VALID = "WLAN_STATUS_AKMP_NOT_VALID"
    WLAN_STATUS_UNSUPPORTED_RSN_IE_VERSION = "WLAN_STATUS_UNSUPPORTED_RSN_IE_VERSION"
    WLAN_STATUS_INVALID_RSN_IE_CAPAB = "WLAN_STATUS_INVALID_RSN_IE_CAPAB"
    WLAN_STATUS_CIPHER_REJECTED_PER_POLICY = "WLAN_STATUS_CIPHER_REJECTED_PER_POLICY"
    WLAN_STATUS_TS_NOT_CREATED = "WLAN_STATUS_TS_NOT_CREATED"
    WLAN_STATUS_DIRECT_LINK_NOT_ALLOWED = "WLAN_STATUS_DIRECT_LINK_NOT_ALLOWED"
    WLAN_STATUS_DEST_STA_NOT_PRESENT = "WLAN_STATUS_DEST_STA_NOT_PRESENT"
    WLAN_STATUS_DEST_STA_NOT_QOS_STA = "WLAN_STATUS_DEST_STA_NOT_QOS_STA"
    WLAN_STATUS_ASSOC_DENIED_LISTEN_INT_TOO_LARGE = "WLAN_STATUS_ASSOC_DENIED_LISTEN_INT_TOO_LARGE"
    WLAN_STATUS_INVALID_FT_ACTION_FRAME_COUNT = "WLAN_STATUS_INVALID_FT_ACTION_FRAME_COUNT"
    WLAN_STATUS_INVALID_PMKID = "WLAN_STATUS_INVALID_PMKID"
    WLAN_STATUS_INVALID_MDIE = "WLAN_STATUS_INVALID_MDIE"
    WLAN_STATUS_INVALID_FTIE = "WLAN_STATUS_INVALID_FTIE"
    WLAN_STATUS_REQUESTED_TCLAS_NOT_SUPPORTED = "WLAN_STATUS_REQUESTED_TCLAS_NOT_SUPPORTED"
    WLAN_STATUS_INSUFFICIENT_TCLAS_PROCESSING_RESOURCES = "WLAN_STATUS_INSUFFICIENT_TCLAS_PROCESSING_RESOURCES"
    WLAN_STATUS_TRY_ANOTHER_BSS = "WLAN_STATUS_TRY_ANOTHER_BSS"
    WLAN_STATUS_GAS_ADV_PROTO_NOT_SUPPORTED = "WLAN_STATUS_GAS_ADV_PROTO_NOT_SUPPORTED"
    WLAN_STATUS_NO_OUTSTANDING_GAS_REQ = "WLAN_STATUS_NO_OUTSTANDING_GAS_REQ"
    WLAN_STATUS_GAS_RESP_NOT_RECEIVED = "WLAN_STATUS_GAS_RESP_NOT_RECEIVED"
    WLAN_STATUS_STA_TIMED_OUT_WAITING_FOR_GAS_RESP = "WLAN_STATUS_STA_TIMED_OUT_WAITING_FOR_GAS_RESP"
    WLAN_STATUS_GAS_RESP_LARGER_THAN_LIMIT = "WLAN_STATUS_GAS_RESP_LARGER_THAN_LIMIT"
    WLAN_STATUS_REQ_REFUSED_HOME = "WLAN_STATUS_REQ_REFUSED_HOME"
    WLAN_STATUS_ADV_SRV_UNREACHABLE = "WLAN_STATUS_ADV_SRV_UNREACHABLE"
    WLAN_STATUS_REQ_REFUSED_SSPN = "WLAN_STATUS_REQ_REFUSED_SSPN"
    WLAN_STATUS_REQ_REFUSED_UNAUTH_ACCESS = "WLAN_STATUS_REQ_REFUSED_UNAUTH_ACCESS"
    WLAN_STATUS_INVALID_RSNIE = "WLAN_STATUS_INVALID_RSNIE"
    WLAN_STATUS_U_APSD_COEX_NOT_SUPPORTED = "WLAN_STATUS_U_APSD_COEX_NOT_SUPPORTED"
    WLAN_STATUS_U_APSD_COEX_MODE_NOT_SUPPORTED = "WLAN_STATUS_U_APSD_COEX_MODE_NOT_SUPPORTED"
    WLAN_STATUS_BAD_INTERVAL_WITH_U_APSD_COEX = "WLAN_STATUS_BAD_INTERVAL_WITH_U_APSD_COEX"
    WLAN_STATUS_ANTI_CLOGGING_TOKEN_REQ = "WLAN_STATUS_ANTI_CLOGGING_TOKEN_REQ"
    WLAN_STATUS_FINITE_CYCLIC_GROUP_NOT_SUPPORTED = "WLAN_STATUS_FINITE_CYCLIC_GROUP_NOT_SUPPORTED"
    WLAN_STATUS_CANNOT_FIND_ALT_TBTT = "WLAN_STATUS_CANNOT_FIND_ALT_TBTT"
    WLAN_STATUS_TRANSMISSION_FAILURE = "WLAN_STATUS_TRANSMISSION_FAILURE"
    WLAN_STATUS_REQ_TCLAS_NOT_SUPPORTED = "WLAN_STATUS_REQ_TCLAS_NOT_SUPPORTED"
    WLAN_STATUS_TCLAS_RESOURCES_EXCHAUSTED = "WLAN_STATUS_TCLAS_RESOURCES_EXCHAUSTED"
    WLAN_STATUS_REJECTED_WITH_SUGGESTED_BSS_TRANSITION = "WLAN_STATUS_REJECTED_WITH_SUGGESTED_BSS_TRANSITION"
    WLAN_STATUS_REJECT_WITH_SCHEDULE = "WLAN_STATUS_REJECT_WITH_SCHEDULE"
    WLAN_STATUS_REJECT_NO_WAKEUP_SPECIFIED = "WLAN_STATUS_REJECT_NO_WAKEUP_SPECIFIED"
    WLAN_STATUS_SUCCESS_POWER_SAVE_MODE = "WLAN_STATUS_SUCCESS_POWER_SAVE_MODE"
    WLAN_STATUS_PENDING_ADMITTING_FST_SESSION = "WLAN_STATUS_PENDING_ADMITTING_FST_SESSION"
    WLAN_STATUS_PERFORMING_FST_NOW = "WLAN_STATUS_PERFORMING_FST_NOW"
    WLAN_STATUS_PENDING_GAP_IN_BA_WINDOW = "WLAN_STATUS_PENDING_GAP_IN_BA_WINDOW"
    WLAN_STATUS_REJECT_U_PID_SETTING = "WLAN_STATUS_REJECT_U_PID_SETTING"
    WLAN_STATUS_REFUSED_EXTERNAL_REASON = "WLAN_STATUS_REFUSED_EXTERNAL_REASON"
    WLAN_STATUS_REFUSED_AP_OUT_OF_MEMORY = "WLAN_STATUS_REFUSED_AP_OUT_OF_MEMORY"
    WLAN_STATUS_REJECTED_EMERGENCY_SERVICE_NOT_SUPPORTED = "WLAN_STATUS_REJECTED_EMERGENCY_SERVICE_NOT_SUPPORTED"
    WLAN_STATUS_QUERY_RESP_OUTSTANDING = "WLAN_STATUS_QUERY_RESP_OUTSTANDING"
    WLAN_STATUS_REJECT_DSE_BAND = "WLAN_STATUS_REJECT_DSE_BAND"
    WLAN_STATUS_TCLAS_PROCESSING_TERMINATED = "WLAN_STATUS_TCLAS_PROCESSING_TERMINATED"
    WLAN_STATUS_TS_SCHEDULE_CONFLICT = "WLAN_STATUS_TS_SCHEDULE_CONFLICT"
    WLAN_STATUS_DENIED_WITH_SUGGESTED_BAND_AND_CHANNEL = "WLAN_STATUS_DENIED_WITH_SUGGESTED_BAND_AND_CHANNEL"
    WLAN_STATUS_MCCAOP_RESERVATION_CONFLICT = "WLAN_STATUS_MCCAOP_RESERVATION_CONFLICT"
    WLAN_STATUS_MAF_LIMIT_EXCEEDED = "WLAN_STATUS_MAF_LIMIT_EXCEEDED"
    WLAN_STATUS_MCCA_TRACK_LIMIT_EXCEEDED = "WLAN_STATUS_MCCA_TRACK_LIMIT_EXCEEDED"
    WLAN_STATUS_DENIED_DUE_TO_SPECTRUM_MANAGEMENT = "WLAN_STATUS_DENIED_DUE_TO_SPECTRUM_MANAGEMENT"
    WLAN_STATUS_ASSOC_DENIED_NO_VHT = "WLAN_STATUS_ASSOC_DENIED_NO_VHT"
    WLAN_STATUS_ENABLEMENT_DENIED = "WLAN_STATUS_ENABLEMENT_DENIED"
    WLAN_STATUS_RESTRICTION_FROM_AUTHORIZED_GDB = "WLAN_STATUS_RESTRICTION_FROM_AUTHORIZED_GDB"
    WLAN_STATUS_AUTHORIZATION_DEENABLED = "WLAN_STATUS_AUTHORIZATION_DEENABLED"
    WLAN_STATUS_FILS_AUTHENTICATION_FAILURE = "WLAN_STATUS_FILS_AUTHENTICATION_FAILURE"
    WLAN_STATUS_UNKNOWN_AUTHENTICATION_SERVER = "WLAN_STATUS_UNKNOWN_AUTHENTICATION_SERVER"
    WLAN_STATUS_UNKNOWN_PASSWORD_IDENTIFIER = "WLAN_STATUS_UNKNOWN_PASSWORD_IDENTIFIER"
    WLAN_STATUS_SAE_HASH_TO_ELEMENT = "WLAN_STATUS_SAE_HASH_TO_ELEMENT"
    WLAN_STATUS_SAE_PK = "WLAN_STATUS_SAE_PK"
    UNSUPPORTED = "UNSUPPORTED"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """WlanStatusCode - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WlanStatusCode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WlanStatusCode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
