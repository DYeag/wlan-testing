# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChannelHopSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'noise_floor_threshold_in_db': 'int',
        'noise_floor_threshold_time_in_seconds': 'int',
        'non_wifi_threshold_in_percentage': 'int',
        'non_wifi_threshold_time_in_seconds': 'int',
        'obss_hop_mode': 'ObssHopMode'
    }

    attribute_map = {
        'noise_floor_threshold_in_db': 'noiseFloorThresholdInDB',
        'noise_floor_threshold_time_in_seconds': 'noiseFloorThresholdTimeInSeconds',
        'non_wifi_threshold_in_percentage': 'nonWifiThresholdInPercentage',
        'non_wifi_threshold_time_in_seconds': 'nonWifiThresholdTimeInSeconds',
        'obss_hop_mode': 'obssHopMode'
    }

    def __init__(self, noise_floor_threshold_in_db=-75, noise_floor_threshold_time_in_seconds=180, non_wifi_threshold_in_percentage=50, non_wifi_threshold_time_in_seconds=180, obss_hop_mode=None):  # noqa: E501
        """ChannelHopSettings - a model defined in Swagger"""  # noqa: E501
        self._noise_floor_threshold_in_db = None
        self._noise_floor_threshold_time_in_seconds = None
        self._non_wifi_threshold_in_percentage = None
        self._non_wifi_threshold_time_in_seconds = None
        self._obss_hop_mode = None
        self.discriminator = None
        if noise_floor_threshold_in_db is not None:
            self.noise_floor_threshold_in_db = noise_floor_threshold_in_db
        if noise_floor_threshold_time_in_seconds is not None:
            self.noise_floor_threshold_time_in_seconds = noise_floor_threshold_time_in_seconds
        if non_wifi_threshold_in_percentage is not None:
            self.non_wifi_threshold_in_percentage = non_wifi_threshold_in_percentage
        if non_wifi_threshold_time_in_seconds is not None:
            self.non_wifi_threshold_time_in_seconds = non_wifi_threshold_time_in_seconds
        if obss_hop_mode is not None:
            self.obss_hop_mode = obss_hop_mode

    @property
    def noise_floor_threshold_in_db(self):
        """Gets the noise_floor_threshold_in_db of this ChannelHopSettings.  # noqa: E501


        :return: The noise_floor_threshold_in_db of this ChannelHopSettings.  # noqa: E501
        :rtype: int
        """
        return self._noise_floor_threshold_in_db

    @noise_floor_threshold_in_db.setter
    def noise_floor_threshold_in_db(self, noise_floor_threshold_in_db):
        """Sets the noise_floor_threshold_in_db of this ChannelHopSettings.


        :param noise_floor_threshold_in_db: The noise_floor_threshold_in_db of this ChannelHopSettings.  # noqa: E501
        :type: int
        """

        self._noise_floor_threshold_in_db = noise_floor_threshold_in_db

    @property
    def noise_floor_threshold_time_in_seconds(self):
        """Gets the noise_floor_threshold_time_in_seconds of this ChannelHopSettings.  # noqa: E501


        :return: The noise_floor_threshold_time_in_seconds of this ChannelHopSettings.  # noqa: E501
        :rtype: int
        """
        return self._noise_floor_threshold_time_in_seconds

    @noise_floor_threshold_time_in_seconds.setter
    def noise_floor_threshold_time_in_seconds(self, noise_floor_threshold_time_in_seconds):
        """Sets the noise_floor_threshold_time_in_seconds of this ChannelHopSettings.


        :param noise_floor_threshold_time_in_seconds: The noise_floor_threshold_time_in_seconds of this ChannelHopSettings.  # noqa: E501
        :type: int
        """

        self._noise_floor_threshold_time_in_seconds = noise_floor_threshold_time_in_seconds

    @property
    def non_wifi_threshold_in_percentage(self):
        """Gets the non_wifi_threshold_in_percentage of this ChannelHopSettings.  # noqa: E501


        :return: The non_wifi_threshold_in_percentage of this ChannelHopSettings.  # noqa: E501
        :rtype: int
        """
        return self._non_wifi_threshold_in_percentage

    @non_wifi_threshold_in_percentage.setter
    def non_wifi_threshold_in_percentage(self, non_wifi_threshold_in_percentage):
        """Sets the non_wifi_threshold_in_percentage of this ChannelHopSettings.


        :param non_wifi_threshold_in_percentage: The non_wifi_threshold_in_percentage of this ChannelHopSettings.  # noqa: E501
        :type: int
        """

        self._non_wifi_threshold_in_percentage = non_wifi_threshold_in_percentage

    @property
    def non_wifi_threshold_time_in_seconds(self):
        """Gets the non_wifi_threshold_time_in_seconds of this ChannelHopSettings.  # noqa: E501


        :return: The non_wifi_threshold_time_in_seconds of this ChannelHopSettings.  # noqa: E501
        :rtype: int
        """
        return self._non_wifi_threshold_time_in_seconds

    @non_wifi_threshold_time_in_seconds.setter
    def non_wifi_threshold_time_in_seconds(self, non_wifi_threshold_time_in_seconds):
        """Sets the non_wifi_threshold_time_in_seconds of this ChannelHopSettings.


        :param non_wifi_threshold_time_in_seconds: The non_wifi_threshold_time_in_seconds of this ChannelHopSettings.  # noqa: E501
        :type: int
        """

        self._non_wifi_threshold_time_in_seconds = non_wifi_threshold_time_in_seconds

    @property
    def obss_hop_mode(self):
        """Gets the obss_hop_mode of this ChannelHopSettings.  # noqa: E501


        :return: The obss_hop_mode of this ChannelHopSettings.  # noqa: E501
        :rtype: ObssHopMode
        """
        return self._obss_hop_mode

    @obss_hop_mode.setter
    def obss_hop_mode(self, obss_hop_mode):
        """Sets the obss_hop_mode of this ChannelHopSettings.


        :param obss_hop_mode: The obss_hop_mode of this ChannelHopSettings.  # noqa: E501
        :type: ObssHopMode
        """

        self._obss_hop_mode = obss_hop_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChannelHopSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChannelHopSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
