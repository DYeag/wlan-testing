# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ElementRadioConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'radio_type': 'RadioType',
        'channel_number': 'int',
        'manual_channel_number': 'int',
        'backup_channel_number': 'int',
        'manual_backup_channel_number': 'int',
        'rx_cell_size_db': 'SourceSelectionValue',
        'probe_response_threshold_db': 'SourceSelectionValue',
        'client_disconnect_threshold_db': 'SourceSelectionValue',
        'eirp_tx_power': 'ElementRadioConfigurationEirpTxPower',
        'perimeter_detection_enabled': 'bool',
        'best_ap_steer_type': 'BestAPSteerType',
        'deauth_attack_detection': 'bool',
        'allowed_channels_power_levels': 'ChannelPowerLevel'
    }

    attribute_map = {
        'radio_type': 'radioType',
        'channel_number': 'channelNumber',
        'manual_channel_number': 'manualChannelNumber',
        'backup_channel_number': 'backupChannelNumber',
        'manual_backup_channel_number': 'manualBackupChannelNumber',
        'rx_cell_size_db': 'rxCellSizeDb',
        'probe_response_threshold_db': 'probeResponseThresholdDb',
        'client_disconnect_threshold_db': 'clientDisconnectThresholdDb',
        'eirp_tx_power': 'eirpTxPower',
        'perimeter_detection_enabled': 'perimeterDetectionEnabled',
        'best_ap_steer_type': 'bestAPSteerType',
        'deauth_attack_detection': 'deauthAttackDetection',
        'allowed_channels_power_levels': 'allowedChannelsPowerLevels'
    }

    def __init__(self, radio_type=None, channel_number=None, manual_channel_number=None, backup_channel_number=None, manual_backup_channel_number=None, rx_cell_size_db=None, probe_response_threshold_db=None, client_disconnect_threshold_db=None, eirp_tx_power=None, perimeter_detection_enabled=None, best_ap_steer_type=None, deauth_attack_detection=None, allowed_channels_power_levels=None):  # noqa: E501
        """ElementRadioConfiguration - a model defined in Swagger"""  # noqa: E501
        self._radio_type = None
        self._channel_number = None
        self._manual_channel_number = None
        self._backup_channel_number = None
        self._manual_backup_channel_number = None
        self._rx_cell_size_db = None
        self._probe_response_threshold_db = None
        self._client_disconnect_threshold_db = None
        self._eirp_tx_power = None
        self._perimeter_detection_enabled = None
        self._best_ap_steer_type = None
        self._deauth_attack_detection = None
        self._allowed_channels_power_levels = None
        self.discriminator = None
        if radio_type is not None:
            self.radio_type = radio_type
        if channel_number is not None:
            self.channel_number = channel_number
        if manual_channel_number is not None:
            self.manual_channel_number = manual_channel_number
        if backup_channel_number is not None:
            self.backup_channel_number = backup_channel_number
        if manual_backup_channel_number is not None:
            self.manual_backup_channel_number = manual_backup_channel_number
        if rx_cell_size_db is not None:
            self.rx_cell_size_db = rx_cell_size_db
        if probe_response_threshold_db is not None:
            self.probe_response_threshold_db = probe_response_threshold_db
        if client_disconnect_threshold_db is not None:
            self.client_disconnect_threshold_db = client_disconnect_threshold_db
        if eirp_tx_power is not None:
            self.eirp_tx_power = eirp_tx_power
        if perimeter_detection_enabled is not None:
            self.perimeter_detection_enabled = perimeter_detection_enabled
        if best_ap_steer_type is not None:
            self.best_ap_steer_type = best_ap_steer_type
        if deauth_attack_detection is not None:
            self.deauth_attack_detection = deauth_attack_detection
        if allowed_channels_power_levels is not None:
            self.allowed_channels_power_levels = allowed_channels_power_levels

    @property
    def radio_type(self):
        """Gets the radio_type of this ElementRadioConfiguration.  # noqa: E501


        :return: The radio_type of this ElementRadioConfiguration.  # noqa: E501
        :rtype: RadioType
        """
        return self._radio_type

    @radio_type.setter
    def radio_type(self, radio_type):
        """Sets the radio_type of this ElementRadioConfiguration.


        :param radio_type: The radio_type of this ElementRadioConfiguration.  # noqa: E501
        :type: RadioType
        """

        self._radio_type = radio_type

    @property
    def channel_number(self):
        """Gets the channel_number of this ElementRadioConfiguration.  # noqa: E501

        The channel that was picked through the cloud's assigment  # noqa: E501

        :return: The channel_number of this ElementRadioConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._channel_number

    @channel_number.setter
    def channel_number(self, channel_number):
        """Sets the channel_number of this ElementRadioConfiguration.

        The channel that was picked through the cloud's assigment  # noqa: E501

        :param channel_number: The channel_number of this ElementRadioConfiguration.  # noqa: E501
        :type: int
        """

        self._channel_number = channel_number

    @property
    def manual_channel_number(self):
        """Gets the manual_channel_number of this ElementRadioConfiguration.  # noqa: E501

        The channel that was manually entered  # noqa: E501

        :return: The manual_channel_number of this ElementRadioConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._manual_channel_number

    @manual_channel_number.setter
    def manual_channel_number(self, manual_channel_number):
        """Sets the manual_channel_number of this ElementRadioConfiguration.

        The channel that was manually entered  # noqa: E501

        :param manual_channel_number: The manual_channel_number of this ElementRadioConfiguration.  # noqa: E501
        :type: int
        """

        self._manual_channel_number = manual_channel_number

    @property
    def backup_channel_number(self):
        """Gets the backup_channel_number of this ElementRadioConfiguration.  # noqa: E501

        The backup channel that was picked through the cloud's assigment  # noqa: E501

        :return: The backup_channel_number of this ElementRadioConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._backup_channel_number

    @backup_channel_number.setter
    def backup_channel_number(self, backup_channel_number):
        """Sets the backup_channel_number of this ElementRadioConfiguration.

        The backup channel that was picked through the cloud's assigment  # noqa: E501

        :param backup_channel_number: The backup_channel_number of this ElementRadioConfiguration.  # noqa: E501
        :type: int
        """

        self._backup_channel_number = backup_channel_number

    @property
    def manual_backup_channel_number(self):
        """Gets the manual_backup_channel_number of this ElementRadioConfiguration.  # noqa: E501

        The backup channel that was manually entered  # noqa: E501

        :return: The manual_backup_channel_number of this ElementRadioConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._manual_backup_channel_number

    @manual_backup_channel_number.setter
    def manual_backup_channel_number(self, manual_backup_channel_number):
        """Sets the manual_backup_channel_number of this ElementRadioConfiguration.

        The backup channel that was manually entered  # noqa: E501

        :param manual_backup_channel_number: The manual_backup_channel_number of this ElementRadioConfiguration.  # noqa: E501
        :type: int
        """

        self._manual_backup_channel_number = manual_backup_channel_number

    @property
    def rx_cell_size_db(self):
        """Gets the rx_cell_size_db of this ElementRadioConfiguration.  # noqa: E501


        :return: The rx_cell_size_db of this ElementRadioConfiguration.  # noqa: E501
        :rtype: SourceSelectionValue
        """
        return self._rx_cell_size_db

    @rx_cell_size_db.setter
    def rx_cell_size_db(self, rx_cell_size_db):
        """Sets the rx_cell_size_db of this ElementRadioConfiguration.


        :param rx_cell_size_db: The rx_cell_size_db of this ElementRadioConfiguration.  # noqa: E501
        :type: SourceSelectionValue
        """

        self._rx_cell_size_db = rx_cell_size_db

    @property
    def probe_response_threshold_db(self):
        """Gets the probe_response_threshold_db of this ElementRadioConfiguration.  # noqa: E501


        :return: The probe_response_threshold_db of this ElementRadioConfiguration.  # noqa: E501
        :rtype: SourceSelectionValue
        """
        return self._probe_response_threshold_db

    @probe_response_threshold_db.setter
    def probe_response_threshold_db(self, probe_response_threshold_db):
        """Sets the probe_response_threshold_db of this ElementRadioConfiguration.


        :param probe_response_threshold_db: The probe_response_threshold_db of this ElementRadioConfiguration.  # noqa: E501
        :type: SourceSelectionValue
        """

        self._probe_response_threshold_db = probe_response_threshold_db

    @property
    def client_disconnect_threshold_db(self):
        """Gets the client_disconnect_threshold_db of this ElementRadioConfiguration.  # noqa: E501


        :return: The client_disconnect_threshold_db of this ElementRadioConfiguration.  # noqa: E501
        :rtype: SourceSelectionValue
        """
        return self._client_disconnect_threshold_db

    @client_disconnect_threshold_db.setter
    def client_disconnect_threshold_db(self, client_disconnect_threshold_db):
        """Sets the client_disconnect_threshold_db of this ElementRadioConfiguration.


        :param client_disconnect_threshold_db: The client_disconnect_threshold_db of this ElementRadioConfiguration.  # noqa: E501
        :type: SourceSelectionValue
        """

        self._client_disconnect_threshold_db = client_disconnect_threshold_db

    @property
    def eirp_tx_power(self):
        """Gets the eirp_tx_power of this ElementRadioConfiguration.  # noqa: E501


        :return: The eirp_tx_power of this ElementRadioConfiguration.  # noqa: E501
        :rtype: ElementRadioConfigurationEirpTxPower
        """
        return self._eirp_tx_power

    @eirp_tx_power.setter
    def eirp_tx_power(self, eirp_tx_power):
        """Sets the eirp_tx_power of this ElementRadioConfiguration.


        :param eirp_tx_power: The eirp_tx_power of this ElementRadioConfiguration.  # noqa: E501
        :type: ElementRadioConfigurationEirpTxPower
        """

        self._eirp_tx_power = eirp_tx_power

    @property
    def perimeter_detection_enabled(self):
        """Gets the perimeter_detection_enabled of this ElementRadioConfiguration.  # noqa: E501


        :return: The perimeter_detection_enabled of this ElementRadioConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._perimeter_detection_enabled

    @perimeter_detection_enabled.setter
    def perimeter_detection_enabled(self, perimeter_detection_enabled):
        """Sets the perimeter_detection_enabled of this ElementRadioConfiguration.


        :param perimeter_detection_enabled: The perimeter_detection_enabled of this ElementRadioConfiguration.  # noqa: E501
        :type: bool
        """

        self._perimeter_detection_enabled = perimeter_detection_enabled

    @property
    def best_ap_steer_type(self):
        """Gets the best_ap_steer_type of this ElementRadioConfiguration.  # noqa: E501


        :return: The best_ap_steer_type of this ElementRadioConfiguration.  # noqa: E501
        :rtype: BestAPSteerType
        """
        return self._best_ap_steer_type

    @best_ap_steer_type.setter
    def best_ap_steer_type(self, best_ap_steer_type):
        """Sets the best_ap_steer_type of this ElementRadioConfiguration.


        :param best_ap_steer_type: The best_ap_steer_type of this ElementRadioConfiguration.  # noqa: E501
        :type: BestAPSteerType
        """

        self._best_ap_steer_type = best_ap_steer_type

    @property
    def deauth_attack_detection(self):
        """Gets the deauth_attack_detection of this ElementRadioConfiguration.  # noqa: E501


        :return: The deauth_attack_detection of this ElementRadioConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._deauth_attack_detection

    @deauth_attack_detection.setter
    def deauth_attack_detection(self, deauth_attack_detection):
        """Sets the deauth_attack_detection of this ElementRadioConfiguration.


        :param deauth_attack_detection: The deauth_attack_detection of this ElementRadioConfiguration.  # noqa: E501
        :type: bool
        """

        self._deauth_attack_detection = deauth_attack_detection

    @property
    def allowed_channels_power_levels(self):
        """Gets the allowed_channels_power_levels of this ElementRadioConfiguration.  # noqa: E501


        :return: The allowed_channels_power_levels of this ElementRadioConfiguration.  # noqa: E501
        :rtype: ChannelPowerLevel
        """
        return self._allowed_channels_power_levels

    @allowed_channels_power_levels.setter
    def allowed_channels_power_levels(self, allowed_channels_power_levels):
        """Sets the allowed_channels_power_levels of this ElementRadioConfiguration.


        :param allowed_channels_power_levels: The allowed_channels_power_levels of this ElementRadioConfiguration.  # noqa: E501
        :type: ChannelPowerLevel
        """

        self._allowed_channels_power_levels = allowed_channels_power_levels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ElementRadioConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ElementRadioConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
