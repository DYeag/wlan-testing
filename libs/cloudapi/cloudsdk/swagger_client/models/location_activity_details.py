# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LocationActivityDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'busy_time': 'str',
        'quiet_time': 'str',
        'timezone': 'str',
        'last_busy_snapshot': 'int'
    }

    attribute_map = {
        'busy_time': 'busyTime',
        'quiet_time': 'quietTime',
        'timezone': 'timezone',
        'last_busy_snapshot': 'lastBusySnapshot'
    }

    def __init__(self, busy_time=None, quiet_time=None, timezone=None, last_busy_snapshot=None):  # noqa: E501
        """LocationActivityDetails - a model defined in Swagger"""  # noqa: E501
        self._busy_time = None
        self._quiet_time = None
        self._timezone = None
        self._last_busy_snapshot = None
        self.discriminator = None
        if busy_time is not None:
            self.busy_time = busy_time
        if quiet_time is not None:
            self.quiet_time = quiet_time
        if timezone is not None:
            self.timezone = timezone
        if last_busy_snapshot is not None:
            self.last_busy_snapshot = last_busy_snapshot

    @property
    def busy_time(self):
        """Gets the busy_time of this LocationActivityDetails.  # noqa: E501


        :return: The busy_time of this LocationActivityDetails.  # noqa: E501
        :rtype: str
        """
        return self._busy_time

    @busy_time.setter
    def busy_time(self, busy_time):
        """Sets the busy_time of this LocationActivityDetails.


        :param busy_time: The busy_time of this LocationActivityDetails.  # noqa: E501
        :type: str
        """

        self._busy_time = busy_time

    @property
    def quiet_time(self):
        """Gets the quiet_time of this LocationActivityDetails.  # noqa: E501


        :return: The quiet_time of this LocationActivityDetails.  # noqa: E501
        :rtype: str
        """
        return self._quiet_time

    @quiet_time.setter
    def quiet_time(self, quiet_time):
        """Sets the quiet_time of this LocationActivityDetails.


        :param quiet_time: The quiet_time of this LocationActivityDetails.  # noqa: E501
        :type: str
        """

        self._quiet_time = quiet_time

    @property
    def timezone(self):
        """Gets the timezone of this LocationActivityDetails.  # noqa: E501


        :return: The timezone of this LocationActivityDetails.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this LocationActivityDetails.


        :param timezone: The timezone of this LocationActivityDetails.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def last_busy_snapshot(self):
        """Gets the last_busy_snapshot of this LocationActivityDetails.  # noqa: E501


        :return: The last_busy_snapshot of this LocationActivityDetails.  # noqa: E501
        :rtype: int
        """
        return self._last_busy_snapshot

    @last_busy_snapshot.setter
    def last_busy_snapshot(self, last_busy_snapshot):
        """Sets the last_busy_snapshot of this LocationActivityDetails.


        :param last_busy_snapshot: The last_busy_snapshot of this LocationActivityDetails.  # noqa: E501
        :type: int
        """

        self._last_busy_snapshot = last_busy_snapshot

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocationActivityDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationActivityDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
