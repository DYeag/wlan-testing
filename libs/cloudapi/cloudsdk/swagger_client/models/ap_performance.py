# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApPerformance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'free_memory': 'int',
        'cpu_utilized': 'list[int]',
        'up_time': 'int',
        'cami_crashed': 'int',
        'cpu_temperature': 'int',
        'low_memory_reboot': 'bool',
        'eth_link_state': 'EthernetLinkState',
        'cloud_tx_bytes': 'int',
        'cloud_rx_bytes': 'int',
        'ps_cpu_util': 'list[PerProcessUtilization]',
        'ps_mem_util': 'list[PerProcessUtilization]'
    }

    attribute_map = {
        'free_memory': 'freeMemory',
        'cpu_utilized': 'cpuUtilized',
        'up_time': 'upTime',
        'cami_crashed': 'camiCrashed',
        'cpu_temperature': 'cpuTemperature',
        'low_memory_reboot': 'lowMemoryReboot',
        'eth_link_state': 'ethLinkState',
        'cloud_tx_bytes': 'cloudTxBytes',
        'cloud_rx_bytes': 'cloudRxBytes',
        'ps_cpu_util': 'psCpuUtil',
        'ps_mem_util': 'psMemUtil'
    }

    def __init__(self, free_memory=None, cpu_utilized=None, up_time=None, cami_crashed=None, cpu_temperature=None, low_memory_reboot=None, eth_link_state=None, cloud_tx_bytes=None, cloud_rx_bytes=None, ps_cpu_util=None, ps_mem_util=None):  # noqa: E501
        """ApPerformance - a model defined in Swagger"""  # noqa: E501
        self._free_memory = None
        self._cpu_utilized = None
        self._up_time = None
        self._cami_crashed = None
        self._cpu_temperature = None
        self._low_memory_reboot = None
        self._eth_link_state = None
        self._cloud_tx_bytes = None
        self._cloud_rx_bytes = None
        self._ps_cpu_util = None
        self._ps_mem_util = None
        self.discriminator = None
        if free_memory is not None:
            self.free_memory = free_memory
        if cpu_utilized is not None:
            self.cpu_utilized = cpu_utilized
        if up_time is not None:
            self.up_time = up_time
        if cami_crashed is not None:
            self.cami_crashed = cami_crashed
        if cpu_temperature is not None:
            self.cpu_temperature = cpu_temperature
        if low_memory_reboot is not None:
            self.low_memory_reboot = low_memory_reboot
        if eth_link_state is not None:
            self.eth_link_state = eth_link_state
        if cloud_tx_bytes is not None:
            self.cloud_tx_bytes = cloud_tx_bytes
        if cloud_rx_bytes is not None:
            self.cloud_rx_bytes = cloud_rx_bytes
        if ps_cpu_util is not None:
            self.ps_cpu_util = ps_cpu_util
        if ps_mem_util is not None:
            self.ps_mem_util = ps_mem_util

    @property
    def free_memory(self):
        """Gets the free_memory of this ApPerformance.  # noqa: E501

        free memory in kilobytes  # noqa: E501

        :return: The free_memory of this ApPerformance.  # noqa: E501
        :rtype: int
        """
        return self._free_memory

    @free_memory.setter
    def free_memory(self, free_memory):
        """Sets the free_memory of this ApPerformance.

        free memory in kilobytes  # noqa: E501

        :param free_memory: The free_memory of this ApPerformance.  # noqa: E501
        :type: int
        """

        self._free_memory = free_memory

    @property
    def cpu_utilized(self):
        """Gets the cpu_utilized of this ApPerformance.  # noqa: E501

        CPU utilization in percentage, one per core  # noqa: E501

        :return: The cpu_utilized of this ApPerformance.  # noqa: E501
        :rtype: list[int]
        """
        return self._cpu_utilized

    @cpu_utilized.setter
    def cpu_utilized(self, cpu_utilized):
        """Sets the cpu_utilized of this ApPerformance.

        CPU utilization in percentage, one per core  # noqa: E501

        :param cpu_utilized: The cpu_utilized of this ApPerformance.  # noqa: E501
        :type: list[int]
        """

        self._cpu_utilized = cpu_utilized

    @property
    def up_time(self):
        """Gets the up_time of this ApPerformance.  # noqa: E501

        AP uptime in seconds  # noqa: E501

        :return: The up_time of this ApPerformance.  # noqa: E501
        :rtype: int
        """
        return self._up_time

    @up_time.setter
    def up_time(self, up_time):
        """Sets the up_time of this ApPerformance.

        AP uptime in seconds  # noqa: E501

        :param up_time: The up_time of this ApPerformance.  # noqa: E501
        :type: int
        """

        self._up_time = up_time

    @property
    def cami_crashed(self):
        """Gets the cami_crashed of this ApPerformance.  # noqa: E501

        number of time cloud-to-ap-management process crashed  # noqa: E501

        :return: The cami_crashed of this ApPerformance.  # noqa: E501
        :rtype: int
        """
        return self._cami_crashed

    @cami_crashed.setter
    def cami_crashed(self, cami_crashed):
        """Sets the cami_crashed of this ApPerformance.

        number of time cloud-to-ap-management process crashed  # noqa: E501

        :param cami_crashed: The cami_crashed of this ApPerformance.  # noqa: E501
        :type: int
        """

        self._cami_crashed = cami_crashed

    @property
    def cpu_temperature(self):
        """Gets the cpu_temperature of this ApPerformance.  # noqa: E501

        cpu temperature in Celsius  # noqa: E501

        :return: The cpu_temperature of this ApPerformance.  # noqa: E501
        :rtype: int
        """
        return self._cpu_temperature

    @cpu_temperature.setter
    def cpu_temperature(self, cpu_temperature):
        """Sets the cpu_temperature of this ApPerformance.

        cpu temperature in Celsius  # noqa: E501

        :param cpu_temperature: The cpu_temperature of this ApPerformance.  # noqa: E501
        :type: int
        """

        self._cpu_temperature = cpu_temperature

    @property
    def low_memory_reboot(self):
        """Gets the low_memory_reboot of this ApPerformance.  # noqa: E501

        low memory reboot happened  # noqa: E501

        :return: The low_memory_reboot of this ApPerformance.  # noqa: E501
        :rtype: bool
        """
        return self._low_memory_reboot

    @low_memory_reboot.setter
    def low_memory_reboot(self, low_memory_reboot):
        """Sets the low_memory_reboot of this ApPerformance.

        low memory reboot happened  # noqa: E501

        :param low_memory_reboot: The low_memory_reboot of this ApPerformance.  # noqa: E501
        :type: bool
        """

        self._low_memory_reboot = low_memory_reboot

    @property
    def eth_link_state(self):
        """Gets the eth_link_state of this ApPerformance.  # noqa: E501


        :return: The eth_link_state of this ApPerformance.  # noqa: E501
        :rtype: EthernetLinkState
        """
        return self._eth_link_state

    @eth_link_state.setter
    def eth_link_state(self, eth_link_state):
        """Sets the eth_link_state of this ApPerformance.


        :param eth_link_state: The eth_link_state of this ApPerformance.  # noqa: E501
        :type: EthernetLinkState
        """

        self._eth_link_state = eth_link_state

    @property
    def cloud_tx_bytes(self):
        """Gets the cloud_tx_bytes of this ApPerformance.  # noqa: E501

        Data sent by AP to the cloud  # noqa: E501

        :return: The cloud_tx_bytes of this ApPerformance.  # noqa: E501
        :rtype: int
        """
        return self._cloud_tx_bytes

    @cloud_tx_bytes.setter
    def cloud_tx_bytes(self, cloud_tx_bytes):
        """Sets the cloud_tx_bytes of this ApPerformance.

        Data sent by AP to the cloud  # noqa: E501

        :param cloud_tx_bytes: The cloud_tx_bytes of this ApPerformance.  # noqa: E501
        :type: int
        """

        self._cloud_tx_bytes = cloud_tx_bytes

    @property
    def cloud_rx_bytes(self):
        """Gets the cloud_rx_bytes of this ApPerformance.  # noqa: E501

        Data received by AP from cloud  # noqa: E501

        :return: The cloud_rx_bytes of this ApPerformance.  # noqa: E501
        :rtype: int
        """
        return self._cloud_rx_bytes

    @cloud_rx_bytes.setter
    def cloud_rx_bytes(self, cloud_rx_bytes):
        """Sets the cloud_rx_bytes of this ApPerformance.

        Data received by AP from cloud  # noqa: E501

        :param cloud_rx_bytes: The cloud_rx_bytes of this ApPerformance.  # noqa: E501
        :type: int
        """

        self._cloud_rx_bytes = cloud_rx_bytes

    @property
    def ps_cpu_util(self):
        """Gets the ps_cpu_util of this ApPerformance.  # noqa: E501


        :return: The ps_cpu_util of this ApPerformance.  # noqa: E501
        :rtype: list[PerProcessUtilization]
        """
        return self._ps_cpu_util

    @ps_cpu_util.setter
    def ps_cpu_util(self, ps_cpu_util):
        """Sets the ps_cpu_util of this ApPerformance.


        :param ps_cpu_util: The ps_cpu_util of this ApPerformance.  # noqa: E501
        :type: list[PerProcessUtilization]
        """

        self._ps_cpu_util = ps_cpu_util

    @property
    def ps_mem_util(self):
        """Gets the ps_mem_util of this ApPerformance.  # noqa: E501


        :return: The ps_mem_util of this ApPerformance.  # noqa: E501
        :rtype: list[PerProcessUtilization]
        """
        return self._ps_mem_util

    @ps_mem_util.setter
    def ps_mem_util(self, ps_mem_util):
        """Sets the ps_mem_util of this ApPerformance.


        :param ps_mem_util: The ps_mem_util of this ApPerformance.  # noqa: E501
        :type: list[PerProcessUtilization]
        """

        self._ps_mem_util = ps_mem_util

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApPerformance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApPerformance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
