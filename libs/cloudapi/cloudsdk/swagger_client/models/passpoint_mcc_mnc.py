# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PasspointMccMnc(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mcc': 'int',
        'mnc': 'int',
        'iso': 'str',
        'country': 'str',
        'country_code': 'int',
        'network': 'str'
    }

    attribute_map = {
        'mcc': 'mcc',
        'mnc': 'mnc',
        'iso': 'iso',
        'country': 'country',
        'country_code': 'countryCode',
        'network': 'network'
    }

    def __init__(self, mcc=None, mnc=None, iso=None, country=None, country_code=None, network=None):  # noqa: E501
        """PasspointMccMnc - a model defined in Swagger"""  # noqa: E501
        self._mcc = None
        self._mnc = None
        self._iso = None
        self._country = None
        self._country_code = None
        self._network = None
        self.discriminator = None
        if mcc is not None:
            self.mcc = mcc
        if mnc is not None:
            self.mnc = mnc
        if iso is not None:
            self.iso = iso
        if country is not None:
            self.country = country
        if country_code is not None:
            self.country_code = country_code
        if network is not None:
            self.network = network

    @property
    def mcc(self):
        """Gets the mcc of this PasspointMccMnc.  # noqa: E501


        :return: The mcc of this PasspointMccMnc.  # noqa: E501
        :rtype: int
        """
        return self._mcc

    @mcc.setter
    def mcc(self, mcc):
        """Sets the mcc of this PasspointMccMnc.


        :param mcc: The mcc of this PasspointMccMnc.  # noqa: E501
        :type: int
        """

        self._mcc = mcc

    @property
    def mnc(self):
        """Gets the mnc of this PasspointMccMnc.  # noqa: E501


        :return: The mnc of this PasspointMccMnc.  # noqa: E501
        :rtype: int
        """
        return self._mnc

    @mnc.setter
    def mnc(self, mnc):
        """Sets the mnc of this PasspointMccMnc.


        :param mnc: The mnc of this PasspointMccMnc.  # noqa: E501
        :type: int
        """

        self._mnc = mnc

    @property
    def iso(self):
        """Gets the iso of this PasspointMccMnc.  # noqa: E501


        :return: The iso of this PasspointMccMnc.  # noqa: E501
        :rtype: str
        """
        return self._iso

    @iso.setter
    def iso(self, iso):
        """Sets the iso of this PasspointMccMnc.


        :param iso: The iso of this PasspointMccMnc.  # noqa: E501
        :type: str
        """

        self._iso = iso

    @property
    def country(self):
        """Gets the country of this PasspointMccMnc.  # noqa: E501


        :return: The country of this PasspointMccMnc.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PasspointMccMnc.


        :param country: The country of this PasspointMccMnc.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this PasspointMccMnc.  # noqa: E501


        :return: The country_code of this PasspointMccMnc.  # noqa: E501
        :rtype: int
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this PasspointMccMnc.


        :param country_code: The country_code of this PasspointMccMnc.  # noqa: E501
        :type: int
        """

        self._country_code = country_code

    @property
    def network(self):
        """Gets the network of this PasspointMccMnc.  # noqa: E501


        :return: The network of this PasspointMccMnc.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this PasspointMccMnc.


        :param network: The network of this PasspointMccMnc.  # noqa: E501
        :type: str
        """

        self._network = network

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PasspointMccMnc, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PasspointMccMnc):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
