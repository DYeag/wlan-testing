# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VlanSubnet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subnet_vlan': 'int',
        'subnet_base': 'str',
        'subnet_mask': 'str',
        'subnet_gateway': 'str',
        'subnet_dhcp_server': 'str',
        'subnet_dns1': 'str',
        'subnet_dns2': 'str',
        'subnet_dns3': 'str'
    }

    attribute_map = {
        'subnet_vlan': 'subnetVlan',
        'subnet_base': 'subnetBase',
        'subnet_mask': 'subnetMask',
        'subnet_gateway': 'subnetGateway',
        'subnet_dhcp_server': 'subnetDhcpServer',
        'subnet_dns1': 'subnetDns1',
        'subnet_dns2': 'subnetDns2',
        'subnet_dns3': 'subnetDns3'
    }

    def __init__(self, subnet_vlan=None, subnet_base=None, subnet_mask=None, subnet_gateway=None, subnet_dhcp_server=None, subnet_dns1=None, subnet_dns2=None, subnet_dns3=None):  # noqa: E501
        """VlanSubnet - a model defined in Swagger"""  # noqa: E501
        self._subnet_vlan = None
        self._subnet_base = None
        self._subnet_mask = None
        self._subnet_gateway = None
        self._subnet_dhcp_server = None
        self._subnet_dns1 = None
        self._subnet_dns2 = None
        self._subnet_dns3 = None
        self.discriminator = None
        if subnet_vlan is not None:
            self.subnet_vlan = subnet_vlan
        if subnet_base is not None:
            self.subnet_base = subnet_base
        if subnet_mask is not None:
            self.subnet_mask = subnet_mask
        if subnet_gateway is not None:
            self.subnet_gateway = subnet_gateway
        if subnet_dhcp_server is not None:
            self.subnet_dhcp_server = subnet_dhcp_server
        if subnet_dns1 is not None:
            self.subnet_dns1 = subnet_dns1
        if subnet_dns2 is not None:
            self.subnet_dns2 = subnet_dns2
        if subnet_dns3 is not None:
            self.subnet_dns3 = subnet_dns3

    @property
    def subnet_vlan(self):
        """Gets the subnet_vlan of this VlanSubnet.  # noqa: E501


        :return: The subnet_vlan of this VlanSubnet.  # noqa: E501
        :rtype: int
        """
        return self._subnet_vlan

    @subnet_vlan.setter
    def subnet_vlan(self, subnet_vlan):
        """Sets the subnet_vlan of this VlanSubnet.


        :param subnet_vlan: The subnet_vlan of this VlanSubnet.  # noqa: E501
        :type: int
        """

        self._subnet_vlan = subnet_vlan

    @property
    def subnet_base(self):
        """Gets the subnet_base of this VlanSubnet.  # noqa: E501

        string representing InetAddress  # noqa: E501

        :return: The subnet_base of this VlanSubnet.  # noqa: E501
        :rtype: str
        """
        return self._subnet_base

    @subnet_base.setter
    def subnet_base(self, subnet_base):
        """Sets the subnet_base of this VlanSubnet.

        string representing InetAddress  # noqa: E501

        :param subnet_base: The subnet_base of this VlanSubnet.  # noqa: E501
        :type: str
        """

        self._subnet_base = subnet_base

    @property
    def subnet_mask(self):
        """Gets the subnet_mask of this VlanSubnet.  # noqa: E501

        string representing InetAddress  # noqa: E501

        :return: The subnet_mask of this VlanSubnet.  # noqa: E501
        :rtype: str
        """
        return self._subnet_mask

    @subnet_mask.setter
    def subnet_mask(self, subnet_mask):
        """Sets the subnet_mask of this VlanSubnet.

        string representing InetAddress  # noqa: E501

        :param subnet_mask: The subnet_mask of this VlanSubnet.  # noqa: E501
        :type: str
        """

        self._subnet_mask = subnet_mask

    @property
    def subnet_gateway(self):
        """Gets the subnet_gateway of this VlanSubnet.  # noqa: E501

        string representing InetAddress  # noqa: E501

        :return: The subnet_gateway of this VlanSubnet.  # noqa: E501
        :rtype: str
        """
        return self._subnet_gateway

    @subnet_gateway.setter
    def subnet_gateway(self, subnet_gateway):
        """Sets the subnet_gateway of this VlanSubnet.

        string representing InetAddress  # noqa: E501

        :param subnet_gateway: The subnet_gateway of this VlanSubnet.  # noqa: E501
        :type: str
        """

        self._subnet_gateway = subnet_gateway

    @property
    def subnet_dhcp_server(self):
        """Gets the subnet_dhcp_server of this VlanSubnet.  # noqa: E501

        string representing InetAddress  # noqa: E501

        :return: The subnet_dhcp_server of this VlanSubnet.  # noqa: E501
        :rtype: str
        """
        return self._subnet_dhcp_server

    @subnet_dhcp_server.setter
    def subnet_dhcp_server(self, subnet_dhcp_server):
        """Sets the subnet_dhcp_server of this VlanSubnet.

        string representing InetAddress  # noqa: E501

        :param subnet_dhcp_server: The subnet_dhcp_server of this VlanSubnet.  # noqa: E501
        :type: str
        """

        self._subnet_dhcp_server = subnet_dhcp_server

    @property
    def subnet_dns1(self):
        """Gets the subnet_dns1 of this VlanSubnet.  # noqa: E501

        string representing InetAddress  # noqa: E501

        :return: The subnet_dns1 of this VlanSubnet.  # noqa: E501
        :rtype: str
        """
        return self._subnet_dns1

    @subnet_dns1.setter
    def subnet_dns1(self, subnet_dns1):
        """Sets the subnet_dns1 of this VlanSubnet.

        string representing InetAddress  # noqa: E501

        :param subnet_dns1: The subnet_dns1 of this VlanSubnet.  # noqa: E501
        :type: str
        """

        self._subnet_dns1 = subnet_dns1

    @property
    def subnet_dns2(self):
        """Gets the subnet_dns2 of this VlanSubnet.  # noqa: E501

        string representing InetAddress  # noqa: E501

        :return: The subnet_dns2 of this VlanSubnet.  # noqa: E501
        :rtype: str
        """
        return self._subnet_dns2

    @subnet_dns2.setter
    def subnet_dns2(self, subnet_dns2):
        """Sets the subnet_dns2 of this VlanSubnet.

        string representing InetAddress  # noqa: E501

        :param subnet_dns2: The subnet_dns2 of this VlanSubnet.  # noqa: E501
        :type: str
        """

        self._subnet_dns2 = subnet_dns2

    @property
    def subnet_dns3(self):
        """Gets the subnet_dns3 of this VlanSubnet.  # noqa: E501

        string representing InetAddress  # noqa: E501

        :return: The subnet_dns3 of this VlanSubnet.  # noqa: E501
        :rtype: str
        """
        return self._subnet_dns3

    @subnet_dns3.setter
    def subnet_dns3(self, subnet_dns3):
        """Sets the subnet_dns3 of this VlanSubnet.

        string representing InetAddress  # noqa: E501

        :param subnet_dns3: The subnet_dns3 of this VlanSubnet.  # noqa: E501
        :type: str
        """

        self._subnet_dns3 = subnet_dns3

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VlanSubnet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VlanSubnet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
