# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FirmwareTrackRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'record_id': 'int',
        'track_name': 'str',
        'maintenance_window': 'FirmwareScheduleSetting',
        'created_timestamp': 'int',
        'last_modified_timestamp': 'int'
    }

    attribute_map = {
        'record_id': 'recordId',
        'track_name': 'trackName',
        'maintenance_window': 'maintenanceWindow',
        'created_timestamp': 'createdTimestamp',
        'last_modified_timestamp': 'lastModifiedTimestamp'
    }

    def __init__(self, record_id=None, track_name=None, maintenance_window=None, created_timestamp=None, last_modified_timestamp=None):  # noqa: E501
        """FirmwareTrackRecord - a model defined in Swagger"""  # noqa: E501
        self._record_id = None
        self._track_name = None
        self._maintenance_window = None
        self._created_timestamp = None
        self._last_modified_timestamp = None
        self.discriminator = None
        if record_id is not None:
            self.record_id = record_id
        if track_name is not None:
            self.track_name = track_name
        if maintenance_window is not None:
            self.maintenance_window = maintenance_window
        if created_timestamp is not None:
            self.created_timestamp = created_timestamp
        if last_modified_timestamp is not None:
            self.last_modified_timestamp = last_modified_timestamp

    @property
    def record_id(self):
        """Gets the record_id of this FirmwareTrackRecord.  # noqa: E501


        :return: The record_id of this FirmwareTrackRecord.  # noqa: E501
        :rtype: int
        """
        return self._record_id

    @record_id.setter
    def record_id(self, record_id):
        """Sets the record_id of this FirmwareTrackRecord.


        :param record_id: The record_id of this FirmwareTrackRecord.  # noqa: E501
        :type: int
        """

        self._record_id = record_id

    @property
    def track_name(self):
        """Gets the track_name of this FirmwareTrackRecord.  # noqa: E501


        :return: The track_name of this FirmwareTrackRecord.  # noqa: E501
        :rtype: str
        """
        return self._track_name

    @track_name.setter
    def track_name(self, track_name):
        """Sets the track_name of this FirmwareTrackRecord.


        :param track_name: The track_name of this FirmwareTrackRecord.  # noqa: E501
        :type: str
        """

        self._track_name = track_name

    @property
    def maintenance_window(self):
        """Gets the maintenance_window of this FirmwareTrackRecord.  # noqa: E501


        :return: The maintenance_window of this FirmwareTrackRecord.  # noqa: E501
        :rtype: FirmwareScheduleSetting
        """
        return self._maintenance_window

    @maintenance_window.setter
    def maintenance_window(self, maintenance_window):
        """Sets the maintenance_window of this FirmwareTrackRecord.


        :param maintenance_window: The maintenance_window of this FirmwareTrackRecord.  # noqa: E501
        :type: FirmwareScheduleSetting
        """

        self._maintenance_window = maintenance_window

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this FirmwareTrackRecord.  # noqa: E501


        :return: The created_timestamp of this FirmwareTrackRecord.  # noqa: E501
        :rtype: int
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this FirmwareTrackRecord.


        :param created_timestamp: The created_timestamp of this FirmwareTrackRecord.  # noqa: E501
        :type: int
        """

        self._created_timestamp = created_timestamp

    @property
    def last_modified_timestamp(self):
        """Gets the last_modified_timestamp of this FirmwareTrackRecord.  # noqa: E501

        must be provided for update operation, update will be rejected if provided value does not match the one currently stored in the database  # noqa: E501

        :return: The last_modified_timestamp of this FirmwareTrackRecord.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_timestamp

    @last_modified_timestamp.setter
    def last_modified_timestamp(self, last_modified_timestamp):
        """Sets the last_modified_timestamp of this FirmwareTrackRecord.

        must be provided for update operation, update will be rejected if provided value does not match the one currently stored in the database  # noqa: E501

        :param last_modified_timestamp: The last_modified_timestamp of this FirmwareTrackRecord.  # noqa: E501
        :type: int
        """

        self._last_modified_timestamp = last_modified_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FirmwareTrackRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FirmwareTrackRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
