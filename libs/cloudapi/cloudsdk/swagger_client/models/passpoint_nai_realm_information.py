# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PasspointNaiRealmInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nai_realms': 'list[str]',
        'encoding': 'PasspointNaiRealmEncoding',
        'eap_methods': 'list[PasspointEapMethods]',
        'eap_map': 'dict(str, str)'
    }

    attribute_map = {
        'nai_realms': 'naiRealms',
        'encoding': 'encoding',
        'eap_methods': 'eapMethods',
        'eap_map': 'eapMap'
    }

    def __init__(self, nai_realms=None, encoding=None, eap_methods=None, eap_map=None):  # noqa: E501
        """PasspointNaiRealmInformation - a model defined in Swagger"""  # noqa: E501
        self._nai_realms = None
        self._encoding = None
        self._eap_methods = None
        self._eap_map = None
        self.discriminator = None
        if nai_realms is not None:
            self.nai_realms = nai_realms
        if encoding is not None:
            self.encoding = encoding
        if eap_methods is not None:
            self.eap_methods = eap_methods
        if eap_map is not None:
            self.eap_map = eap_map

    @property
    def nai_realms(self):
        """Gets the nai_realms of this PasspointNaiRealmInformation.  # noqa: E501


        :return: The nai_realms of this PasspointNaiRealmInformation.  # noqa: E501
        :rtype: list[str]
        """
        return self._nai_realms

    @nai_realms.setter
    def nai_realms(self, nai_realms):
        """Sets the nai_realms of this PasspointNaiRealmInformation.


        :param nai_realms: The nai_realms of this PasspointNaiRealmInformation.  # noqa: E501
        :type: list[str]
        """

        self._nai_realms = nai_realms

    @property
    def encoding(self):
        """Gets the encoding of this PasspointNaiRealmInformation.  # noqa: E501


        :return: The encoding of this PasspointNaiRealmInformation.  # noqa: E501
        :rtype: PasspointNaiRealmEncoding
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this PasspointNaiRealmInformation.


        :param encoding: The encoding of this PasspointNaiRealmInformation.  # noqa: E501
        :type: PasspointNaiRealmEncoding
        """

        self._encoding = encoding

    @property
    def eap_methods(self):
        """Gets the eap_methods of this PasspointNaiRealmInformation.  # noqa: E501

        array of EAP methods  # noqa: E501

        :return: The eap_methods of this PasspointNaiRealmInformation.  # noqa: E501
        :rtype: list[PasspointEapMethods]
        """
        return self._eap_methods

    @eap_methods.setter
    def eap_methods(self, eap_methods):
        """Sets the eap_methods of this PasspointNaiRealmInformation.

        array of EAP methods  # noqa: E501

        :param eap_methods: The eap_methods of this PasspointNaiRealmInformation.  # noqa: E501
        :type: list[PasspointEapMethods]
        """

        self._eap_methods = eap_methods

    @property
    def eap_map(self):
        """Gets the eap_map of this PasspointNaiRealmInformation.  # noqa: E501

        map of string values comrised of 'param + credential' types, keyed by EAP methods  # noqa: E501

        :return: The eap_map of this PasspointNaiRealmInformation.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._eap_map

    @eap_map.setter
    def eap_map(self, eap_map):
        """Sets the eap_map of this PasspointNaiRealmInformation.

        map of string values comrised of 'param + credential' types, keyed by EAP methods  # noqa: E501

        :param eap_map: The eap_map of this PasspointNaiRealmInformation.  # noqa: E501
        :type: dict(str, str)
        """

        self._eap_map = eap_map

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PasspointNaiRealmInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PasspointNaiRealmInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
