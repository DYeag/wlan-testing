# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EquipmentUpgradeStatusData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_type': 'str',
        'status_data_type': 'str',
        'active_sw_version': 'str',
        'alternate_sw_version': 'str',
        'target_sw_version': 'str',
        'retries': 'int',
        'upgrade_state': 'EquipmentUpgradeState',
        'reason': 'EquipmentUpgradeFailureReason',
        'upgrade_start_time': 'int',
        'switch_bank': 'bool'
    }

    attribute_map = {
        'model_type': 'model_type',
        'status_data_type': 'statusDataType',
        'active_sw_version': 'activeSwVersion',
        'alternate_sw_version': 'alternateSwVersion',
        'target_sw_version': 'targetSwVersion',
        'retries': 'retries',
        'upgrade_state': 'upgradeState',
        'reason': 'reason',
        'upgrade_start_time': 'upgradeStartTime',
        'switch_bank': 'switchBank'
    }

    def __init__(self, model_type=None, status_data_type=None, active_sw_version=None, alternate_sw_version=None, target_sw_version=None, retries=None, upgrade_state=None, reason=None, upgrade_start_time=None, switch_bank=None):  # noqa: E501
        """EquipmentUpgradeStatusData - a model defined in Swagger"""  # noqa: E501
        self._model_type = None
        self._status_data_type = None
        self._active_sw_version = None
        self._alternate_sw_version = None
        self._target_sw_version = None
        self._retries = None
        self._upgrade_state = None
        self._reason = None
        self._upgrade_start_time = None
        self._switch_bank = None
        self.discriminator = None
        self.model_type = model_type
        if status_data_type is not None:
            self.status_data_type = status_data_type
        if active_sw_version is not None:
            self.active_sw_version = active_sw_version
        if alternate_sw_version is not None:
            self.alternate_sw_version = alternate_sw_version
        if target_sw_version is not None:
            self.target_sw_version = target_sw_version
        if retries is not None:
            self.retries = retries
        if upgrade_state is not None:
            self.upgrade_state = upgrade_state
        if reason is not None:
            self.reason = reason
        if upgrade_start_time is not None:
            self.upgrade_start_time = upgrade_start_time
        if switch_bank is not None:
            self.switch_bank = switch_bank

    @property
    def model_type(self):
        """Gets the model_type of this EquipmentUpgradeStatusData.  # noqa: E501


        :return: The model_type of this EquipmentUpgradeStatusData.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this EquipmentUpgradeStatusData.


        :param model_type: The model_type of this EquipmentUpgradeStatusData.  # noqa: E501
        :type: str
        """
        if model_type is None:
            raise ValueError("Invalid value for `model_type`, must not be `None`")  # noqa: E501
        allowed_values = ["EquipmentUpgradeStatusData"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"  # noqa: E501
                .format(model_type, allowed_values)
            )

        self._model_type = model_type

    @property
    def status_data_type(self):
        """Gets the status_data_type of this EquipmentUpgradeStatusData.  # noqa: E501


        :return: The status_data_type of this EquipmentUpgradeStatusData.  # noqa: E501
        :rtype: str
        """
        return self._status_data_type

    @status_data_type.setter
    def status_data_type(self, status_data_type):
        """Sets the status_data_type of this EquipmentUpgradeStatusData.


        :param status_data_type: The status_data_type of this EquipmentUpgradeStatusData.  # noqa: E501
        :type: str
        """
        allowed_values = ["FIRMWARE"]  # noqa: E501
        if status_data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `status_data_type` ({0}), must be one of {1}"  # noqa: E501
                .format(status_data_type, allowed_values)
            )

        self._status_data_type = status_data_type

    @property
    def active_sw_version(self):
        """Gets the active_sw_version of this EquipmentUpgradeStatusData.  # noqa: E501


        :return: The active_sw_version of this EquipmentUpgradeStatusData.  # noqa: E501
        :rtype: str
        """
        return self._active_sw_version

    @active_sw_version.setter
    def active_sw_version(self, active_sw_version):
        """Sets the active_sw_version of this EquipmentUpgradeStatusData.


        :param active_sw_version: The active_sw_version of this EquipmentUpgradeStatusData.  # noqa: E501
        :type: str
        """

        self._active_sw_version = active_sw_version

    @property
    def alternate_sw_version(self):
        """Gets the alternate_sw_version of this EquipmentUpgradeStatusData.  # noqa: E501


        :return: The alternate_sw_version of this EquipmentUpgradeStatusData.  # noqa: E501
        :rtype: str
        """
        return self._alternate_sw_version

    @alternate_sw_version.setter
    def alternate_sw_version(self, alternate_sw_version):
        """Sets the alternate_sw_version of this EquipmentUpgradeStatusData.


        :param alternate_sw_version: The alternate_sw_version of this EquipmentUpgradeStatusData.  # noqa: E501
        :type: str
        """

        self._alternate_sw_version = alternate_sw_version

    @property
    def target_sw_version(self):
        """Gets the target_sw_version of this EquipmentUpgradeStatusData.  # noqa: E501


        :return: The target_sw_version of this EquipmentUpgradeStatusData.  # noqa: E501
        :rtype: str
        """
        return self._target_sw_version

    @target_sw_version.setter
    def target_sw_version(self, target_sw_version):
        """Sets the target_sw_version of this EquipmentUpgradeStatusData.


        :param target_sw_version: The target_sw_version of this EquipmentUpgradeStatusData.  # noqa: E501
        :type: str
        """

        self._target_sw_version = target_sw_version

    @property
    def retries(self):
        """Gets the retries of this EquipmentUpgradeStatusData.  # noqa: E501


        :return: The retries of this EquipmentUpgradeStatusData.  # noqa: E501
        :rtype: int
        """
        return self._retries

    @retries.setter
    def retries(self, retries):
        """Sets the retries of this EquipmentUpgradeStatusData.


        :param retries: The retries of this EquipmentUpgradeStatusData.  # noqa: E501
        :type: int
        """

        self._retries = retries

    @property
    def upgrade_state(self):
        """Gets the upgrade_state of this EquipmentUpgradeStatusData.  # noqa: E501


        :return: The upgrade_state of this EquipmentUpgradeStatusData.  # noqa: E501
        :rtype: EquipmentUpgradeState
        """
        return self._upgrade_state

    @upgrade_state.setter
    def upgrade_state(self, upgrade_state):
        """Sets the upgrade_state of this EquipmentUpgradeStatusData.


        :param upgrade_state: The upgrade_state of this EquipmentUpgradeStatusData.  # noqa: E501
        :type: EquipmentUpgradeState
        """

        self._upgrade_state = upgrade_state

    @property
    def reason(self):
        """Gets the reason of this EquipmentUpgradeStatusData.  # noqa: E501


        :return: The reason of this EquipmentUpgradeStatusData.  # noqa: E501
        :rtype: EquipmentUpgradeFailureReason
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this EquipmentUpgradeStatusData.


        :param reason: The reason of this EquipmentUpgradeStatusData.  # noqa: E501
        :type: EquipmentUpgradeFailureReason
        """

        self._reason = reason

    @property
    def upgrade_start_time(self):
        """Gets the upgrade_start_time of this EquipmentUpgradeStatusData.  # noqa: E501


        :return: The upgrade_start_time of this EquipmentUpgradeStatusData.  # noqa: E501
        :rtype: int
        """
        return self._upgrade_start_time

    @upgrade_start_time.setter
    def upgrade_start_time(self, upgrade_start_time):
        """Sets the upgrade_start_time of this EquipmentUpgradeStatusData.


        :param upgrade_start_time: The upgrade_start_time of this EquipmentUpgradeStatusData.  # noqa: E501
        :type: int
        """

        self._upgrade_start_time = upgrade_start_time

    @property
    def switch_bank(self):
        """Gets the switch_bank of this EquipmentUpgradeStatusData.  # noqa: E501


        :return: The switch_bank of this EquipmentUpgradeStatusData.  # noqa: E501
        :rtype: bool
        """
        return self._switch_bank

    @switch_bank.setter
    def switch_bank(self, switch_bank):
        """Sets the switch_bank of this EquipmentUpgradeStatusData.


        :param switch_bank: The switch_bank of this EquipmentUpgradeStatusData.  # noqa: E501
        :type: bool
        """

        self._switch_bank = switch_bank

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EquipmentUpgradeStatusData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EquipmentUpgradeStatusData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
