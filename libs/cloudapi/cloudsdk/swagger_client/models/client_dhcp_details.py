# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClientDhcpDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dhcp_server_ip': 'str',
        'primary_dns': 'str',
        'secondary_dns': 'str',
        'subnet_mask': 'str',
        'gateway_ip': 'str',
        'lease_start_timestamp': 'int',
        'lease_time_in_seconds': 'int',
        'first_request_timestamp': 'int',
        'first_offer_timestamp': 'int',
        'first_discover_timestamp': 'int',
        'nak_timestamp': 'int',
        'from_internal': 'bool'
    }

    attribute_map = {
        'dhcp_server_ip': 'dhcpServerIp',
        'primary_dns': 'primaryDns',
        'secondary_dns': 'secondaryDns',
        'subnet_mask': 'subnetMask',
        'gateway_ip': 'gatewayIp',
        'lease_start_timestamp': 'leaseStartTimestamp',
        'lease_time_in_seconds': 'leaseTimeInSeconds',
        'first_request_timestamp': 'firstRequestTimestamp',
        'first_offer_timestamp': 'firstOfferTimestamp',
        'first_discover_timestamp': 'firstDiscoverTimestamp',
        'nak_timestamp': 'nakTimestamp',
        'from_internal': 'fromInternal'
    }

    def __init__(self, dhcp_server_ip=None, primary_dns=None, secondary_dns=None, subnet_mask=None, gateway_ip=None, lease_start_timestamp=None, lease_time_in_seconds=None, first_request_timestamp=None, first_offer_timestamp=None, first_discover_timestamp=None, nak_timestamp=None, from_internal=None):  # noqa: E501
        """ClientDhcpDetails - a model defined in Swagger"""  # noqa: E501
        self._dhcp_server_ip = None
        self._primary_dns = None
        self._secondary_dns = None
        self._subnet_mask = None
        self._gateway_ip = None
        self._lease_start_timestamp = None
        self._lease_time_in_seconds = None
        self._first_request_timestamp = None
        self._first_offer_timestamp = None
        self._first_discover_timestamp = None
        self._nak_timestamp = None
        self._from_internal = None
        self.discriminator = None
        if dhcp_server_ip is not None:
            self.dhcp_server_ip = dhcp_server_ip
        if primary_dns is not None:
            self.primary_dns = primary_dns
        if secondary_dns is not None:
            self.secondary_dns = secondary_dns
        if subnet_mask is not None:
            self.subnet_mask = subnet_mask
        if gateway_ip is not None:
            self.gateway_ip = gateway_ip
        if lease_start_timestamp is not None:
            self.lease_start_timestamp = lease_start_timestamp
        if lease_time_in_seconds is not None:
            self.lease_time_in_seconds = lease_time_in_seconds
        if first_request_timestamp is not None:
            self.first_request_timestamp = first_request_timestamp
        if first_offer_timestamp is not None:
            self.first_offer_timestamp = first_offer_timestamp
        if first_discover_timestamp is not None:
            self.first_discover_timestamp = first_discover_timestamp
        if nak_timestamp is not None:
            self.nak_timestamp = nak_timestamp
        if from_internal is not None:
            self.from_internal = from_internal

    @property
    def dhcp_server_ip(self):
        """Gets the dhcp_server_ip of this ClientDhcpDetails.  # noqa: E501


        :return: The dhcp_server_ip of this ClientDhcpDetails.  # noqa: E501
        :rtype: str
        """
        return self._dhcp_server_ip

    @dhcp_server_ip.setter
    def dhcp_server_ip(self, dhcp_server_ip):
        """Sets the dhcp_server_ip of this ClientDhcpDetails.


        :param dhcp_server_ip: The dhcp_server_ip of this ClientDhcpDetails.  # noqa: E501
        :type: str
        """

        self._dhcp_server_ip = dhcp_server_ip

    @property
    def primary_dns(self):
        """Gets the primary_dns of this ClientDhcpDetails.  # noqa: E501


        :return: The primary_dns of this ClientDhcpDetails.  # noqa: E501
        :rtype: str
        """
        return self._primary_dns

    @primary_dns.setter
    def primary_dns(self, primary_dns):
        """Sets the primary_dns of this ClientDhcpDetails.


        :param primary_dns: The primary_dns of this ClientDhcpDetails.  # noqa: E501
        :type: str
        """

        self._primary_dns = primary_dns

    @property
    def secondary_dns(self):
        """Gets the secondary_dns of this ClientDhcpDetails.  # noqa: E501


        :return: The secondary_dns of this ClientDhcpDetails.  # noqa: E501
        :rtype: str
        """
        return self._secondary_dns

    @secondary_dns.setter
    def secondary_dns(self, secondary_dns):
        """Sets the secondary_dns of this ClientDhcpDetails.


        :param secondary_dns: The secondary_dns of this ClientDhcpDetails.  # noqa: E501
        :type: str
        """

        self._secondary_dns = secondary_dns

    @property
    def subnet_mask(self):
        """Gets the subnet_mask of this ClientDhcpDetails.  # noqa: E501


        :return: The subnet_mask of this ClientDhcpDetails.  # noqa: E501
        :rtype: str
        """
        return self._subnet_mask

    @subnet_mask.setter
    def subnet_mask(self, subnet_mask):
        """Sets the subnet_mask of this ClientDhcpDetails.


        :param subnet_mask: The subnet_mask of this ClientDhcpDetails.  # noqa: E501
        :type: str
        """

        self._subnet_mask = subnet_mask

    @property
    def gateway_ip(self):
        """Gets the gateway_ip of this ClientDhcpDetails.  # noqa: E501


        :return: The gateway_ip of this ClientDhcpDetails.  # noqa: E501
        :rtype: str
        """
        return self._gateway_ip

    @gateway_ip.setter
    def gateway_ip(self, gateway_ip):
        """Sets the gateway_ip of this ClientDhcpDetails.


        :param gateway_ip: The gateway_ip of this ClientDhcpDetails.  # noqa: E501
        :type: str
        """

        self._gateway_ip = gateway_ip

    @property
    def lease_start_timestamp(self):
        """Gets the lease_start_timestamp of this ClientDhcpDetails.  # noqa: E501


        :return: The lease_start_timestamp of this ClientDhcpDetails.  # noqa: E501
        :rtype: int
        """
        return self._lease_start_timestamp

    @lease_start_timestamp.setter
    def lease_start_timestamp(self, lease_start_timestamp):
        """Sets the lease_start_timestamp of this ClientDhcpDetails.


        :param lease_start_timestamp: The lease_start_timestamp of this ClientDhcpDetails.  # noqa: E501
        :type: int
        """

        self._lease_start_timestamp = lease_start_timestamp

    @property
    def lease_time_in_seconds(self):
        """Gets the lease_time_in_seconds of this ClientDhcpDetails.  # noqa: E501


        :return: The lease_time_in_seconds of this ClientDhcpDetails.  # noqa: E501
        :rtype: int
        """
        return self._lease_time_in_seconds

    @lease_time_in_seconds.setter
    def lease_time_in_seconds(self, lease_time_in_seconds):
        """Sets the lease_time_in_seconds of this ClientDhcpDetails.


        :param lease_time_in_seconds: The lease_time_in_seconds of this ClientDhcpDetails.  # noqa: E501
        :type: int
        """

        self._lease_time_in_seconds = lease_time_in_seconds

    @property
    def first_request_timestamp(self):
        """Gets the first_request_timestamp of this ClientDhcpDetails.  # noqa: E501


        :return: The first_request_timestamp of this ClientDhcpDetails.  # noqa: E501
        :rtype: int
        """
        return self._first_request_timestamp

    @first_request_timestamp.setter
    def first_request_timestamp(self, first_request_timestamp):
        """Sets the first_request_timestamp of this ClientDhcpDetails.


        :param first_request_timestamp: The first_request_timestamp of this ClientDhcpDetails.  # noqa: E501
        :type: int
        """

        self._first_request_timestamp = first_request_timestamp

    @property
    def first_offer_timestamp(self):
        """Gets the first_offer_timestamp of this ClientDhcpDetails.  # noqa: E501


        :return: The first_offer_timestamp of this ClientDhcpDetails.  # noqa: E501
        :rtype: int
        """
        return self._first_offer_timestamp

    @first_offer_timestamp.setter
    def first_offer_timestamp(self, first_offer_timestamp):
        """Sets the first_offer_timestamp of this ClientDhcpDetails.


        :param first_offer_timestamp: The first_offer_timestamp of this ClientDhcpDetails.  # noqa: E501
        :type: int
        """

        self._first_offer_timestamp = first_offer_timestamp

    @property
    def first_discover_timestamp(self):
        """Gets the first_discover_timestamp of this ClientDhcpDetails.  # noqa: E501


        :return: The first_discover_timestamp of this ClientDhcpDetails.  # noqa: E501
        :rtype: int
        """
        return self._first_discover_timestamp

    @first_discover_timestamp.setter
    def first_discover_timestamp(self, first_discover_timestamp):
        """Sets the first_discover_timestamp of this ClientDhcpDetails.


        :param first_discover_timestamp: The first_discover_timestamp of this ClientDhcpDetails.  # noqa: E501
        :type: int
        """

        self._first_discover_timestamp = first_discover_timestamp

    @property
    def nak_timestamp(self):
        """Gets the nak_timestamp of this ClientDhcpDetails.  # noqa: E501


        :return: The nak_timestamp of this ClientDhcpDetails.  # noqa: E501
        :rtype: int
        """
        return self._nak_timestamp

    @nak_timestamp.setter
    def nak_timestamp(self, nak_timestamp):
        """Sets the nak_timestamp of this ClientDhcpDetails.


        :param nak_timestamp: The nak_timestamp of this ClientDhcpDetails.  # noqa: E501
        :type: int
        """

        self._nak_timestamp = nak_timestamp

    @property
    def from_internal(self):
        """Gets the from_internal of this ClientDhcpDetails.  # noqa: E501


        :return: The from_internal of this ClientDhcpDetails.  # noqa: E501
        :rtype: bool
        """
        return self._from_internal

    @from_internal.setter
    def from_internal(self, from_internal):
        """Sets the from_internal of this ClientDhcpDetails.


        :param from_internal: The from_internal of this ClientDhcpDetails.  # noqa: E501
        :type: bool
        """

        self._from_internal = from_internal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientDhcpDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientDhcpDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
