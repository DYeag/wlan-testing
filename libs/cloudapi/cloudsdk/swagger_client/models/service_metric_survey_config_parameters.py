# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceMetricSurveyConfigParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sampling_interval': 'int',
        'reporting_interval_seconds': 'int',
        'service_metric_data_type': 'ServiceMetricDataType',
        'radio_type': 'RadioType'
    }

    attribute_map = {
        'sampling_interval': 'samplingInterval',
        'reporting_interval_seconds': 'reportingIntervalSeconds',
        'service_metric_data_type': 'serviceMetricDataType',
        'radio_type': 'radioType'
    }

    def __init__(self, sampling_interval=None, reporting_interval_seconds=None, service_metric_data_type=None, radio_type=None):  # noqa: E501
        """ServiceMetricSurveyConfigParameters - a model defined in Swagger"""  # noqa: E501
        self._sampling_interval = None
        self._reporting_interval_seconds = None
        self._service_metric_data_type = None
        self._radio_type = None
        self.discriminator = None
        if sampling_interval is not None:
            self.sampling_interval = sampling_interval
        if reporting_interval_seconds is not None:
            self.reporting_interval_seconds = reporting_interval_seconds
        if service_metric_data_type is not None:
            self.service_metric_data_type = service_metric_data_type
        if radio_type is not None:
            self.radio_type = radio_type

    @property
    def sampling_interval(self):
        """Gets the sampling_interval of this ServiceMetricSurveyConfigParameters.  # noqa: E501


        :return: The sampling_interval of this ServiceMetricSurveyConfigParameters.  # noqa: E501
        :rtype: int
        """
        return self._sampling_interval

    @sampling_interval.setter
    def sampling_interval(self, sampling_interval):
        """Sets the sampling_interval of this ServiceMetricSurveyConfigParameters.


        :param sampling_interval: The sampling_interval of this ServiceMetricSurveyConfigParameters.  # noqa: E501
        :type: int
        """

        self._sampling_interval = sampling_interval

    @property
    def reporting_interval_seconds(self):
        """Gets the reporting_interval_seconds of this ServiceMetricSurveyConfigParameters.  # noqa: E501


        :return: The reporting_interval_seconds of this ServiceMetricSurveyConfigParameters.  # noqa: E501
        :rtype: int
        """
        return self._reporting_interval_seconds

    @reporting_interval_seconds.setter
    def reporting_interval_seconds(self, reporting_interval_seconds):
        """Sets the reporting_interval_seconds of this ServiceMetricSurveyConfigParameters.


        :param reporting_interval_seconds: The reporting_interval_seconds of this ServiceMetricSurveyConfigParameters.  # noqa: E501
        :type: int
        """

        self._reporting_interval_seconds = reporting_interval_seconds

    @property
    def service_metric_data_type(self):
        """Gets the service_metric_data_type of this ServiceMetricSurveyConfigParameters.  # noqa: E501


        :return: The service_metric_data_type of this ServiceMetricSurveyConfigParameters.  # noqa: E501
        :rtype: ServiceMetricDataType
        """
        return self._service_metric_data_type

    @service_metric_data_type.setter
    def service_metric_data_type(self, service_metric_data_type):
        """Sets the service_metric_data_type of this ServiceMetricSurveyConfigParameters.


        :param service_metric_data_type: The service_metric_data_type of this ServiceMetricSurveyConfigParameters.  # noqa: E501
        :type: ServiceMetricDataType
        """

        self._service_metric_data_type = service_metric_data_type

    @property
    def radio_type(self):
        """Gets the radio_type of this ServiceMetricSurveyConfigParameters.  # noqa: E501


        :return: The radio_type of this ServiceMetricSurveyConfigParameters.  # noqa: E501
        :rtype: RadioType
        """
        return self._radio_type

    @radio_type.setter
    def radio_type(self, radio_type):
        """Sets the radio_type of this ServiceMetricSurveyConfigParameters.


        :param radio_type: The radio_type of this ServiceMetricSurveyConfigParameters.  # noqa: E501
        :type: RadioType
        """

        self._radio_type = radio_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceMetricSurveyConfigParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceMetricSurveyConfigParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
