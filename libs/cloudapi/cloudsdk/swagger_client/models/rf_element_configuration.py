# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RfElementConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_type': 'str',
        'rf': 'str',
        'radio_type': 'RadioType',
        'radio_mode': 'RadioMode',
        'auto_channel_selection': 'bool',
        'beacon_interval': 'int',
        'force_scan_during_voice': 'StateSetting',
        'rts_cts_threshold': 'int',
        'channel_bandwidth': 'ChannelBandwidth',
        'mimo_mode': 'MimoMode',
        'max_num_clients': 'int',
        'multicast_rate': 'MulticastRate',
        'active_scan_settings': 'ActiveScanSettings',
        'management_rate': 'ManagementRate',
        'rx_cell_size_db': 'int',
        'probe_response_threshold_db': 'int',
        'client_disconnect_threshold_db': 'int',
        'eirp_tx_power': 'int',
        'best_ap_enabled': 'bool',
        'neighbouring_list_ap_config': 'NeighbouringAPListConfiguration',
        'min_auto_cell_size': 'int',
        'perimeter_detection_enabled': 'bool',
        'channel_hop_settings': 'ChannelHopSettings',
        'best_ap_settings': 'RadioBestApSettings'
    }

    attribute_map = {
        'model_type': 'model_type',
        'rf': 'rf',
        'radio_type': 'radioType',
        'radio_mode': 'radioMode',
        'auto_channel_selection': 'autoChannelSelection',
        'beacon_interval': 'beaconInterval',
        'force_scan_during_voice': 'forceScanDuringVoice',
        'rts_cts_threshold': 'rtsCtsThreshold',
        'channel_bandwidth': 'channelBandwidth',
        'mimo_mode': 'mimoMode',
        'max_num_clients': 'maxNumClients',
        'multicast_rate': 'multicastRate',
        'active_scan_settings': 'activeScanSettings',
        'management_rate': 'managementRate',
        'rx_cell_size_db': 'rxCellSizeDb',
        'probe_response_threshold_db': 'probeResponseThresholdDb',
        'client_disconnect_threshold_db': 'clientDisconnectThresholdDb',
        'eirp_tx_power': 'eirpTxPower',
        'best_ap_enabled': 'bestApEnabled',
        'neighbouring_list_ap_config': 'neighbouringListApConfig',
        'min_auto_cell_size': 'minAutoCellSize',
        'perimeter_detection_enabled': 'perimeterDetectionEnabled',
        'channel_hop_settings': 'channelHopSettings',
        'best_ap_settings': 'bestApSettings'
    }

    def __init__(self, model_type=None, rf=None, radio_type=None, radio_mode=None, auto_channel_selection=None, beacon_interval=None, force_scan_during_voice=None, rts_cts_threshold=None, channel_bandwidth=None, mimo_mode=None, max_num_clients=None, multicast_rate=None, active_scan_settings=None, management_rate=None, rx_cell_size_db=None, probe_response_threshold_db=None, client_disconnect_threshold_db=None, eirp_tx_power=18, best_ap_enabled=None, neighbouring_list_ap_config=None, min_auto_cell_size=None, perimeter_detection_enabled=None, channel_hop_settings=None, best_ap_settings=None):  # noqa: E501
        """RfElementConfiguration - a model defined in Swagger"""  # noqa: E501
        self._model_type = None
        self._rf = None
        self._radio_type = None
        self._radio_mode = None
        self._auto_channel_selection = None
        self._beacon_interval = None
        self._force_scan_during_voice = None
        self._rts_cts_threshold = None
        self._channel_bandwidth = None
        self._mimo_mode = None
        self._max_num_clients = None
        self._multicast_rate = None
        self._active_scan_settings = None
        self._management_rate = None
        self._rx_cell_size_db = None
        self._probe_response_threshold_db = None
        self._client_disconnect_threshold_db = None
        self._eirp_tx_power = None
        self._best_ap_enabled = None
        self._neighbouring_list_ap_config = None
        self._min_auto_cell_size = None
        self._perimeter_detection_enabled = None
        self._channel_hop_settings = None
        self._best_ap_settings = None
        self.discriminator = None
        if model_type is not None:
            self.model_type = model_type
        if rf is not None:
            self.rf = rf
        if radio_type is not None:
            self.radio_type = radio_type
        if radio_mode is not None:
            self.radio_mode = radio_mode
        if auto_channel_selection is not None:
            self.auto_channel_selection = auto_channel_selection
        if beacon_interval is not None:
            self.beacon_interval = beacon_interval
        if force_scan_during_voice is not None:
            self.force_scan_during_voice = force_scan_during_voice
        if rts_cts_threshold is not None:
            self.rts_cts_threshold = rts_cts_threshold
        if channel_bandwidth is not None:
            self.channel_bandwidth = channel_bandwidth
        if mimo_mode is not None:
            self.mimo_mode = mimo_mode
        if max_num_clients is not None:
            self.max_num_clients = max_num_clients
        if multicast_rate is not None:
            self.multicast_rate = multicast_rate
        if active_scan_settings is not None:
            self.active_scan_settings = active_scan_settings
        if management_rate is not None:
            self.management_rate = management_rate
        if rx_cell_size_db is not None:
            self.rx_cell_size_db = rx_cell_size_db
        if probe_response_threshold_db is not None:
            self.probe_response_threshold_db = probe_response_threshold_db
        if client_disconnect_threshold_db is not None:
            self.client_disconnect_threshold_db = client_disconnect_threshold_db
        if eirp_tx_power is not None:
            self.eirp_tx_power = eirp_tx_power
        if best_ap_enabled is not None:
            self.best_ap_enabled = best_ap_enabled
        if neighbouring_list_ap_config is not None:
            self.neighbouring_list_ap_config = neighbouring_list_ap_config
        if min_auto_cell_size is not None:
            self.min_auto_cell_size = min_auto_cell_size
        if perimeter_detection_enabled is not None:
            self.perimeter_detection_enabled = perimeter_detection_enabled
        if channel_hop_settings is not None:
            self.channel_hop_settings = channel_hop_settings
        if best_ap_settings is not None:
            self.best_ap_settings = best_ap_settings

    @property
    def model_type(self):
        """Gets the model_type of this RfElementConfiguration.  # noqa: E501


        :return: The model_type of this RfElementConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this RfElementConfiguration.


        :param model_type: The model_type of this RfElementConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["RfElementConfiguration"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"  # noqa: E501
                .format(model_type, allowed_values)
            )

        self._model_type = model_type

    @property
    def rf(self):
        """Gets the rf of this RfElementConfiguration.  # noqa: E501


        :return: The rf of this RfElementConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._rf

    @rf.setter
    def rf(self, rf):
        """Sets the rf of this RfElementConfiguration.


        :param rf: The rf of this RfElementConfiguration.  # noqa: E501
        :type: str
        """

        self._rf = rf

    @property
    def radio_type(self):
        """Gets the radio_type of this RfElementConfiguration.  # noqa: E501


        :return: The radio_type of this RfElementConfiguration.  # noqa: E501
        :rtype: RadioType
        """
        return self._radio_type

    @radio_type.setter
    def radio_type(self, radio_type):
        """Sets the radio_type of this RfElementConfiguration.


        :param radio_type: The radio_type of this RfElementConfiguration.  # noqa: E501
        :type: RadioType
        """

        self._radio_type = radio_type

    @property
    def radio_mode(self):
        """Gets the radio_mode of this RfElementConfiguration.  # noqa: E501


        :return: The radio_mode of this RfElementConfiguration.  # noqa: E501
        :rtype: RadioMode
        """
        return self._radio_mode

    @radio_mode.setter
    def radio_mode(self, radio_mode):
        """Sets the radio_mode of this RfElementConfiguration.


        :param radio_mode: The radio_mode of this RfElementConfiguration.  # noqa: E501
        :type: RadioMode
        """

        self._radio_mode = radio_mode

    @property
    def auto_channel_selection(self):
        """Gets the auto_channel_selection of this RfElementConfiguration.  # noqa: E501


        :return: The auto_channel_selection of this RfElementConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._auto_channel_selection

    @auto_channel_selection.setter
    def auto_channel_selection(self, auto_channel_selection):
        """Sets the auto_channel_selection of this RfElementConfiguration.


        :param auto_channel_selection: The auto_channel_selection of this RfElementConfiguration.  # noqa: E501
        :type: bool
        """

        self._auto_channel_selection = auto_channel_selection

    @property
    def beacon_interval(self):
        """Gets the beacon_interval of this RfElementConfiguration.  # noqa: E501


        :return: The beacon_interval of this RfElementConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._beacon_interval

    @beacon_interval.setter
    def beacon_interval(self, beacon_interval):
        """Sets the beacon_interval of this RfElementConfiguration.


        :param beacon_interval: The beacon_interval of this RfElementConfiguration.  # noqa: E501
        :type: int
        """

        self._beacon_interval = beacon_interval

    @property
    def force_scan_during_voice(self):
        """Gets the force_scan_during_voice of this RfElementConfiguration.  # noqa: E501


        :return: The force_scan_during_voice of this RfElementConfiguration.  # noqa: E501
        :rtype: StateSetting
        """
        return self._force_scan_during_voice

    @force_scan_during_voice.setter
    def force_scan_during_voice(self, force_scan_during_voice):
        """Sets the force_scan_during_voice of this RfElementConfiguration.


        :param force_scan_during_voice: The force_scan_during_voice of this RfElementConfiguration.  # noqa: E501
        :type: StateSetting
        """

        self._force_scan_during_voice = force_scan_during_voice

    @property
    def rts_cts_threshold(self):
        """Gets the rts_cts_threshold of this RfElementConfiguration.  # noqa: E501


        :return: The rts_cts_threshold of this RfElementConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._rts_cts_threshold

    @rts_cts_threshold.setter
    def rts_cts_threshold(self, rts_cts_threshold):
        """Sets the rts_cts_threshold of this RfElementConfiguration.


        :param rts_cts_threshold: The rts_cts_threshold of this RfElementConfiguration.  # noqa: E501
        :type: int
        """

        self._rts_cts_threshold = rts_cts_threshold

    @property
    def channel_bandwidth(self):
        """Gets the channel_bandwidth of this RfElementConfiguration.  # noqa: E501


        :return: The channel_bandwidth of this RfElementConfiguration.  # noqa: E501
        :rtype: ChannelBandwidth
        """
        return self._channel_bandwidth

    @channel_bandwidth.setter
    def channel_bandwidth(self, channel_bandwidth):
        """Sets the channel_bandwidth of this RfElementConfiguration.


        :param channel_bandwidth: The channel_bandwidth of this RfElementConfiguration.  # noqa: E501
        :type: ChannelBandwidth
        """

        self._channel_bandwidth = channel_bandwidth

    @property
    def mimo_mode(self):
        """Gets the mimo_mode of this RfElementConfiguration.  # noqa: E501


        :return: The mimo_mode of this RfElementConfiguration.  # noqa: E501
        :rtype: MimoMode
        """
        return self._mimo_mode

    @mimo_mode.setter
    def mimo_mode(self, mimo_mode):
        """Sets the mimo_mode of this RfElementConfiguration.


        :param mimo_mode: The mimo_mode of this RfElementConfiguration.  # noqa: E501
        :type: MimoMode
        """

        self._mimo_mode = mimo_mode

    @property
    def max_num_clients(self):
        """Gets the max_num_clients of this RfElementConfiguration.  # noqa: E501


        :return: The max_num_clients of this RfElementConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_num_clients

    @max_num_clients.setter
    def max_num_clients(self, max_num_clients):
        """Sets the max_num_clients of this RfElementConfiguration.


        :param max_num_clients: The max_num_clients of this RfElementConfiguration.  # noqa: E501
        :type: int
        """

        self._max_num_clients = max_num_clients

    @property
    def multicast_rate(self):
        """Gets the multicast_rate of this RfElementConfiguration.  # noqa: E501


        :return: The multicast_rate of this RfElementConfiguration.  # noqa: E501
        :rtype: MulticastRate
        """
        return self._multicast_rate

    @multicast_rate.setter
    def multicast_rate(self, multicast_rate):
        """Sets the multicast_rate of this RfElementConfiguration.


        :param multicast_rate: The multicast_rate of this RfElementConfiguration.  # noqa: E501
        :type: MulticastRate
        """

        self._multicast_rate = multicast_rate

    @property
    def active_scan_settings(self):
        """Gets the active_scan_settings of this RfElementConfiguration.  # noqa: E501


        :return: The active_scan_settings of this RfElementConfiguration.  # noqa: E501
        :rtype: ActiveScanSettings
        """
        return self._active_scan_settings

    @active_scan_settings.setter
    def active_scan_settings(self, active_scan_settings):
        """Sets the active_scan_settings of this RfElementConfiguration.


        :param active_scan_settings: The active_scan_settings of this RfElementConfiguration.  # noqa: E501
        :type: ActiveScanSettings
        """

        self._active_scan_settings = active_scan_settings

    @property
    def management_rate(self):
        """Gets the management_rate of this RfElementConfiguration.  # noqa: E501


        :return: The management_rate of this RfElementConfiguration.  # noqa: E501
        :rtype: ManagementRate
        """
        return self._management_rate

    @management_rate.setter
    def management_rate(self, management_rate):
        """Sets the management_rate of this RfElementConfiguration.


        :param management_rate: The management_rate of this RfElementConfiguration.  # noqa: E501
        :type: ManagementRate
        """

        self._management_rate = management_rate

    @property
    def rx_cell_size_db(self):
        """Gets the rx_cell_size_db of this RfElementConfiguration.  # noqa: E501


        :return: The rx_cell_size_db of this RfElementConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._rx_cell_size_db

    @rx_cell_size_db.setter
    def rx_cell_size_db(self, rx_cell_size_db):
        """Sets the rx_cell_size_db of this RfElementConfiguration.


        :param rx_cell_size_db: The rx_cell_size_db of this RfElementConfiguration.  # noqa: E501
        :type: int
        """

        self._rx_cell_size_db = rx_cell_size_db

    @property
    def probe_response_threshold_db(self):
        """Gets the probe_response_threshold_db of this RfElementConfiguration.  # noqa: E501


        :return: The probe_response_threshold_db of this RfElementConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._probe_response_threshold_db

    @probe_response_threshold_db.setter
    def probe_response_threshold_db(self, probe_response_threshold_db):
        """Sets the probe_response_threshold_db of this RfElementConfiguration.


        :param probe_response_threshold_db: The probe_response_threshold_db of this RfElementConfiguration.  # noqa: E501
        :type: int
        """

        self._probe_response_threshold_db = probe_response_threshold_db

    @property
    def client_disconnect_threshold_db(self):
        """Gets the client_disconnect_threshold_db of this RfElementConfiguration.  # noqa: E501


        :return: The client_disconnect_threshold_db of this RfElementConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._client_disconnect_threshold_db

    @client_disconnect_threshold_db.setter
    def client_disconnect_threshold_db(self, client_disconnect_threshold_db):
        """Sets the client_disconnect_threshold_db of this RfElementConfiguration.


        :param client_disconnect_threshold_db: The client_disconnect_threshold_db of this RfElementConfiguration.  # noqa: E501
        :type: int
        """

        self._client_disconnect_threshold_db = client_disconnect_threshold_db

    @property
    def eirp_tx_power(self):
        """Gets the eirp_tx_power of this RfElementConfiguration.  # noqa: E501


        :return: The eirp_tx_power of this RfElementConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._eirp_tx_power

    @eirp_tx_power.setter
    def eirp_tx_power(self, eirp_tx_power):
        """Sets the eirp_tx_power of this RfElementConfiguration.


        :param eirp_tx_power: The eirp_tx_power of this RfElementConfiguration.  # noqa: E501
        :type: int
        """

        self._eirp_tx_power = eirp_tx_power

    @property
    def best_ap_enabled(self):
        """Gets the best_ap_enabled of this RfElementConfiguration.  # noqa: E501


        :return: The best_ap_enabled of this RfElementConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._best_ap_enabled

    @best_ap_enabled.setter
    def best_ap_enabled(self, best_ap_enabled):
        """Sets the best_ap_enabled of this RfElementConfiguration.


        :param best_ap_enabled: The best_ap_enabled of this RfElementConfiguration.  # noqa: E501
        :type: bool
        """

        self._best_ap_enabled = best_ap_enabled

    @property
    def neighbouring_list_ap_config(self):
        """Gets the neighbouring_list_ap_config of this RfElementConfiguration.  # noqa: E501


        :return: The neighbouring_list_ap_config of this RfElementConfiguration.  # noqa: E501
        :rtype: NeighbouringAPListConfiguration
        """
        return self._neighbouring_list_ap_config

    @neighbouring_list_ap_config.setter
    def neighbouring_list_ap_config(self, neighbouring_list_ap_config):
        """Sets the neighbouring_list_ap_config of this RfElementConfiguration.


        :param neighbouring_list_ap_config: The neighbouring_list_ap_config of this RfElementConfiguration.  # noqa: E501
        :type: NeighbouringAPListConfiguration
        """

        self._neighbouring_list_ap_config = neighbouring_list_ap_config

    @property
    def min_auto_cell_size(self):
        """Gets the min_auto_cell_size of this RfElementConfiguration.  # noqa: E501


        :return: The min_auto_cell_size of this RfElementConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._min_auto_cell_size

    @min_auto_cell_size.setter
    def min_auto_cell_size(self, min_auto_cell_size):
        """Sets the min_auto_cell_size of this RfElementConfiguration.


        :param min_auto_cell_size: The min_auto_cell_size of this RfElementConfiguration.  # noqa: E501
        :type: int
        """

        self._min_auto_cell_size = min_auto_cell_size

    @property
    def perimeter_detection_enabled(self):
        """Gets the perimeter_detection_enabled of this RfElementConfiguration.  # noqa: E501


        :return: The perimeter_detection_enabled of this RfElementConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._perimeter_detection_enabled

    @perimeter_detection_enabled.setter
    def perimeter_detection_enabled(self, perimeter_detection_enabled):
        """Sets the perimeter_detection_enabled of this RfElementConfiguration.


        :param perimeter_detection_enabled: The perimeter_detection_enabled of this RfElementConfiguration.  # noqa: E501
        :type: bool
        """

        self._perimeter_detection_enabled = perimeter_detection_enabled

    @property
    def channel_hop_settings(self):
        """Gets the channel_hop_settings of this RfElementConfiguration.  # noqa: E501


        :return: The channel_hop_settings of this RfElementConfiguration.  # noqa: E501
        :rtype: ChannelHopSettings
        """
        return self._channel_hop_settings

    @channel_hop_settings.setter
    def channel_hop_settings(self, channel_hop_settings):
        """Sets the channel_hop_settings of this RfElementConfiguration.


        :param channel_hop_settings: The channel_hop_settings of this RfElementConfiguration.  # noqa: E501
        :type: ChannelHopSettings
        """

        self._channel_hop_settings = channel_hop_settings

    @property
    def best_ap_settings(self):
        """Gets the best_ap_settings of this RfElementConfiguration.  # noqa: E501


        :return: The best_ap_settings of this RfElementConfiguration.  # noqa: E501
        :rtype: RadioBestApSettings
        """
        return self._best_ap_settings

    @best_ap_settings.setter
    def best_ap_settings(self, best_ap_settings):
        """Sets the best_ap_settings of this RfElementConfiguration.


        :param best_ap_settings: The best_ap_settings of this RfElementConfiguration.  # noqa: E501
        :type: RadioBestApSettings
        """

        self._best_ap_settings = best_ap_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RfElementConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RfElementConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
