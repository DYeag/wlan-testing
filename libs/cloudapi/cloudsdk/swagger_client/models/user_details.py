# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_users': 'MinMaxAvgValueInt',
        'users_per_radio': 'MinMaxAvgValueIntPerRadioMap',
        'num_good_equipment': 'int',
        'num_warn_equipment': 'int',
        'num_bad_equipment': 'int',
        'user_device_per_manufacturer_counts': 'IntegerValueMap',
        'total_aps_reported': 'int',
        'indicator_value': 'int',
        'indicator_value_per_radio': 'IntegerPerRadioTypeMap',
        'link_quality_per_radio': 'LinkQualityAggregatedStatsPerRadioTypeMap',
        'client_activity_per_radio': 'ClientActivityAggregatedStatsPerRadioTypeMap'
    }

    attribute_map = {
        'total_users': 'totalUsers',
        'users_per_radio': 'usersPerRadio',
        'num_good_equipment': 'numGoodEquipment',
        'num_warn_equipment': 'numWarnEquipment',
        'num_bad_equipment': 'numBadEquipment',
        'user_device_per_manufacturer_counts': 'userDevicePerManufacturerCounts',
        'total_aps_reported': 'totalApsReported',
        'indicator_value': 'indicatorValue',
        'indicator_value_per_radio': 'indicatorValuePerRadio',
        'link_quality_per_radio': 'linkQualityPerRadio',
        'client_activity_per_radio': 'clientActivityPerRadio'
    }

    def __init__(self, total_users=None, users_per_radio=None, num_good_equipment=None, num_warn_equipment=None, num_bad_equipment=None, user_device_per_manufacturer_counts=None, total_aps_reported=None, indicator_value=None, indicator_value_per_radio=None, link_quality_per_radio=None, client_activity_per_radio=None):  # noqa: E501
        """UserDetails - a model defined in Swagger"""  # noqa: E501
        self._total_users = None
        self._users_per_radio = None
        self._num_good_equipment = None
        self._num_warn_equipment = None
        self._num_bad_equipment = None
        self._user_device_per_manufacturer_counts = None
        self._total_aps_reported = None
        self._indicator_value = None
        self._indicator_value_per_radio = None
        self._link_quality_per_radio = None
        self._client_activity_per_radio = None
        self.discriminator = None
        if total_users is not None:
            self.total_users = total_users
        if users_per_radio is not None:
            self.users_per_radio = users_per_radio
        if num_good_equipment is not None:
            self.num_good_equipment = num_good_equipment
        if num_warn_equipment is not None:
            self.num_warn_equipment = num_warn_equipment
        if num_bad_equipment is not None:
            self.num_bad_equipment = num_bad_equipment
        if user_device_per_manufacturer_counts is not None:
            self.user_device_per_manufacturer_counts = user_device_per_manufacturer_counts
        if total_aps_reported is not None:
            self.total_aps_reported = total_aps_reported
        if indicator_value is not None:
            self.indicator_value = indicator_value
        if indicator_value_per_radio is not None:
            self.indicator_value_per_radio = indicator_value_per_radio
        if link_quality_per_radio is not None:
            self.link_quality_per_radio = link_quality_per_radio
        if client_activity_per_radio is not None:
            self.client_activity_per_radio = client_activity_per_radio

    @property
    def total_users(self):
        """Gets the total_users of this UserDetails.  # noqa: E501


        :return: The total_users of this UserDetails.  # noqa: E501
        :rtype: MinMaxAvgValueInt
        """
        return self._total_users

    @total_users.setter
    def total_users(self, total_users):
        """Sets the total_users of this UserDetails.


        :param total_users: The total_users of this UserDetails.  # noqa: E501
        :type: MinMaxAvgValueInt
        """

        self._total_users = total_users

    @property
    def users_per_radio(self):
        """Gets the users_per_radio of this UserDetails.  # noqa: E501


        :return: The users_per_radio of this UserDetails.  # noqa: E501
        :rtype: MinMaxAvgValueIntPerRadioMap
        """
        return self._users_per_radio

    @users_per_radio.setter
    def users_per_radio(self, users_per_radio):
        """Sets the users_per_radio of this UserDetails.


        :param users_per_radio: The users_per_radio of this UserDetails.  # noqa: E501
        :type: MinMaxAvgValueIntPerRadioMap
        """

        self._users_per_radio = users_per_radio

    @property
    def num_good_equipment(self):
        """Gets the num_good_equipment of this UserDetails.  # noqa: E501


        :return: The num_good_equipment of this UserDetails.  # noqa: E501
        :rtype: int
        """
        return self._num_good_equipment

    @num_good_equipment.setter
    def num_good_equipment(self, num_good_equipment):
        """Sets the num_good_equipment of this UserDetails.


        :param num_good_equipment: The num_good_equipment of this UserDetails.  # noqa: E501
        :type: int
        """

        self._num_good_equipment = num_good_equipment

    @property
    def num_warn_equipment(self):
        """Gets the num_warn_equipment of this UserDetails.  # noqa: E501


        :return: The num_warn_equipment of this UserDetails.  # noqa: E501
        :rtype: int
        """
        return self._num_warn_equipment

    @num_warn_equipment.setter
    def num_warn_equipment(self, num_warn_equipment):
        """Sets the num_warn_equipment of this UserDetails.


        :param num_warn_equipment: The num_warn_equipment of this UserDetails.  # noqa: E501
        :type: int
        """

        self._num_warn_equipment = num_warn_equipment

    @property
    def num_bad_equipment(self):
        """Gets the num_bad_equipment of this UserDetails.  # noqa: E501


        :return: The num_bad_equipment of this UserDetails.  # noqa: E501
        :rtype: int
        """
        return self._num_bad_equipment

    @num_bad_equipment.setter
    def num_bad_equipment(self, num_bad_equipment):
        """Sets the num_bad_equipment of this UserDetails.


        :param num_bad_equipment: The num_bad_equipment of this UserDetails.  # noqa: E501
        :type: int
        """

        self._num_bad_equipment = num_bad_equipment

    @property
    def user_device_per_manufacturer_counts(self):
        """Gets the user_device_per_manufacturer_counts of this UserDetails.  # noqa: E501


        :return: The user_device_per_manufacturer_counts of this UserDetails.  # noqa: E501
        :rtype: IntegerValueMap
        """
        return self._user_device_per_manufacturer_counts

    @user_device_per_manufacturer_counts.setter
    def user_device_per_manufacturer_counts(self, user_device_per_manufacturer_counts):
        """Sets the user_device_per_manufacturer_counts of this UserDetails.


        :param user_device_per_manufacturer_counts: The user_device_per_manufacturer_counts of this UserDetails.  # noqa: E501
        :type: IntegerValueMap
        """

        self._user_device_per_manufacturer_counts = user_device_per_manufacturer_counts

    @property
    def total_aps_reported(self):
        """Gets the total_aps_reported of this UserDetails.  # noqa: E501


        :return: The total_aps_reported of this UserDetails.  # noqa: E501
        :rtype: int
        """
        return self._total_aps_reported

    @total_aps_reported.setter
    def total_aps_reported(self, total_aps_reported):
        """Sets the total_aps_reported of this UserDetails.


        :param total_aps_reported: The total_aps_reported of this UserDetails.  # noqa: E501
        :type: int
        """

        self._total_aps_reported = total_aps_reported

    @property
    def indicator_value(self):
        """Gets the indicator_value of this UserDetails.  # noqa: E501


        :return: The indicator_value of this UserDetails.  # noqa: E501
        :rtype: int
        """
        return self._indicator_value

    @indicator_value.setter
    def indicator_value(self, indicator_value):
        """Sets the indicator_value of this UserDetails.


        :param indicator_value: The indicator_value of this UserDetails.  # noqa: E501
        :type: int
        """

        self._indicator_value = indicator_value

    @property
    def indicator_value_per_radio(self):
        """Gets the indicator_value_per_radio of this UserDetails.  # noqa: E501


        :return: The indicator_value_per_radio of this UserDetails.  # noqa: E501
        :rtype: IntegerPerRadioTypeMap
        """
        return self._indicator_value_per_radio

    @indicator_value_per_radio.setter
    def indicator_value_per_radio(self, indicator_value_per_radio):
        """Sets the indicator_value_per_radio of this UserDetails.


        :param indicator_value_per_radio: The indicator_value_per_radio of this UserDetails.  # noqa: E501
        :type: IntegerPerRadioTypeMap
        """

        self._indicator_value_per_radio = indicator_value_per_radio

    @property
    def link_quality_per_radio(self):
        """Gets the link_quality_per_radio of this UserDetails.  # noqa: E501


        :return: The link_quality_per_radio of this UserDetails.  # noqa: E501
        :rtype: LinkQualityAggregatedStatsPerRadioTypeMap
        """
        return self._link_quality_per_radio

    @link_quality_per_radio.setter
    def link_quality_per_radio(self, link_quality_per_radio):
        """Sets the link_quality_per_radio of this UserDetails.


        :param link_quality_per_radio: The link_quality_per_radio of this UserDetails.  # noqa: E501
        :type: LinkQualityAggregatedStatsPerRadioTypeMap
        """

        self._link_quality_per_radio = link_quality_per_radio

    @property
    def client_activity_per_radio(self):
        """Gets the client_activity_per_radio of this UserDetails.  # noqa: E501


        :return: The client_activity_per_radio of this UserDetails.  # noqa: E501
        :rtype: ClientActivityAggregatedStatsPerRadioTypeMap
        """
        return self._client_activity_per_radio

    @client_activity_per_radio.setter
    def client_activity_per_radio(self, client_activity_per_radio):
        """Sets the client_activity_per_radio of this UserDetails.


        :param client_activity_per_radio: The client_activity_per_radio of this UserDetails.  # noqa: E501
        :type: ClientActivityAggregatedStatsPerRadioTypeMap
        """

        self._client_activity_per_radio = client_activity_per_radio

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
