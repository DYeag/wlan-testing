# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EquipmentAutoProvisioningSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'location_id': 'int',
        'equipment_profile_id_per_model': 'LongValueMap'
    }

    attribute_map = {
        'enabled': 'enabled',
        'location_id': 'locationId',
        'equipment_profile_id_per_model': 'equipmentProfileIdPerModel'
    }

    def __init__(self, enabled=None, location_id=None, equipment_profile_id_per_model=None):  # noqa: E501
        """EquipmentAutoProvisioningSettings - a model defined in Swagger"""  # noqa: E501
        self._enabled = None
        self._location_id = None
        self._equipment_profile_id_per_model = None
        self.discriminator = None
        if enabled is not None:
            self.enabled = enabled
        if location_id is not None:
            self.location_id = location_id
        if equipment_profile_id_per_model is not None:
            self.equipment_profile_id_per_model = equipment_profile_id_per_model

    @property
    def enabled(self):
        """Gets the enabled of this EquipmentAutoProvisioningSettings.  # noqa: E501


        :return: The enabled of this EquipmentAutoProvisioningSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this EquipmentAutoProvisioningSettings.


        :param enabled: The enabled of this EquipmentAutoProvisioningSettings.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def location_id(self):
        """Gets the location_id of this EquipmentAutoProvisioningSettings.  # noqa: E501

        auto-provisioned equipment will appear under this location  # noqa: E501

        :return: The location_id of this EquipmentAutoProvisioningSettings.  # noqa: E501
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this EquipmentAutoProvisioningSettings.

        auto-provisioned equipment will appear under this location  # noqa: E501

        :param location_id: The location_id of this EquipmentAutoProvisioningSettings.  # noqa: E501
        :type: int
        """

        self._location_id = location_id

    @property
    def equipment_profile_id_per_model(self):
        """Gets the equipment_profile_id_per_model of this EquipmentAutoProvisioningSettings.  # noqa: E501


        :return: The equipment_profile_id_per_model of this EquipmentAutoProvisioningSettings.  # noqa: E501
        :rtype: LongValueMap
        """
        return self._equipment_profile_id_per_model

    @equipment_profile_id_per_model.setter
    def equipment_profile_id_per_model(self, equipment_profile_id_per_model):
        """Sets the equipment_profile_id_per_model of this EquipmentAutoProvisioningSettings.


        :param equipment_profile_id_per_model: The equipment_profile_id_per_model of this EquipmentAutoProvisioningSettings.  # noqa: E501
        :type: LongValueMap
        """

        self._equipment_profile_id_per_model = equipment_profile_id_per_model

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EquipmentAutoProvisioningSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EquipmentAutoProvisioningSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
