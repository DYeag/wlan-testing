# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ManagedFileInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'md5checksum': 'list[int]',
        'last_modified_timestamp': 'int',
        'ap_export_url': 'str',
        'file_category': 'FileCategory',
        'file_type': 'FileType',
        'alt_slot': 'bool'
    }

    attribute_map = {
        'md5checksum': 'md5checksum',
        'last_modified_timestamp': 'lastModifiedTimestamp',
        'ap_export_url': 'apExportUrl',
        'file_category': 'fileCategory',
        'file_type': 'fileType',
        'alt_slot': 'altSlot'
    }

    def __init__(self, md5checksum=None, last_modified_timestamp=None, ap_export_url=None, file_category=None, file_type=None, alt_slot=None):  # noqa: E501
        """ManagedFileInfo - a model defined in Swagger"""  # noqa: E501
        self._md5checksum = None
        self._last_modified_timestamp = None
        self._ap_export_url = None
        self._file_category = None
        self._file_type = None
        self._alt_slot = None
        self.discriminator = None
        if md5checksum is not None:
            self.md5checksum = md5checksum
        if last_modified_timestamp is not None:
            self.last_modified_timestamp = last_modified_timestamp
        if ap_export_url is not None:
            self.ap_export_url = ap_export_url
        if file_category is not None:
            self.file_category = file_category
        if file_type is not None:
            self.file_type = file_type
        if alt_slot is not None:
            self.alt_slot = alt_slot

    @property
    def md5checksum(self):
        """Gets the md5checksum of this ManagedFileInfo.  # noqa: E501


        :return: The md5checksum of this ManagedFileInfo.  # noqa: E501
        :rtype: list[int]
        """
        return self._md5checksum

    @md5checksum.setter
    def md5checksum(self, md5checksum):
        """Sets the md5checksum of this ManagedFileInfo.


        :param md5checksum: The md5checksum of this ManagedFileInfo.  # noqa: E501
        :type: list[int]
        """

        self._md5checksum = md5checksum

    @property
    def last_modified_timestamp(self):
        """Gets the last_modified_timestamp of this ManagedFileInfo.  # noqa: E501


        :return: The last_modified_timestamp of this ManagedFileInfo.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_timestamp

    @last_modified_timestamp.setter
    def last_modified_timestamp(self, last_modified_timestamp):
        """Sets the last_modified_timestamp of this ManagedFileInfo.


        :param last_modified_timestamp: The last_modified_timestamp of this ManagedFileInfo.  # noqa: E501
        :type: int
        """

        self._last_modified_timestamp = last_modified_timestamp

    @property
    def ap_export_url(self):
        """Gets the ap_export_url of this ManagedFileInfo.  # noqa: E501


        :return: The ap_export_url of this ManagedFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._ap_export_url

    @ap_export_url.setter
    def ap_export_url(self, ap_export_url):
        """Sets the ap_export_url of this ManagedFileInfo.


        :param ap_export_url: The ap_export_url of this ManagedFileInfo.  # noqa: E501
        :type: str
        """

        self._ap_export_url = ap_export_url

    @property
    def file_category(self):
        """Gets the file_category of this ManagedFileInfo.  # noqa: E501


        :return: The file_category of this ManagedFileInfo.  # noqa: E501
        :rtype: FileCategory
        """
        return self._file_category

    @file_category.setter
    def file_category(self, file_category):
        """Sets the file_category of this ManagedFileInfo.


        :param file_category: The file_category of this ManagedFileInfo.  # noqa: E501
        :type: FileCategory
        """

        self._file_category = file_category

    @property
    def file_type(self):
        """Gets the file_type of this ManagedFileInfo.  # noqa: E501


        :return: The file_type of this ManagedFileInfo.  # noqa: E501
        :rtype: FileType
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this ManagedFileInfo.


        :param file_type: The file_type of this ManagedFileInfo.  # noqa: E501
        :type: FileType
        """

        self._file_type = file_type

    @property
    def alt_slot(self):
        """Gets the alt_slot of this ManagedFileInfo.  # noqa: E501


        :return: The alt_slot of this ManagedFileInfo.  # noqa: E501
        :rtype: bool
        """
        return self._alt_slot

    @alt_slot.setter
    def alt_slot(self, alt_slot):
        """Sets the alt_slot of this ManagedFileInfo.


        :param alt_slot: The alt_slot of this ManagedFileInfo.  # noqa: E501
        :type: bool
        """

        self._alt_slot = alt_slot

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ManagedFileInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManagedFileInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
