# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PingResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'startup_time': 'int',
        'current_time': 'int',
        'application_name': 'str',
        'host_name': 'str',
        'commit_id': 'str',
        'commit_date': 'str',
        'project_version': 'str'
    }

    attribute_map = {
        'startup_time': 'startupTime',
        'current_time': 'currentTime',
        'application_name': 'applicationName',
        'host_name': 'hostName',
        'commit_id': 'commitID',
        'commit_date': 'commitDate',
        'project_version': 'projectVersion'
    }

    def __init__(self, startup_time=None, current_time=None, application_name=None, host_name=None, commit_id=None, commit_date=None, project_version=None):  # noqa: E501
        """PingResponse - a model defined in Swagger"""  # noqa: E501
        self._startup_time = None
        self._current_time = None
        self._application_name = None
        self._host_name = None
        self._commit_id = None
        self._commit_date = None
        self._project_version = None
        self.discriminator = None
        if startup_time is not None:
            self.startup_time = startup_time
        if current_time is not None:
            self.current_time = current_time
        if application_name is not None:
            self.application_name = application_name
        if host_name is not None:
            self.host_name = host_name
        if commit_id is not None:
            self.commit_id = commit_id
        if commit_date is not None:
            self.commit_date = commit_date
        if project_version is not None:
            self.project_version = project_version

    @property
    def startup_time(self):
        """Gets the startup_time of this PingResponse.  # noqa: E501


        :return: The startup_time of this PingResponse.  # noqa: E501
        :rtype: int
        """
        return self._startup_time

    @startup_time.setter
    def startup_time(self, startup_time):
        """Sets the startup_time of this PingResponse.


        :param startup_time: The startup_time of this PingResponse.  # noqa: E501
        :type: int
        """

        self._startup_time = startup_time

    @property
    def current_time(self):
        """Gets the current_time of this PingResponse.  # noqa: E501


        :return: The current_time of this PingResponse.  # noqa: E501
        :rtype: int
        """
        return self._current_time

    @current_time.setter
    def current_time(self, current_time):
        """Sets the current_time of this PingResponse.


        :param current_time: The current_time of this PingResponse.  # noqa: E501
        :type: int
        """

        self._current_time = current_time

    @property
    def application_name(self):
        """Gets the application_name of this PingResponse.  # noqa: E501


        :return: The application_name of this PingResponse.  # noqa: E501
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this PingResponse.


        :param application_name: The application_name of this PingResponse.  # noqa: E501
        :type: str
        """

        self._application_name = application_name

    @property
    def host_name(self):
        """Gets the host_name of this PingResponse.  # noqa: E501


        :return: The host_name of this PingResponse.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this PingResponse.


        :param host_name: The host_name of this PingResponse.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def commit_id(self):
        """Gets the commit_id of this PingResponse.  # noqa: E501


        :return: The commit_id of this PingResponse.  # noqa: E501
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this PingResponse.


        :param commit_id: The commit_id of this PingResponse.  # noqa: E501
        :type: str
        """

        self._commit_id = commit_id

    @property
    def commit_date(self):
        """Gets the commit_date of this PingResponse.  # noqa: E501


        :return: The commit_date of this PingResponse.  # noqa: E501
        :rtype: str
        """
        return self._commit_date

    @commit_date.setter
    def commit_date(self, commit_date):
        """Sets the commit_date of this PingResponse.


        :param commit_date: The commit_date of this PingResponse.  # noqa: E501
        :type: str
        """

        self._commit_date = commit_date

    @property
    def project_version(self):
        """Gets the project_version of this PingResponse.  # noqa: E501


        :return: The project_version of this PingResponse.  # noqa: E501
        :rtype: str
        """
        return self._project_version

    @project_version.setter
    def project_version(self, project_version):
        """Sets the project_version of this PingResponse.


        :param project_version: The project_version of this PingResponse.  # noqa: E501
        :type: str
        """

        self._project_version = project_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PingResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PingResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
