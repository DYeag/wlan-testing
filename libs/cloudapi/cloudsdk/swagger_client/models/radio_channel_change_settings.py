# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RadioChannelChangeSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'primary_channel': 'dict(str, int)',
        'backup_channel': 'dict(str, int)'
    }

    attribute_map = {
        'primary_channel': 'primaryChannel',
        'backup_channel': 'backupChannel'
    }

    def __init__(self, primary_channel=None, backup_channel=None):  # noqa: E501
        """RadioChannelChangeSettings - a model defined in Swagger"""  # noqa: E501
        self._primary_channel = None
        self._backup_channel = None
        self.discriminator = None
        if primary_channel is not None:
            self.primary_channel = primary_channel
        self.backup_channel = backup_channel

    @property
    def primary_channel(self):
        """Gets the primary_channel of this RadioChannelChangeSettings.  # noqa: E501

        Settings for primary channels, keys by RadioType per supported frequency_band (is5GHz, is5GHzL, is5GHzU, is2dot4GHz)  # noqa: E501

        :return: The primary_channel of this RadioChannelChangeSettings.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._primary_channel

    @primary_channel.setter
    def primary_channel(self, primary_channel):
        """Sets the primary_channel of this RadioChannelChangeSettings.

        Settings for primary channels, keys by RadioType per supported frequency_band (is5GHz, is5GHzL, is5GHzU, is2dot4GHz)  # noqa: E501

        :param primary_channel: The primary_channel of this RadioChannelChangeSettings.  # noqa: E501
        :type: dict(str, int)
        """

        self._primary_channel = primary_channel

    @property
    def backup_channel(self):
        """Gets the backup_channel of this RadioChannelChangeSettings.  # noqa: E501

        Settings for backup channels, keys by RadioType per supported frequency_band (is5GHz, is5GHzL, is5GHzU, is2dot4GHz)  # noqa: E501

        :return: The backup_channel of this RadioChannelChangeSettings.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._backup_channel

    @backup_channel.setter
    def backup_channel(self, backup_channel):
        """Sets the backup_channel of this RadioChannelChangeSettings.

        Settings for backup channels, keys by RadioType per supported frequency_band (is5GHz, is5GHzL, is5GHzU, is2dot4GHz)  # noqa: E501

        :param backup_channel: The backup_channel of this RadioChannelChangeSettings.  # noqa: E501
        :type: dict(str, int)
        """
        if backup_channel is None:
            raise ValueError("Invalid value for `backup_channel`, must not be `None`")  # noqa: E501

        self._backup_channel = backup_channel

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RadioChannelChangeSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RadioChannelChangeSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
