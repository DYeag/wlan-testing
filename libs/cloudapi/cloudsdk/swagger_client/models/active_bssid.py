# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActiveBSSID(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_type': 'str',
        'bssid': 'str',
        'ssid': 'str',
        'radio_type': 'RadioType',
        'num_devices_connected': 'int'
    }

    attribute_map = {
        'model_type': 'model_type',
        'bssid': 'bssid',
        'ssid': 'ssid',
        'radio_type': 'radioType',
        'num_devices_connected': 'numDevicesConnected'
    }

    def __init__(self, model_type=None, bssid=None, ssid=None, radio_type=None, num_devices_connected=None):  # noqa: E501
        """ActiveBSSID - a model defined in Swagger"""  # noqa: E501
        self._model_type = None
        self._bssid = None
        self._ssid = None
        self._radio_type = None
        self._num_devices_connected = None
        self.discriminator = None
        if model_type is not None:
            self.model_type = model_type
        if bssid is not None:
            self.bssid = bssid
        if ssid is not None:
            self.ssid = ssid
        if radio_type is not None:
            self.radio_type = radio_type
        if num_devices_connected is not None:
            self.num_devices_connected = num_devices_connected

    @property
    def model_type(self):
        """Gets the model_type of this ActiveBSSID.  # noqa: E501


        :return: The model_type of this ActiveBSSID.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this ActiveBSSID.


        :param model_type: The model_type of this ActiveBSSID.  # noqa: E501
        :type: str
        """
        allowed_values = ["ActiveBSSID"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"  # noqa: E501
                .format(model_type, allowed_values)
            )

        self._model_type = model_type

    @property
    def bssid(self):
        """Gets the bssid of this ActiveBSSID.  # noqa: E501


        :return: The bssid of this ActiveBSSID.  # noqa: E501
        :rtype: str
        """
        return self._bssid

    @bssid.setter
    def bssid(self, bssid):
        """Sets the bssid of this ActiveBSSID.


        :param bssid: The bssid of this ActiveBSSID.  # noqa: E501
        :type: str
        """

        self._bssid = bssid

    @property
    def ssid(self):
        """Gets the ssid of this ActiveBSSID.  # noqa: E501


        :return: The ssid of this ActiveBSSID.  # noqa: E501
        :rtype: str
        """
        return self._ssid

    @ssid.setter
    def ssid(self, ssid):
        """Sets the ssid of this ActiveBSSID.


        :param ssid: The ssid of this ActiveBSSID.  # noqa: E501
        :type: str
        """

        self._ssid = ssid

    @property
    def radio_type(self):
        """Gets the radio_type of this ActiveBSSID.  # noqa: E501


        :return: The radio_type of this ActiveBSSID.  # noqa: E501
        :rtype: RadioType
        """
        return self._radio_type

    @radio_type.setter
    def radio_type(self, radio_type):
        """Sets the radio_type of this ActiveBSSID.


        :param radio_type: The radio_type of this ActiveBSSID.  # noqa: E501
        :type: RadioType
        """

        self._radio_type = radio_type

    @property
    def num_devices_connected(self):
        """Gets the num_devices_connected of this ActiveBSSID.  # noqa: E501


        :return: The num_devices_connected of this ActiveBSSID.  # noqa: E501
        :rtype: int
        """
        return self._num_devices_connected

    @num_devices_connected.setter
    def num_devices_connected(self, num_devices_connected):
        """Sets the num_devices_connected of this ActiveBSSID.


        :param num_devices_connected: The num_devices_connected of this ActiveBSSID.  # noqa: E501
        :type: int
        """

        self._num_devices_connected = num_devices_connected

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActiveBSSID, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActiveBSSID):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
