# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RtpFlowStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'direction': 'RtpFlowDirection',
        'flow_type': 'RtpFlowType',
        'latency': 'int',
        'jitter': 'int',
        'packet_loss_consecutive': 'int',
        'code': 'int',
        'mos_multiplied_by100': 'int',
        'block_codecs': 'list[str]'
    }

    attribute_map = {
        'direction': 'direction',
        'flow_type': 'flowType',
        'latency': 'latency',
        'jitter': 'jitter',
        'packet_loss_consecutive': 'packetLossConsecutive',
        'code': 'code',
        'mos_multiplied_by100': 'mosMultipliedBy100',
        'block_codecs': 'blockCodecs'
    }

    def __init__(self, direction=None, flow_type=None, latency=None, jitter=None, packet_loss_consecutive=None, code=None, mos_multiplied_by100=None, block_codecs=None):  # noqa: E501
        """RtpFlowStats - a model defined in Swagger"""  # noqa: E501
        self._direction = None
        self._flow_type = None
        self._latency = None
        self._jitter = None
        self._packet_loss_consecutive = None
        self._code = None
        self._mos_multiplied_by100 = None
        self._block_codecs = None
        self.discriminator = None
        if direction is not None:
            self.direction = direction
        if flow_type is not None:
            self.flow_type = flow_type
        if latency is not None:
            self.latency = latency
        if jitter is not None:
            self.jitter = jitter
        if packet_loss_consecutive is not None:
            self.packet_loss_consecutive = packet_loss_consecutive
        if code is not None:
            self.code = code
        if mos_multiplied_by100 is not None:
            self.mos_multiplied_by100 = mos_multiplied_by100
        if block_codecs is not None:
            self.block_codecs = block_codecs

    @property
    def direction(self):
        """Gets the direction of this RtpFlowStats.  # noqa: E501


        :return: The direction of this RtpFlowStats.  # noqa: E501
        :rtype: RtpFlowDirection
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this RtpFlowStats.


        :param direction: The direction of this RtpFlowStats.  # noqa: E501
        :type: RtpFlowDirection
        """

        self._direction = direction

    @property
    def flow_type(self):
        """Gets the flow_type of this RtpFlowStats.  # noqa: E501


        :return: The flow_type of this RtpFlowStats.  # noqa: E501
        :rtype: RtpFlowType
        """
        return self._flow_type

    @flow_type.setter
    def flow_type(self, flow_type):
        """Sets the flow_type of this RtpFlowStats.


        :param flow_type: The flow_type of this RtpFlowStats.  # noqa: E501
        :type: RtpFlowType
        """

        self._flow_type = flow_type

    @property
    def latency(self):
        """Gets the latency of this RtpFlowStats.  # noqa: E501


        :return: The latency of this RtpFlowStats.  # noqa: E501
        :rtype: int
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this RtpFlowStats.


        :param latency: The latency of this RtpFlowStats.  # noqa: E501
        :type: int
        """

        self._latency = latency

    @property
    def jitter(self):
        """Gets the jitter of this RtpFlowStats.  # noqa: E501


        :return: The jitter of this RtpFlowStats.  # noqa: E501
        :rtype: int
        """
        return self._jitter

    @jitter.setter
    def jitter(self, jitter):
        """Sets the jitter of this RtpFlowStats.


        :param jitter: The jitter of this RtpFlowStats.  # noqa: E501
        :type: int
        """

        self._jitter = jitter

    @property
    def packet_loss_consecutive(self):
        """Gets the packet_loss_consecutive of this RtpFlowStats.  # noqa: E501


        :return: The packet_loss_consecutive of this RtpFlowStats.  # noqa: E501
        :rtype: int
        """
        return self._packet_loss_consecutive

    @packet_loss_consecutive.setter
    def packet_loss_consecutive(self, packet_loss_consecutive):
        """Sets the packet_loss_consecutive of this RtpFlowStats.


        :param packet_loss_consecutive: The packet_loss_consecutive of this RtpFlowStats.  # noqa: E501
        :type: int
        """

        self._packet_loss_consecutive = packet_loss_consecutive

    @property
    def code(self):
        """Gets the code of this RtpFlowStats.  # noqa: E501


        :return: The code of this RtpFlowStats.  # noqa: E501
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this RtpFlowStats.


        :param code: The code of this RtpFlowStats.  # noqa: E501
        :type: int
        """

        self._code = code

    @property
    def mos_multiplied_by100(self):
        """Gets the mos_multiplied_by100 of this RtpFlowStats.  # noqa: E501


        :return: The mos_multiplied_by100 of this RtpFlowStats.  # noqa: E501
        :rtype: int
        """
        return self._mos_multiplied_by100

    @mos_multiplied_by100.setter
    def mos_multiplied_by100(self, mos_multiplied_by100):
        """Sets the mos_multiplied_by100 of this RtpFlowStats.


        :param mos_multiplied_by100: The mos_multiplied_by100 of this RtpFlowStats.  # noqa: E501
        :type: int
        """

        self._mos_multiplied_by100 = mos_multiplied_by100

    @property
    def block_codecs(self):
        """Gets the block_codecs of this RtpFlowStats.  # noqa: E501


        :return: The block_codecs of this RtpFlowStats.  # noqa: E501
        :rtype: list[str]
        """
        return self._block_codecs

    @block_codecs.setter
    def block_codecs(self, block_codecs):
        """Sets the block_codecs of this RtpFlowStats.


        :param block_codecs: The block_codecs of this RtpFlowStats.  # noqa: E501
        :type: list[str]
        """

        self._block_codecs = block_codecs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RtpFlowStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RtpFlowStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
