# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LinkQualityAggregatedStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'snr': 'MinMaxAvgValueInt',
        'bad_client_count': 'int',
        'average_client_count': 'int',
        'good_client_count': 'int'
    }

    attribute_map = {
        'snr': 'snr',
        'bad_client_count': 'badClientCount',
        'average_client_count': 'averageClientCount',
        'good_client_count': 'goodClientCount'
    }

    def __init__(self, snr=None, bad_client_count=None, average_client_count=None, good_client_count=None):  # noqa: E501
        """LinkQualityAggregatedStats - a model defined in Swagger"""  # noqa: E501
        self._snr = None
        self._bad_client_count = None
        self._average_client_count = None
        self._good_client_count = None
        self.discriminator = None
        if snr is not None:
            self.snr = snr
        if bad_client_count is not None:
            self.bad_client_count = bad_client_count
        if average_client_count is not None:
            self.average_client_count = average_client_count
        if good_client_count is not None:
            self.good_client_count = good_client_count

    @property
    def snr(self):
        """Gets the snr of this LinkQualityAggregatedStats.  # noqa: E501


        :return: The snr of this LinkQualityAggregatedStats.  # noqa: E501
        :rtype: MinMaxAvgValueInt
        """
        return self._snr

    @snr.setter
    def snr(self, snr):
        """Sets the snr of this LinkQualityAggregatedStats.


        :param snr: The snr of this LinkQualityAggregatedStats.  # noqa: E501
        :type: MinMaxAvgValueInt
        """

        self._snr = snr

    @property
    def bad_client_count(self):
        """Gets the bad_client_count of this LinkQualityAggregatedStats.  # noqa: E501


        :return: The bad_client_count of this LinkQualityAggregatedStats.  # noqa: E501
        :rtype: int
        """
        return self._bad_client_count

    @bad_client_count.setter
    def bad_client_count(self, bad_client_count):
        """Sets the bad_client_count of this LinkQualityAggregatedStats.


        :param bad_client_count: The bad_client_count of this LinkQualityAggregatedStats.  # noqa: E501
        :type: int
        """

        self._bad_client_count = bad_client_count

    @property
    def average_client_count(self):
        """Gets the average_client_count of this LinkQualityAggregatedStats.  # noqa: E501


        :return: The average_client_count of this LinkQualityAggregatedStats.  # noqa: E501
        :rtype: int
        """
        return self._average_client_count

    @average_client_count.setter
    def average_client_count(self, average_client_count):
        """Sets the average_client_count of this LinkQualityAggregatedStats.


        :param average_client_count: The average_client_count of this LinkQualityAggregatedStats.  # noqa: E501
        :type: int
        """

        self._average_client_count = average_client_count

    @property
    def good_client_count(self):
        """Gets the good_client_count of this LinkQualityAggregatedStats.  # noqa: E501


        :return: The good_client_count of this LinkQualityAggregatedStats.  # noqa: E501
        :rtype: int
        """
        return self._good_client_count

    @good_client_count.setter
    def good_client_count(self, good_client_count):
        """Sets the good_client_count of this LinkQualityAggregatedStats.


        :param good_client_count: The good_client_count of this LinkQualityAggregatedStats.  # noqa: E501
        :type: int
        """

        self._good_client_count = good_client_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LinkQualityAggregatedStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LinkQualityAggregatedStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
