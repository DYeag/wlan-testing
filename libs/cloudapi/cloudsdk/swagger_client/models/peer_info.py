# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PeerInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'peer_mac': 'list[int]',
        'peer_ip': 'str',
        'tunnel': 'TunnelIndicator',
        'vlans': 'list[int]',
        'radius_secret': 'str'
    }

    attribute_map = {
        'peer_mac': 'peerMAC',
        'peer_ip': 'peerIP',
        'tunnel': 'tunnel',
        'vlans': 'vlans',
        'radius_secret': 'radiusSecret'
    }

    def __init__(self, peer_mac=None, peer_ip=None, tunnel=None, vlans=None, radius_secret=None):  # noqa: E501
        """PeerInfo - a model defined in Swagger"""  # noqa: E501
        self._peer_mac = None
        self._peer_ip = None
        self._tunnel = None
        self._vlans = None
        self._radius_secret = None
        self.discriminator = None
        if peer_mac is not None:
            self.peer_mac = peer_mac
        if peer_ip is not None:
            self.peer_ip = peer_ip
        if tunnel is not None:
            self.tunnel = tunnel
        if vlans is not None:
            self.vlans = vlans
        if radius_secret is not None:
            self.radius_secret = radius_secret

    @property
    def peer_mac(self):
        """Gets the peer_mac of this PeerInfo.  # noqa: E501


        :return: The peer_mac of this PeerInfo.  # noqa: E501
        :rtype: list[int]
        """
        return self._peer_mac

    @peer_mac.setter
    def peer_mac(self, peer_mac):
        """Sets the peer_mac of this PeerInfo.


        :param peer_mac: The peer_mac of this PeerInfo.  # noqa: E501
        :type: list[int]
        """

        self._peer_mac = peer_mac

    @property
    def peer_ip(self):
        """Gets the peer_ip of this PeerInfo.  # noqa: E501


        :return: The peer_ip of this PeerInfo.  # noqa: E501
        :rtype: str
        """
        return self._peer_ip

    @peer_ip.setter
    def peer_ip(self, peer_ip):
        """Sets the peer_ip of this PeerInfo.


        :param peer_ip: The peer_ip of this PeerInfo.  # noqa: E501
        :type: str
        """

        self._peer_ip = peer_ip

    @property
    def tunnel(self):
        """Gets the tunnel of this PeerInfo.  # noqa: E501


        :return: The tunnel of this PeerInfo.  # noqa: E501
        :rtype: TunnelIndicator
        """
        return self._tunnel

    @tunnel.setter
    def tunnel(self, tunnel):
        """Sets the tunnel of this PeerInfo.


        :param tunnel: The tunnel of this PeerInfo.  # noqa: E501
        :type: TunnelIndicator
        """

        self._tunnel = tunnel

    @property
    def vlans(self):
        """Gets the vlans of this PeerInfo.  # noqa: E501


        :return: The vlans of this PeerInfo.  # noqa: E501
        :rtype: list[int]
        """
        return self._vlans

    @vlans.setter
    def vlans(self, vlans):
        """Sets the vlans of this PeerInfo.


        :param vlans: The vlans of this PeerInfo.  # noqa: E501
        :type: list[int]
        """

        self._vlans = vlans

    @property
    def radius_secret(self):
        """Gets the radius_secret of this PeerInfo.  # noqa: E501


        :return: The radius_secret of this PeerInfo.  # noqa: E501
        :rtype: str
        """
        return self._radius_secret

    @radius_secret.setter
    def radius_secret(self, radius_secret):
        """Sets the radius_secret of this PeerInfo.


        :param radius_secret: The radius_secret of this PeerInfo.  # noqa: E501
        :type: str
        """

        self._radius_secret = radius_secret

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PeerInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PeerInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
