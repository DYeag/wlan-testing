# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NoiseFloorPerRadioDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'noise_floor': 'MinMaxAvgValueInt',
        'num_good_equipment': 'int',
        'num_warn_equipment': 'int',
        'num_bad_equipment': 'int'
    }

    attribute_map = {
        'noise_floor': 'noiseFloor',
        'num_good_equipment': 'numGoodEquipment',
        'num_warn_equipment': 'numWarnEquipment',
        'num_bad_equipment': 'numBadEquipment'
    }

    def __init__(self, noise_floor=None, num_good_equipment=None, num_warn_equipment=None, num_bad_equipment=None):  # noqa: E501
        """NoiseFloorPerRadioDetails - a model defined in Swagger"""  # noqa: E501
        self._noise_floor = None
        self._num_good_equipment = None
        self._num_warn_equipment = None
        self._num_bad_equipment = None
        self.discriminator = None
        if noise_floor is not None:
            self.noise_floor = noise_floor
        if num_good_equipment is not None:
            self.num_good_equipment = num_good_equipment
        if num_warn_equipment is not None:
            self.num_warn_equipment = num_warn_equipment
        if num_bad_equipment is not None:
            self.num_bad_equipment = num_bad_equipment

    @property
    def noise_floor(self):
        """Gets the noise_floor of this NoiseFloorPerRadioDetails.  # noqa: E501


        :return: The noise_floor of this NoiseFloorPerRadioDetails.  # noqa: E501
        :rtype: MinMaxAvgValueInt
        """
        return self._noise_floor

    @noise_floor.setter
    def noise_floor(self, noise_floor):
        """Sets the noise_floor of this NoiseFloorPerRadioDetails.


        :param noise_floor: The noise_floor of this NoiseFloorPerRadioDetails.  # noqa: E501
        :type: MinMaxAvgValueInt
        """

        self._noise_floor = noise_floor

    @property
    def num_good_equipment(self):
        """Gets the num_good_equipment of this NoiseFloorPerRadioDetails.  # noqa: E501


        :return: The num_good_equipment of this NoiseFloorPerRadioDetails.  # noqa: E501
        :rtype: int
        """
        return self._num_good_equipment

    @num_good_equipment.setter
    def num_good_equipment(self, num_good_equipment):
        """Sets the num_good_equipment of this NoiseFloorPerRadioDetails.


        :param num_good_equipment: The num_good_equipment of this NoiseFloorPerRadioDetails.  # noqa: E501
        :type: int
        """

        self._num_good_equipment = num_good_equipment

    @property
    def num_warn_equipment(self):
        """Gets the num_warn_equipment of this NoiseFloorPerRadioDetails.  # noqa: E501


        :return: The num_warn_equipment of this NoiseFloorPerRadioDetails.  # noqa: E501
        :rtype: int
        """
        return self._num_warn_equipment

    @num_warn_equipment.setter
    def num_warn_equipment(self, num_warn_equipment):
        """Sets the num_warn_equipment of this NoiseFloorPerRadioDetails.


        :param num_warn_equipment: The num_warn_equipment of this NoiseFloorPerRadioDetails.  # noqa: E501
        :type: int
        """

        self._num_warn_equipment = num_warn_equipment

    @property
    def num_bad_equipment(self):
        """Gets the num_bad_equipment of this NoiseFloorPerRadioDetails.  # noqa: E501


        :return: The num_bad_equipment of this NoiseFloorPerRadioDetails.  # noqa: E501
        :rtype: int
        """
        return self._num_bad_equipment

    @num_bad_equipment.setter
    def num_bad_equipment(self, num_bad_equipment):
        """Sets the num_bad_equipment of this NoiseFloorPerRadioDetails.


        :param num_bad_equipment: The num_bad_equipment of this NoiseFloorPerRadioDetails.  # noqa: E501
        :type: int
        """

        self._num_bad_equipment = num_bad_equipment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NoiseFloorPerRadioDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NoiseFloorPerRadioDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
