# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RadioConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'radio_type': 'RadioType',
        'radio_admin_state': 'StateSetting',
        'fragmentation_threshold_bytes': 'int',
        'uapsd_state': 'StateSetting',
        'station_isolation': 'StateSetting',
        'multicast_rate': 'SourceSelectionMulticast',
        'management_rate': 'SourceSelectionManagement',
        'best_ap_settings': 'SourceSelectionSteering',
        'legacy_bss_rate': 'StateSetting',
        'dtim_period': 'int',
        'deauth_attack_detection': 'bool'
    }

    attribute_map = {
        'radio_type': 'radioType',
        'radio_admin_state': 'radioAdminState',
        'fragmentation_threshold_bytes': 'fragmentationThresholdBytes',
        'uapsd_state': 'uapsdState',
        'station_isolation': 'stationIsolation',
        'multicast_rate': 'multicastRate',
        'management_rate': 'managementRate',
        'best_ap_settings': 'bestApSettings',
        'legacy_bss_rate': 'legacyBSSRate',
        'dtim_period': 'dtimPeriod',
        'deauth_attack_detection': 'deauthAttackDetection'
    }

    def __init__(self, radio_type=None, radio_admin_state=None, fragmentation_threshold_bytes=None, uapsd_state=None, station_isolation=None, multicast_rate=None, management_rate=None, best_ap_settings=None, legacy_bss_rate=None, dtim_period=None, deauth_attack_detection=None):  # noqa: E501
        """RadioConfiguration - a model defined in Swagger"""  # noqa: E501
        self._radio_type = None
        self._radio_admin_state = None
        self._fragmentation_threshold_bytes = None
        self._uapsd_state = None
        self._station_isolation = None
        self._multicast_rate = None
        self._management_rate = None
        self._best_ap_settings = None
        self._legacy_bss_rate = None
        self._dtim_period = None
        self._deauth_attack_detection = None
        self.discriminator = None
        if radio_type is not None:
            self.radio_type = radio_type
        if radio_admin_state is not None:
            self.radio_admin_state = radio_admin_state
        if fragmentation_threshold_bytes is not None:
            self.fragmentation_threshold_bytes = fragmentation_threshold_bytes
        if uapsd_state is not None:
            self.uapsd_state = uapsd_state
        if station_isolation is not None:
            self.station_isolation = station_isolation
        if multicast_rate is not None:
            self.multicast_rate = multicast_rate
        if management_rate is not None:
            self.management_rate = management_rate
        if best_ap_settings is not None:
            self.best_ap_settings = best_ap_settings
        if legacy_bss_rate is not None:
            self.legacy_bss_rate = legacy_bss_rate
        if dtim_period is not None:
            self.dtim_period = dtim_period
        if deauth_attack_detection is not None:
            self.deauth_attack_detection = deauth_attack_detection

    @property
    def radio_type(self):
        """Gets the radio_type of this RadioConfiguration.  # noqa: E501


        :return: The radio_type of this RadioConfiguration.  # noqa: E501
        :rtype: RadioType
        """
        return self._radio_type

    @radio_type.setter
    def radio_type(self, radio_type):
        """Sets the radio_type of this RadioConfiguration.


        :param radio_type: The radio_type of this RadioConfiguration.  # noqa: E501
        :type: RadioType
        """

        self._radio_type = radio_type

    @property
    def radio_admin_state(self):
        """Gets the radio_admin_state of this RadioConfiguration.  # noqa: E501


        :return: The radio_admin_state of this RadioConfiguration.  # noqa: E501
        :rtype: StateSetting
        """
        return self._radio_admin_state

    @radio_admin_state.setter
    def radio_admin_state(self, radio_admin_state):
        """Sets the radio_admin_state of this RadioConfiguration.


        :param radio_admin_state: The radio_admin_state of this RadioConfiguration.  # noqa: E501
        :type: StateSetting
        """

        self._radio_admin_state = radio_admin_state

    @property
    def fragmentation_threshold_bytes(self):
        """Gets the fragmentation_threshold_bytes of this RadioConfiguration.  # noqa: E501


        :return: The fragmentation_threshold_bytes of this RadioConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._fragmentation_threshold_bytes

    @fragmentation_threshold_bytes.setter
    def fragmentation_threshold_bytes(self, fragmentation_threshold_bytes):
        """Sets the fragmentation_threshold_bytes of this RadioConfiguration.


        :param fragmentation_threshold_bytes: The fragmentation_threshold_bytes of this RadioConfiguration.  # noqa: E501
        :type: int
        """

        self._fragmentation_threshold_bytes = fragmentation_threshold_bytes

    @property
    def uapsd_state(self):
        """Gets the uapsd_state of this RadioConfiguration.  # noqa: E501


        :return: The uapsd_state of this RadioConfiguration.  # noqa: E501
        :rtype: StateSetting
        """
        return self._uapsd_state

    @uapsd_state.setter
    def uapsd_state(self, uapsd_state):
        """Sets the uapsd_state of this RadioConfiguration.


        :param uapsd_state: The uapsd_state of this RadioConfiguration.  # noqa: E501
        :type: StateSetting
        """

        self._uapsd_state = uapsd_state

    @property
    def station_isolation(self):
        """Gets the station_isolation of this RadioConfiguration.  # noqa: E501


        :return: The station_isolation of this RadioConfiguration.  # noqa: E501
        :rtype: StateSetting
        """
        return self._station_isolation

    @station_isolation.setter
    def station_isolation(self, station_isolation):
        """Sets the station_isolation of this RadioConfiguration.


        :param station_isolation: The station_isolation of this RadioConfiguration.  # noqa: E501
        :type: StateSetting
        """

        self._station_isolation = station_isolation

    @property
    def multicast_rate(self):
        """Gets the multicast_rate of this RadioConfiguration.  # noqa: E501


        :return: The multicast_rate of this RadioConfiguration.  # noqa: E501
        :rtype: SourceSelectionMulticast
        """
        return self._multicast_rate

    @multicast_rate.setter
    def multicast_rate(self, multicast_rate):
        """Sets the multicast_rate of this RadioConfiguration.


        :param multicast_rate: The multicast_rate of this RadioConfiguration.  # noqa: E501
        :type: SourceSelectionMulticast
        """

        self._multicast_rate = multicast_rate

    @property
    def management_rate(self):
        """Gets the management_rate of this RadioConfiguration.  # noqa: E501


        :return: The management_rate of this RadioConfiguration.  # noqa: E501
        :rtype: SourceSelectionManagement
        """
        return self._management_rate

    @management_rate.setter
    def management_rate(self, management_rate):
        """Sets the management_rate of this RadioConfiguration.


        :param management_rate: The management_rate of this RadioConfiguration.  # noqa: E501
        :type: SourceSelectionManagement
        """

        self._management_rate = management_rate

    @property
    def best_ap_settings(self):
        """Gets the best_ap_settings of this RadioConfiguration.  # noqa: E501


        :return: The best_ap_settings of this RadioConfiguration.  # noqa: E501
        :rtype: SourceSelectionSteering
        """
        return self._best_ap_settings

    @best_ap_settings.setter
    def best_ap_settings(self, best_ap_settings):
        """Sets the best_ap_settings of this RadioConfiguration.


        :param best_ap_settings: The best_ap_settings of this RadioConfiguration.  # noqa: E501
        :type: SourceSelectionSteering
        """

        self._best_ap_settings = best_ap_settings

    @property
    def legacy_bss_rate(self):
        """Gets the legacy_bss_rate of this RadioConfiguration.  # noqa: E501


        :return: The legacy_bss_rate of this RadioConfiguration.  # noqa: E501
        :rtype: StateSetting
        """
        return self._legacy_bss_rate

    @legacy_bss_rate.setter
    def legacy_bss_rate(self, legacy_bss_rate):
        """Sets the legacy_bss_rate of this RadioConfiguration.


        :param legacy_bss_rate: The legacy_bss_rate of this RadioConfiguration.  # noqa: E501
        :type: StateSetting
        """

        self._legacy_bss_rate = legacy_bss_rate

    @property
    def dtim_period(self):
        """Gets the dtim_period of this RadioConfiguration.  # noqa: E501


        :return: The dtim_period of this RadioConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._dtim_period

    @dtim_period.setter
    def dtim_period(self, dtim_period):
        """Sets the dtim_period of this RadioConfiguration.


        :param dtim_period: The dtim_period of this RadioConfiguration.  # noqa: E501
        :type: int
        """

        self._dtim_period = dtim_period

    @property
    def deauth_attack_detection(self):
        """Gets the deauth_attack_detection of this RadioConfiguration.  # noqa: E501


        :return: The deauth_attack_detection of this RadioConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._deauth_attack_detection

    @deauth_attack_detection.setter
    def deauth_attack_detection(self, deauth_attack_detection):
        """Sets the deauth_attack_detection of this RadioConfiguration.


        :param deauth_attack_detection: The deauth_attack_detection of this RadioConfiguration.  # noqa: E501
        :type: bool
        """

        self._deauth_attack_detection = deauth_attack_detection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RadioConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RadioConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
