# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EquipmentProtocolStatusData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_type': 'str',
        'status_data_type': 'str',
        'powered_on': 'bool',
        'protocol_state': 'EquipmentProtocolState',
        'reported_hw_version': 'str',
        'reported_sw_version': 'str',
        'reported_sw_alt_version': 'str',
        'cloud_protocol_version': 'str',
        'reported_ip_v4_addr': 'str',
        'reported_ip_v6_addr': 'str',
        'reported_mac_addr': 'MacAddress',
        'country_code': 'str',
        'system_name': 'str',
        'system_contact': 'str',
        'system_location': 'str',
        'band_plan': 'str',
        'serial_number': 'str',
        'base_mac_address': 'MacAddress',
        'reported_apc_address': 'str',
        'last_apc_update': 'int',
        'is_apc_connected': 'bool',
        'ip_based_configuration': 'str',
        'reported_sku': 'str',
        'reported_cc': 'CountryCode',
        'radius_proxy_address': 'str',
        'reported_cfg_data_version': 'int',
        'cloud_cfg_data_version': 'int'
    }

    attribute_map = {
        'model_type': 'model_type',
        'status_data_type': 'statusDataType',
        'powered_on': 'poweredOn',
        'protocol_state': 'protocolState',
        'reported_hw_version': 'reportedHwVersion',
        'reported_sw_version': 'reportedSwVersion',
        'reported_sw_alt_version': 'reportedSwAltVersion',
        'cloud_protocol_version': 'cloudProtocolVersion',
        'reported_ip_v4_addr': 'reportedIpV4Addr',
        'reported_ip_v6_addr': 'reportedIpV6Addr',
        'reported_mac_addr': 'reportedMacAddr',
        'country_code': 'countryCode',
        'system_name': 'systemName',
        'system_contact': 'systemContact',
        'system_location': 'systemLocation',
        'band_plan': 'bandPlan',
        'serial_number': 'serialNumber',
        'base_mac_address': 'baseMacAddress',
        'reported_apc_address': 'reportedApcAddress',
        'last_apc_update': 'lastApcUpdate',
        'is_apc_connected': 'isApcConnected',
        'ip_based_configuration': 'ipBasedConfiguration',
        'reported_sku': 'reportedSku',
        'reported_cc': 'reportedCC',
        'radius_proxy_address': 'radiusProxyAddress',
        'reported_cfg_data_version': 'reportedCfgDataVersion',
        'cloud_cfg_data_version': 'cloudCfgDataVersion'
    }

    def __init__(self, model_type=None, status_data_type=None, powered_on=None, protocol_state=None, reported_hw_version=None, reported_sw_version=None, reported_sw_alt_version=None, cloud_protocol_version=None, reported_ip_v4_addr=None, reported_ip_v6_addr=None, reported_mac_addr=None, country_code=None, system_name=None, system_contact=None, system_location=None, band_plan=None, serial_number=None, base_mac_address=None, reported_apc_address=None, last_apc_update=None, is_apc_connected=None, ip_based_configuration=None, reported_sku=None, reported_cc=None, radius_proxy_address=None, reported_cfg_data_version=None, cloud_cfg_data_version=None):  # noqa: E501
        """EquipmentProtocolStatusData - a model defined in Swagger"""  # noqa: E501
        self._model_type = None
        self._status_data_type = None
        self._powered_on = None
        self._protocol_state = None
        self._reported_hw_version = None
        self._reported_sw_version = None
        self._reported_sw_alt_version = None
        self._cloud_protocol_version = None
        self._reported_ip_v4_addr = None
        self._reported_ip_v6_addr = None
        self._reported_mac_addr = None
        self._country_code = None
        self._system_name = None
        self._system_contact = None
        self._system_location = None
        self._band_plan = None
        self._serial_number = None
        self._base_mac_address = None
        self._reported_apc_address = None
        self._last_apc_update = None
        self._is_apc_connected = None
        self._ip_based_configuration = None
        self._reported_sku = None
        self._reported_cc = None
        self._radius_proxy_address = None
        self._reported_cfg_data_version = None
        self._cloud_cfg_data_version = None
        self.discriminator = None
        self.model_type = model_type
        if status_data_type is not None:
            self.status_data_type = status_data_type
        if powered_on is not None:
            self.powered_on = powered_on
        if protocol_state is not None:
            self.protocol_state = protocol_state
        if reported_hw_version is not None:
            self.reported_hw_version = reported_hw_version
        if reported_sw_version is not None:
            self.reported_sw_version = reported_sw_version
        if reported_sw_alt_version is not None:
            self.reported_sw_alt_version = reported_sw_alt_version
        if cloud_protocol_version is not None:
            self.cloud_protocol_version = cloud_protocol_version
        if reported_ip_v4_addr is not None:
            self.reported_ip_v4_addr = reported_ip_v4_addr
        if reported_ip_v6_addr is not None:
            self.reported_ip_v6_addr = reported_ip_v6_addr
        if reported_mac_addr is not None:
            self.reported_mac_addr = reported_mac_addr
        if country_code is not None:
            self.country_code = country_code
        if system_name is not None:
            self.system_name = system_name
        if system_contact is not None:
            self.system_contact = system_contact
        if system_location is not None:
            self.system_location = system_location
        if band_plan is not None:
            self.band_plan = band_plan
        if serial_number is not None:
            self.serial_number = serial_number
        if base_mac_address is not None:
            self.base_mac_address = base_mac_address
        if reported_apc_address is not None:
            self.reported_apc_address = reported_apc_address
        if last_apc_update is not None:
            self.last_apc_update = last_apc_update
        if is_apc_connected is not None:
            self.is_apc_connected = is_apc_connected
        if ip_based_configuration is not None:
            self.ip_based_configuration = ip_based_configuration
        if reported_sku is not None:
            self.reported_sku = reported_sku
        if reported_cc is not None:
            self.reported_cc = reported_cc
        if radius_proxy_address is not None:
            self.radius_proxy_address = radius_proxy_address
        if reported_cfg_data_version is not None:
            self.reported_cfg_data_version = reported_cfg_data_version
        if cloud_cfg_data_version is not None:
            self.cloud_cfg_data_version = cloud_cfg_data_version

    @property
    def model_type(self):
        """Gets the model_type of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The model_type of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this EquipmentProtocolStatusData.


        :param model_type: The model_type of this EquipmentProtocolStatusData.  # noqa: E501
        :type: str
        """
        if model_type is None:
            raise ValueError("Invalid value for `model_type`, must not be `None`")  # noqa: E501
        allowed_values = ["EquipmentProtocolStatusData"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"  # noqa: E501
                .format(model_type, allowed_values)
            )

        self._model_type = model_type

    @property
    def status_data_type(self):
        """Gets the status_data_type of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The status_data_type of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: str
        """
        return self._status_data_type

    @status_data_type.setter
    def status_data_type(self, status_data_type):
        """Sets the status_data_type of this EquipmentProtocolStatusData.


        :param status_data_type: The status_data_type of this EquipmentProtocolStatusData.  # noqa: E501
        :type: str
        """
        allowed_values = ["PROTOCOL"]  # noqa: E501
        if status_data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `status_data_type` ({0}), must be one of {1}"  # noqa: E501
                .format(status_data_type, allowed_values)
            )

        self._status_data_type = status_data_type

    @property
    def powered_on(self):
        """Gets the powered_on of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The powered_on of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: bool
        """
        return self._powered_on

    @powered_on.setter
    def powered_on(self, powered_on):
        """Sets the powered_on of this EquipmentProtocolStatusData.


        :param powered_on: The powered_on of this EquipmentProtocolStatusData.  # noqa: E501
        :type: bool
        """

        self._powered_on = powered_on

    @property
    def protocol_state(self):
        """Gets the protocol_state of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The protocol_state of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: EquipmentProtocolState
        """
        return self._protocol_state

    @protocol_state.setter
    def protocol_state(self, protocol_state):
        """Sets the protocol_state of this EquipmentProtocolStatusData.


        :param protocol_state: The protocol_state of this EquipmentProtocolStatusData.  # noqa: E501
        :type: EquipmentProtocolState
        """

        self._protocol_state = protocol_state

    @property
    def reported_hw_version(self):
        """Gets the reported_hw_version of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The reported_hw_version of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: str
        """
        return self._reported_hw_version

    @reported_hw_version.setter
    def reported_hw_version(self, reported_hw_version):
        """Sets the reported_hw_version of this EquipmentProtocolStatusData.


        :param reported_hw_version: The reported_hw_version of this EquipmentProtocolStatusData.  # noqa: E501
        :type: str
        """

        self._reported_hw_version = reported_hw_version

    @property
    def reported_sw_version(self):
        """Gets the reported_sw_version of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The reported_sw_version of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: str
        """
        return self._reported_sw_version

    @reported_sw_version.setter
    def reported_sw_version(self, reported_sw_version):
        """Sets the reported_sw_version of this EquipmentProtocolStatusData.


        :param reported_sw_version: The reported_sw_version of this EquipmentProtocolStatusData.  # noqa: E501
        :type: str
        """

        self._reported_sw_version = reported_sw_version

    @property
    def reported_sw_alt_version(self):
        """Gets the reported_sw_alt_version of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The reported_sw_alt_version of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: str
        """
        return self._reported_sw_alt_version

    @reported_sw_alt_version.setter
    def reported_sw_alt_version(self, reported_sw_alt_version):
        """Sets the reported_sw_alt_version of this EquipmentProtocolStatusData.


        :param reported_sw_alt_version: The reported_sw_alt_version of this EquipmentProtocolStatusData.  # noqa: E501
        :type: str
        """

        self._reported_sw_alt_version = reported_sw_alt_version

    @property
    def cloud_protocol_version(self):
        """Gets the cloud_protocol_version of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The cloud_protocol_version of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: str
        """
        return self._cloud_protocol_version

    @cloud_protocol_version.setter
    def cloud_protocol_version(self, cloud_protocol_version):
        """Sets the cloud_protocol_version of this EquipmentProtocolStatusData.


        :param cloud_protocol_version: The cloud_protocol_version of this EquipmentProtocolStatusData.  # noqa: E501
        :type: str
        """

        self._cloud_protocol_version = cloud_protocol_version

    @property
    def reported_ip_v4_addr(self):
        """Gets the reported_ip_v4_addr of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The reported_ip_v4_addr of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: str
        """
        return self._reported_ip_v4_addr

    @reported_ip_v4_addr.setter
    def reported_ip_v4_addr(self, reported_ip_v4_addr):
        """Sets the reported_ip_v4_addr of this EquipmentProtocolStatusData.


        :param reported_ip_v4_addr: The reported_ip_v4_addr of this EquipmentProtocolStatusData.  # noqa: E501
        :type: str
        """

        self._reported_ip_v4_addr = reported_ip_v4_addr

    @property
    def reported_ip_v6_addr(self):
        """Gets the reported_ip_v6_addr of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The reported_ip_v6_addr of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: str
        """
        return self._reported_ip_v6_addr

    @reported_ip_v6_addr.setter
    def reported_ip_v6_addr(self, reported_ip_v6_addr):
        """Sets the reported_ip_v6_addr of this EquipmentProtocolStatusData.


        :param reported_ip_v6_addr: The reported_ip_v6_addr of this EquipmentProtocolStatusData.  # noqa: E501
        :type: str
        """

        self._reported_ip_v6_addr = reported_ip_v6_addr

    @property
    def reported_mac_addr(self):
        """Gets the reported_mac_addr of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The reported_mac_addr of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: MacAddress
        """
        return self._reported_mac_addr

    @reported_mac_addr.setter
    def reported_mac_addr(self, reported_mac_addr):
        """Sets the reported_mac_addr of this EquipmentProtocolStatusData.


        :param reported_mac_addr: The reported_mac_addr of this EquipmentProtocolStatusData.  # noqa: E501
        :type: MacAddress
        """

        self._reported_mac_addr = reported_mac_addr

    @property
    def country_code(self):
        """Gets the country_code of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The country_code of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this EquipmentProtocolStatusData.


        :param country_code: The country_code of this EquipmentProtocolStatusData.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def system_name(self):
        """Gets the system_name of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The system_name of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name):
        """Sets the system_name of this EquipmentProtocolStatusData.


        :param system_name: The system_name of this EquipmentProtocolStatusData.  # noqa: E501
        :type: str
        """

        self._system_name = system_name

    @property
    def system_contact(self):
        """Gets the system_contact of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The system_contact of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: str
        """
        return self._system_contact

    @system_contact.setter
    def system_contact(self, system_contact):
        """Sets the system_contact of this EquipmentProtocolStatusData.


        :param system_contact: The system_contact of this EquipmentProtocolStatusData.  # noqa: E501
        :type: str
        """

        self._system_contact = system_contact

    @property
    def system_location(self):
        """Gets the system_location of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The system_location of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: str
        """
        return self._system_location

    @system_location.setter
    def system_location(self, system_location):
        """Sets the system_location of this EquipmentProtocolStatusData.


        :param system_location: The system_location of this EquipmentProtocolStatusData.  # noqa: E501
        :type: str
        """

        self._system_location = system_location

    @property
    def band_plan(self):
        """Gets the band_plan of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The band_plan of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: str
        """
        return self._band_plan

    @band_plan.setter
    def band_plan(self, band_plan):
        """Sets the band_plan of this EquipmentProtocolStatusData.


        :param band_plan: The band_plan of this EquipmentProtocolStatusData.  # noqa: E501
        :type: str
        """

        self._band_plan = band_plan

    @property
    def serial_number(self):
        """Gets the serial_number of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The serial_number of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this EquipmentProtocolStatusData.


        :param serial_number: The serial_number of this EquipmentProtocolStatusData.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def base_mac_address(self):
        """Gets the base_mac_address of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The base_mac_address of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: MacAddress
        """
        return self._base_mac_address

    @base_mac_address.setter
    def base_mac_address(self, base_mac_address):
        """Sets the base_mac_address of this EquipmentProtocolStatusData.


        :param base_mac_address: The base_mac_address of this EquipmentProtocolStatusData.  # noqa: E501
        :type: MacAddress
        """

        self._base_mac_address = base_mac_address

    @property
    def reported_apc_address(self):
        """Gets the reported_apc_address of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The reported_apc_address of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: str
        """
        return self._reported_apc_address

    @reported_apc_address.setter
    def reported_apc_address(self, reported_apc_address):
        """Sets the reported_apc_address of this EquipmentProtocolStatusData.


        :param reported_apc_address: The reported_apc_address of this EquipmentProtocolStatusData.  # noqa: E501
        :type: str
        """

        self._reported_apc_address = reported_apc_address

    @property
    def last_apc_update(self):
        """Gets the last_apc_update of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The last_apc_update of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: int
        """
        return self._last_apc_update

    @last_apc_update.setter
    def last_apc_update(self, last_apc_update):
        """Sets the last_apc_update of this EquipmentProtocolStatusData.


        :param last_apc_update: The last_apc_update of this EquipmentProtocolStatusData.  # noqa: E501
        :type: int
        """

        self._last_apc_update = last_apc_update

    @property
    def is_apc_connected(self):
        """Gets the is_apc_connected of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The is_apc_connected of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: bool
        """
        return self._is_apc_connected

    @is_apc_connected.setter
    def is_apc_connected(self, is_apc_connected):
        """Sets the is_apc_connected of this EquipmentProtocolStatusData.


        :param is_apc_connected: The is_apc_connected of this EquipmentProtocolStatusData.  # noqa: E501
        :type: bool
        """

        self._is_apc_connected = is_apc_connected

    @property
    def ip_based_configuration(self):
        """Gets the ip_based_configuration of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The ip_based_configuration of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: str
        """
        return self._ip_based_configuration

    @ip_based_configuration.setter
    def ip_based_configuration(self, ip_based_configuration):
        """Sets the ip_based_configuration of this EquipmentProtocolStatusData.


        :param ip_based_configuration: The ip_based_configuration of this EquipmentProtocolStatusData.  # noqa: E501
        :type: str
        """

        self._ip_based_configuration = ip_based_configuration

    @property
    def reported_sku(self):
        """Gets the reported_sku of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The reported_sku of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: str
        """
        return self._reported_sku

    @reported_sku.setter
    def reported_sku(self, reported_sku):
        """Sets the reported_sku of this EquipmentProtocolStatusData.


        :param reported_sku: The reported_sku of this EquipmentProtocolStatusData.  # noqa: E501
        :type: str
        """

        self._reported_sku = reported_sku

    @property
    def reported_cc(self):
        """Gets the reported_cc of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The reported_cc of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: CountryCode
        """
        return self._reported_cc

    @reported_cc.setter
    def reported_cc(self, reported_cc):
        """Sets the reported_cc of this EquipmentProtocolStatusData.


        :param reported_cc: The reported_cc of this EquipmentProtocolStatusData.  # noqa: E501
        :type: CountryCode
        """

        self._reported_cc = reported_cc

    @property
    def radius_proxy_address(self):
        """Gets the radius_proxy_address of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The radius_proxy_address of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: str
        """
        return self._radius_proxy_address

    @radius_proxy_address.setter
    def radius_proxy_address(self, radius_proxy_address):
        """Sets the radius_proxy_address of this EquipmentProtocolStatusData.


        :param radius_proxy_address: The radius_proxy_address of this EquipmentProtocolStatusData.  # noqa: E501
        :type: str
        """

        self._radius_proxy_address = radius_proxy_address

    @property
    def reported_cfg_data_version(self):
        """Gets the reported_cfg_data_version of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The reported_cfg_data_version of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: int
        """
        return self._reported_cfg_data_version

    @reported_cfg_data_version.setter
    def reported_cfg_data_version(self, reported_cfg_data_version):
        """Sets the reported_cfg_data_version of this EquipmentProtocolStatusData.


        :param reported_cfg_data_version: The reported_cfg_data_version of this EquipmentProtocolStatusData.  # noqa: E501
        :type: int
        """

        self._reported_cfg_data_version = reported_cfg_data_version

    @property
    def cloud_cfg_data_version(self):
        """Gets the cloud_cfg_data_version of this EquipmentProtocolStatusData.  # noqa: E501


        :return: The cloud_cfg_data_version of this EquipmentProtocolStatusData.  # noqa: E501
        :rtype: int
        """
        return self._cloud_cfg_data_version

    @cloud_cfg_data_version.setter
    def cloud_cfg_data_version(self, cloud_cfg_data_version):
        """Sets the cloud_cfg_data_version of this EquipmentProtocolStatusData.


        :param cloud_cfg_data_version: The cloud_cfg_data_version of this EquipmentProtocolStatusData.  # noqa: E501
        :type: int
        """

        self._cloud_cfg_data_version = cloud_cfg_data_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EquipmentProtocolStatusData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EquipmentProtocolStatusData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
