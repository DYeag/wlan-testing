# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomerPortalDashboardStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_type': 'str',
        'status_data_type': 'str',
        'time_bucket_id': 'int',
        'time_bucket_ms': 'int',
        'equipment_in_service_count': 'int',
        'equipment_with_clients_count': 'int',
        'total_provisioned_equipment': 'int',
        'traffic_bytes_downstream': 'int',
        'traffic_bytes_upstream': 'int',
        'associated_clients_count_per_radio': 'IntegerPerRadioTypeMap',
        'client_count_per_oui': 'IntegerValueMap',
        'equipment_count_per_oui': 'IntegerValueMap',
        'alarms_count_by_severity': 'IntegerPerStatusCodeMap'
    }

    attribute_map = {
        'model_type': 'model_type',
        'status_data_type': 'statusDataType',
        'time_bucket_id': 'timeBucketId',
        'time_bucket_ms': 'timeBucketMs',
        'equipment_in_service_count': 'equipmentInServiceCount',
        'equipment_with_clients_count': 'equipmentWithClientsCount',
        'total_provisioned_equipment': 'totalProvisionedEquipment',
        'traffic_bytes_downstream': 'trafficBytesDownstream',
        'traffic_bytes_upstream': 'trafficBytesUpstream',
        'associated_clients_count_per_radio': 'associatedClientsCountPerRadio',
        'client_count_per_oui': 'clientCountPerOui',
        'equipment_count_per_oui': 'equipmentCountPerOui',
        'alarms_count_by_severity': 'alarmsCountBySeverity'
    }

    def __init__(self, model_type=None, status_data_type=None, time_bucket_id=None, time_bucket_ms=None, equipment_in_service_count=None, equipment_with_clients_count=None, total_provisioned_equipment=None, traffic_bytes_downstream=None, traffic_bytes_upstream=None, associated_clients_count_per_radio=None, client_count_per_oui=None, equipment_count_per_oui=None, alarms_count_by_severity=None):  # noqa: E501
        """CustomerPortalDashboardStatus - a model defined in Swagger"""  # noqa: E501
        self._model_type = None
        self._status_data_type = None
        self._time_bucket_id = None
        self._time_bucket_ms = None
        self._equipment_in_service_count = None
        self._equipment_with_clients_count = None
        self._total_provisioned_equipment = None
        self._traffic_bytes_downstream = None
        self._traffic_bytes_upstream = None
        self._associated_clients_count_per_radio = None
        self._client_count_per_oui = None
        self._equipment_count_per_oui = None
        self._alarms_count_by_severity = None
        self.discriminator = None
        self.model_type = model_type
        if status_data_type is not None:
            self.status_data_type = status_data_type
        if time_bucket_id is not None:
            self.time_bucket_id = time_bucket_id
        if time_bucket_ms is not None:
            self.time_bucket_ms = time_bucket_ms
        if equipment_in_service_count is not None:
            self.equipment_in_service_count = equipment_in_service_count
        if equipment_with_clients_count is not None:
            self.equipment_with_clients_count = equipment_with_clients_count
        if total_provisioned_equipment is not None:
            self.total_provisioned_equipment = total_provisioned_equipment
        if traffic_bytes_downstream is not None:
            self.traffic_bytes_downstream = traffic_bytes_downstream
        if traffic_bytes_upstream is not None:
            self.traffic_bytes_upstream = traffic_bytes_upstream
        if associated_clients_count_per_radio is not None:
            self.associated_clients_count_per_radio = associated_clients_count_per_radio
        if client_count_per_oui is not None:
            self.client_count_per_oui = client_count_per_oui
        if equipment_count_per_oui is not None:
            self.equipment_count_per_oui = equipment_count_per_oui
        if alarms_count_by_severity is not None:
            self.alarms_count_by_severity = alarms_count_by_severity

    @property
    def model_type(self):
        """Gets the model_type of this CustomerPortalDashboardStatus.  # noqa: E501


        :return: The model_type of this CustomerPortalDashboardStatus.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this CustomerPortalDashboardStatus.


        :param model_type: The model_type of this CustomerPortalDashboardStatus.  # noqa: E501
        :type: str
        """
        if model_type is None:
            raise ValueError("Invalid value for `model_type`, must not be `None`")  # noqa: E501
        allowed_values = ["CustomerPortalDashboardStatus"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"  # noqa: E501
                .format(model_type, allowed_values)
            )

        self._model_type = model_type

    @property
    def status_data_type(self):
        """Gets the status_data_type of this CustomerPortalDashboardStatus.  # noqa: E501


        :return: The status_data_type of this CustomerPortalDashboardStatus.  # noqa: E501
        :rtype: str
        """
        return self._status_data_type

    @status_data_type.setter
    def status_data_type(self, status_data_type):
        """Sets the status_data_type of this CustomerPortalDashboardStatus.


        :param status_data_type: The status_data_type of this CustomerPortalDashboardStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["CUSTOMER_DASHBOARD"]  # noqa: E501
        if status_data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `status_data_type` ({0}), must be one of {1}"  # noqa: E501
                .format(status_data_type, allowed_values)
            )

        self._status_data_type = status_data_type

    @property
    def time_bucket_id(self):
        """Gets the time_bucket_id of this CustomerPortalDashboardStatus.  # noqa: E501

        All metrics/events that have (createdTimestamp % timeBucketMs == timeBucketId) are counted in this object.  # noqa: E501

        :return: The time_bucket_id of this CustomerPortalDashboardStatus.  # noqa: E501
        :rtype: int
        """
        return self._time_bucket_id

    @time_bucket_id.setter
    def time_bucket_id(self, time_bucket_id):
        """Sets the time_bucket_id of this CustomerPortalDashboardStatus.

        All metrics/events that have (createdTimestamp % timeBucketMs == timeBucketId) are counted in this object.  # noqa: E501

        :param time_bucket_id: The time_bucket_id of this CustomerPortalDashboardStatus.  # noqa: E501
        :type: int
        """

        self._time_bucket_id = time_bucket_id

    @property
    def time_bucket_ms(self):
        """Gets the time_bucket_ms of this CustomerPortalDashboardStatus.  # noqa: E501

        Length of the time bucket in milliseconds  # noqa: E501

        :return: The time_bucket_ms of this CustomerPortalDashboardStatus.  # noqa: E501
        :rtype: int
        """
        return self._time_bucket_ms

    @time_bucket_ms.setter
    def time_bucket_ms(self, time_bucket_ms):
        """Sets the time_bucket_ms of this CustomerPortalDashboardStatus.

        Length of the time bucket in milliseconds  # noqa: E501

        :param time_bucket_ms: The time_bucket_ms of this CustomerPortalDashboardStatus.  # noqa: E501
        :type: int
        """

        self._time_bucket_ms = time_bucket_ms

    @property
    def equipment_in_service_count(self):
        """Gets the equipment_in_service_count of this CustomerPortalDashboardStatus.  # noqa: E501


        :return: The equipment_in_service_count of this CustomerPortalDashboardStatus.  # noqa: E501
        :rtype: int
        """
        return self._equipment_in_service_count

    @equipment_in_service_count.setter
    def equipment_in_service_count(self, equipment_in_service_count):
        """Sets the equipment_in_service_count of this CustomerPortalDashboardStatus.


        :param equipment_in_service_count: The equipment_in_service_count of this CustomerPortalDashboardStatus.  # noqa: E501
        :type: int
        """

        self._equipment_in_service_count = equipment_in_service_count

    @property
    def equipment_with_clients_count(self):
        """Gets the equipment_with_clients_count of this CustomerPortalDashboardStatus.  # noqa: E501


        :return: The equipment_with_clients_count of this CustomerPortalDashboardStatus.  # noqa: E501
        :rtype: int
        """
        return self._equipment_with_clients_count

    @equipment_with_clients_count.setter
    def equipment_with_clients_count(self, equipment_with_clients_count):
        """Sets the equipment_with_clients_count of this CustomerPortalDashboardStatus.


        :param equipment_with_clients_count: The equipment_with_clients_count of this CustomerPortalDashboardStatus.  # noqa: E501
        :type: int
        """

        self._equipment_with_clients_count = equipment_with_clients_count

    @property
    def total_provisioned_equipment(self):
        """Gets the total_provisioned_equipment of this CustomerPortalDashboardStatus.  # noqa: E501


        :return: The total_provisioned_equipment of this CustomerPortalDashboardStatus.  # noqa: E501
        :rtype: int
        """
        return self._total_provisioned_equipment

    @total_provisioned_equipment.setter
    def total_provisioned_equipment(self, total_provisioned_equipment):
        """Sets the total_provisioned_equipment of this CustomerPortalDashboardStatus.


        :param total_provisioned_equipment: The total_provisioned_equipment of this CustomerPortalDashboardStatus.  # noqa: E501
        :type: int
        """

        self._total_provisioned_equipment = total_provisioned_equipment

    @property
    def traffic_bytes_downstream(self):
        """Gets the traffic_bytes_downstream of this CustomerPortalDashboardStatus.  # noqa: E501


        :return: The traffic_bytes_downstream of this CustomerPortalDashboardStatus.  # noqa: E501
        :rtype: int
        """
        return self._traffic_bytes_downstream

    @traffic_bytes_downstream.setter
    def traffic_bytes_downstream(self, traffic_bytes_downstream):
        """Sets the traffic_bytes_downstream of this CustomerPortalDashboardStatus.


        :param traffic_bytes_downstream: The traffic_bytes_downstream of this CustomerPortalDashboardStatus.  # noqa: E501
        :type: int
        """

        self._traffic_bytes_downstream = traffic_bytes_downstream

    @property
    def traffic_bytes_upstream(self):
        """Gets the traffic_bytes_upstream of this CustomerPortalDashboardStatus.  # noqa: E501


        :return: The traffic_bytes_upstream of this CustomerPortalDashboardStatus.  # noqa: E501
        :rtype: int
        """
        return self._traffic_bytes_upstream

    @traffic_bytes_upstream.setter
    def traffic_bytes_upstream(self, traffic_bytes_upstream):
        """Sets the traffic_bytes_upstream of this CustomerPortalDashboardStatus.


        :param traffic_bytes_upstream: The traffic_bytes_upstream of this CustomerPortalDashboardStatus.  # noqa: E501
        :type: int
        """

        self._traffic_bytes_upstream = traffic_bytes_upstream

    @property
    def associated_clients_count_per_radio(self):
        """Gets the associated_clients_count_per_radio of this CustomerPortalDashboardStatus.  # noqa: E501


        :return: The associated_clients_count_per_radio of this CustomerPortalDashboardStatus.  # noqa: E501
        :rtype: IntegerPerRadioTypeMap
        """
        return self._associated_clients_count_per_radio

    @associated_clients_count_per_radio.setter
    def associated_clients_count_per_radio(self, associated_clients_count_per_radio):
        """Sets the associated_clients_count_per_radio of this CustomerPortalDashboardStatus.


        :param associated_clients_count_per_radio: The associated_clients_count_per_radio of this CustomerPortalDashboardStatus.  # noqa: E501
        :type: IntegerPerRadioTypeMap
        """

        self._associated_clients_count_per_radio = associated_clients_count_per_radio

    @property
    def client_count_per_oui(self):
        """Gets the client_count_per_oui of this CustomerPortalDashboardStatus.  # noqa: E501


        :return: The client_count_per_oui of this CustomerPortalDashboardStatus.  # noqa: E501
        :rtype: IntegerValueMap
        """
        return self._client_count_per_oui

    @client_count_per_oui.setter
    def client_count_per_oui(self, client_count_per_oui):
        """Sets the client_count_per_oui of this CustomerPortalDashboardStatus.


        :param client_count_per_oui: The client_count_per_oui of this CustomerPortalDashboardStatus.  # noqa: E501
        :type: IntegerValueMap
        """

        self._client_count_per_oui = client_count_per_oui

    @property
    def equipment_count_per_oui(self):
        """Gets the equipment_count_per_oui of this CustomerPortalDashboardStatus.  # noqa: E501


        :return: The equipment_count_per_oui of this CustomerPortalDashboardStatus.  # noqa: E501
        :rtype: IntegerValueMap
        """
        return self._equipment_count_per_oui

    @equipment_count_per_oui.setter
    def equipment_count_per_oui(self, equipment_count_per_oui):
        """Sets the equipment_count_per_oui of this CustomerPortalDashboardStatus.


        :param equipment_count_per_oui: The equipment_count_per_oui of this CustomerPortalDashboardStatus.  # noqa: E501
        :type: IntegerValueMap
        """

        self._equipment_count_per_oui = equipment_count_per_oui

    @property
    def alarms_count_by_severity(self):
        """Gets the alarms_count_by_severity of this CustomerPortalDashboardStatus.  # noqa: E501


        :return: The alarms_count_by_severity of this CustomerPortalDashboardStatus.  # noqa: E501
        :rtype: IntegerPerStatusCodeMap
        """
        return self._alarms_count_by_severity

    @alarms_count_by_severity.setter
    def alarms_count_by_severity(self, alarms_count_by_severity):
        """Sets the alarms_count_by_severity of this CustomerPortalDashboardStatus.


        :param alarms_count_by_severity: The alarms_count_by_severity of this CustomerPortalDashboardStatus.  # noqa: E501
        :type: IntegerPerStatusCodeMap
        """

        self._alarms_count_by_severity = alarms_count_by_severity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerPortalDashboardStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerPortalDashboardStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
