# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BlocklistDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'start_time': 'int',
        'end_time': 'int'
    }

    attribute_map = {
        'enabled': 'enabled',
        'start_time': 'startTime',
        'end_time': 'endTime'
    }

    def __init__(self, enabled=None, start_time=None, end_time=None):  # noqa: E501
        """BlocklistDetails - a model defined in Swagger"""  # noqa: E501
        self._enabled = None
        self._start_time = None
        self._end_time = None
        self.discriminator = None
        if enabled is not None:
            self.enabled = enabled
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time

    @property
    def enabled(self):
        """Gets the enabled of this BlocklistDetails.  # noqa: E501

        When enabled, blocklisting applies to the client, subject to the optional start/end times.  # noqa: E501

        :return: The enabled of this BlocklistDetails.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this BlocklistDetails.

        When enabled, blocklisting applies to the client, subject to the optional start/end times.  # noqa: E501

        :param enabled: The enabled of this BlocklistDetails.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def start_time(self):
        """Gets the start_time of this BlocklistDetails.  # noqa: E501

        Optional startTime when blocklisting becomes enabled.  # noqa: E501

        :return: The start_time of this BlocklistDetails.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this BlocklistDetails.

        Optional startTime when blocklisting becomes enabled.  # noqa: E501

        :param start_time: The start_time of this BlocklistDetails.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this BlocklistDetails.  # noqa: E501

        Optional endTime when blocklisting ceases to be enabled  # noqa: E501

        :return: The end_time of this BlocklistDetails.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this BlocklistDetails.

        Optional endTime when blocklisting ceases to be enabled  # noqa: E501

        :param end_time: The end_time of this BlocklistDetails.  # noqa: E501
        :type: int
        """

        self._end_time = end_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BlocklistDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlocklistDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
