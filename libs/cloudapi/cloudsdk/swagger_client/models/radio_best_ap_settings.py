# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RadioBestApSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ml_computed': 'bool',
        'drop_in_snr_percentage': 'int',
        'min_load_factor': 'int'
    }

    attribute_map = {
        'ml_computed': 'mlComputed',
        'drop_in_snr_percentage': 'dropInSnrPercentage',
        'min_load_factor': 'minLoadFactor'
    }

    def __init__(self, ml_computed=True, drop_in_snr_percentage=10, min_load_factor=10):  # noqa: E501
        """RadioBestApSettings - a model defined in Swagger"""  # noqa: E501
        self._ml_computed = None
        self._drop_in_snr_percentage = None
        self._min_load_factor = None
        self.discriminator = None
        if ml_computed is not None:
            self.ml_computed = ml_computed
        if drop_in_snr_percentage is not None:
            self.drop_in_snr_percentage = drop_in_snr_percentage
        if min_load_factor is not None:
            self.min_load_factor = min_load_factor

    @property
    def ml_computed(self):
        """Gets the ml_computed of this RadioBestApSettings.  # noqa: E501


        :return: The ml_computed of this RadioBestApSettings.  # noqa: E501
        :rtype: bool
        """
        return self._ml_computed

    @ml_computed.setter
    def ml_computed(self, ml_computed):
        """Sets the ml_computed of this RadioBestApSettings.


        :param ml_computed: The ml_computed of this RadioBestApSettings.  # noqa: E501
        :type: bool
        """

        self._ml_computed = ml_computed

    @property
    def drop_in_snr_percentage(self):
        """Gets the drop_in_snr_percentage of this RadioBestApSettings.  # noqa: E501


        :return: The drop_in_snr_percentage of this RadioBestApSettings.  # noqa: E501
        :rtype: int
        """
        return self._drop_in_snr_percentage

    @drop_in_snr_percentage.setter
    def drop_in_snr_percentage(self, drop_in_snr_percentage):
        """Sets the drop_in_snr_percentage of this RadioBestApSettings.


        :param drop_in_snr_percentage: The drop_in_snr_percentage of this RadioBestApSettings.  # noqa: E501
        :type: int
        """

        self._drop_in_snr_percentage = drop_in_snr_percentage

    @property
    def min_load_factor(self):
        """Gets the min_load_factor of this RadioBestApSettings.  # noqa: E501


        :return: The min_load_factor of this RadioBestApSettings.  # noqa: E501
        :rtype: int
        """
        return self._min_load_factor

    @min_load_factor.setter
    def min_load_factor(self, min_load_factor):
        """Sets the min_load_factor of this RadioBestApSettings.


        :param min_load_factor: The min_load_factor of this RadioBestApSettings.  # noqa: E501
        :type: int
        """

        self._min_load_factor = min_load_factor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RadioBestApSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RadioBestApSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
