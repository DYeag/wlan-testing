# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EquipmentRoutingRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'equipment_id': 'int',
        'customer_id': 'int',
        'gateway_id': 'int',
        'created_timestamp': 'int',
        'last_modified_timestamp': 'int'
    }

    attribute_map = {
        'id': 'id',
        'equipment_id': 'equipmentId',
        'customer_id': 'customerId',
        'gateway_id': 'gatewayId',
        'created_timestamp': 'createdTimestamp',
        'last_modified_timestamp': 'lastModifiedTimestamp'
    }

    def __init__(self, id=None, equipment_id=None, customer_id=None, gateway_id=None, created_timestamp=None, last_modified_timestamp=None):  # noqa: E501
        """EquipmentRoutingRecord - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._equipment_id = None
        self._customer_id = None
        self._gateway_id = None
        self._created_timestamp = None
        self._last_modified_timestamp = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if equipment_id is not None:
            self.equipment_id = equipment_id
        if customer_id is not None:
            self.customer_id = customer_id
        if gateway_id is not None:
            self.gateway_id = gateway_id
        if created_timestamp is not None:
            self.created_timestamp = created_timestamp
        if last_modified_timestamp is not None:
            self.last_modified_timestamp = last_modified_timestamp

    @property
    def id(self):
        """Gets the id of this EquipmentRoutingRecord.  # noqa: E501


        :return: The id of this EquipmentRoutingRecord.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EquipmentRoutingRecord.


        :param id: The id of this EquipmentRoutingRecord.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def equipment_id(self):
        """Gets the equipment_id of this EquipmentRoutingRecord.  # noqa: E501


        :return: The equipment_id of this EquipmentRoutingRecord.  # noqa: E501
        :rtype: int
        """
        return self._equipment_id

    @equipment_id.setter
    def equipment_id(self, equipment_id):
        """Sets the equipment_id of this EquipmentRoutingRecord.


        :param equipment_id: The equipment_id of this EquipmentRoutingRecord.  # noqa: E501
        :type: int
        """

        self._equipment_id = equipment_id

    @property
    def customer_id(self):
        """Gets the customer_id of this EquipmentRoutingRecord.  # noqa: E501


        :return: The customer_id of this EquipmentRoutingRecord.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this EquipmentRoutingRecord.


        :param customer_id: The customer_id of this EquipmentRoutingRecord.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def gateway_id(self):
        """Gets the gateway_id of this EquipmentRoutingRecord.  # noqa: E501


        :return: The gateway_id of this EquipmentRoutingRecord.  # noqa: E501
        :rtype: int
        """
        return self._gateway_id

    @gateway_id.setter
    def gateway_id(self, gateway_id):
        """Sets the gateway_id of this EquipmentRoutingRecord.


        :param gateway_id: The gateway_id of this EquipmentRoutingRecord.  # noqa: E501
        :type: int
        """

        self._gateway_id = gateway_id

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this EquipmentRoutingRecord.  # noqa: E501


        :return: The created_timestamp of this EquipmentRoutingRecord.  # noqa: E501
        :rtype: int
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this EquipmentRoutingRecord.


        :param created_timestamp: The created_timestamp of this EquipmentRoutingRecord.  # noqa: E501
        :type: int
        """

        self._created_timestamp = created_timestamp

    @property
    def last_modified_timestamp(self):
        """Gets the last_modified_timestamp of this EquipmentRoutingRecord.  # noqa: E501


        :return: The last_modified_timestamp of this EquipmentRoutingRecord.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_timestamp

    @last_modified_timestamp.setter
    def last_modified_timestamp(self, last_modified_timestamp):
        """Sets the last_modified_timestamp of this EquipmentRoutingRecord.


        :param last_modified_timestamp: The last_modified_timestamp of this EquipmentRoutingRecord.  # noqa: E501
        :type: int
        """

        self._last_modified_timestamp = last_modified_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EquipmentRoutingRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EquipmentRoutingRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
