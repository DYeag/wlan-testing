# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChannelPowerLevel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'channel_number': 'int',
        'power_level': 'int',
        'dfs': 'bool',
        'channel_width': 'int'
    }

    attribute_map = {
        'channel_number': 'channelNumber',
        'power_level': 'powerLevel',
        'dfs': 'dfs',
        'channel_width': 'channelWidth'
    }

    def __init__(self, channel_number=None, power_level=None, dfs=None, channel_width=None):  # noqa: E501
        """ChannelPowerLevel - a model defined in Swagger"""  # noqa: E501
        self._channel_number = None
        self._power_level = None
        self._dfs = None
        self._channel_width = None
        self.discriminator = None
        if channel_number is not None:
            self.channel_number = channel_number
        if power_level is not None:
            self.power_level = power_level
        if dfs is not None:
            self.dfs = dfs
        if channel_width is not None:
            self.channel_width = channel_width

    @property
    def channel_number(self):
        """Gets the channel_number of this ChannelPowerLevel.  # noqa: E501


        :return: The channel_number of this ChannelPowerLevel.  # noqa: E501
        :rtype: int
        """
        return self._channel_number

    @channel_number.setter
    def channel_number(self, channel_number):
        """Sets the channel_number of this ChannelPowerLevel.


        :param channel_number: The channel_number of this ChannelPowerLevel.  # noqa: E501
        :type: int
        """

        self._channel_number = channel_number

    @property
    def power_level(self):
        """Gets the power_level of this ChannelPowerLevel.  # noqa: E501


        :return: The power_level of this ChannelPowerLevel.  # noqa: E501
        :rtype: int
        """
        return self._power_level

    @power_level.setter
    def power_level(self, power_level):
        """Sets the power_level of this ChannelPowerLevel.


        :param power_level: The power_level of this ChannelPowerLevel.  # noqa: E501
        :type: int
        """

        self._power_level = power_level

    @property
    def dfs(self):
        """Gets the dfs of this ChannelPowerLevel.  # noqa: E501


        :return: The dfs of this ChannelPowerLevel.  # noqa: E501
        :rtype: bool
        """
        return self._dfs

    @dfs.setter
    def dfs(self, dfs):
        """Sets the dfs of this ChannelPowerLevel.


        :param dfs: The dfs of this ChannelPowerLevel.  # noqa: E501
        :type: bool
        """

        self._dfs = dfs

    @property
    def channel_width(self):
        """Gets the channel_width of this ChannelPowerLevel.  # noqa: E501

        Value is in MHz, -1 means AUTO  # noqa: E501

        :return: The channel_width of this ChannelPowerLevel.  # noqa: E501
        :rtype: int
        """
        return self._channel_width

    @channel_width.setter
    def channel_width(self, channel_width):
        """Sets the channel_width of this ChannelPowerLevel.

        Value is in MHz, -1 means AUTO  # noqa: E501

        :param channel_width: The channel_width of this ChannelPowerLevel.  # noqa: E501
        :type: int
        """

        self._channel_width = channel_width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChannelPowerLevel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChannelPowerLevel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
