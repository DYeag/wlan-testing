# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OperatingSystemPerformance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_type': 'str',
        'status_data_type': 'str',
        'num_cami_crashes': 'int',
        'uptime_in_seconds': 'int',
        'avg_cpu_utilization': 'float',
        'avg_cpu_per_core': 'list[float]',
        'avg_free_memory_kb': 'int',
        'total_available_memory_kb': 'int',
        'avg_cpu_temperature': 'float'
    }

    attribute_map = {
        'model_type': 'model_type',
        'status_data_type': 'statusDataType',
        'num_cami_crashes': 'numCamiCrashes',
        'uptime_in_seconds': 'uptimeInSeconds',
        'avg_cpu_utilization': 'avgCpuUtilization',
        'avg_cpu_per_core': 'avgCpuPerCore',
        'avg_free_memory_kb': 'avgFreeMemoryKb',
        'total_available_memory_kb': 'totalAvailableMemoryKb',
        'avg_cpu_temperature': 'avgCpuTemperature'
    }

    def __init__(self, model_type=None, status_data_type=None, num_cami_crashes=None, uptime_in_seconds=None, avg_cpu_utilization=None, avg_cpu_per_core=None, avg_free_memory_kb=None, total_available_memory_kb=None, avg_cpu_temperature=None):  # noqa: E501
        """OperatingSystemPerformance - a model defined in Swagger"""  # noqa: E501
        self._model_type = None
        self._status_data_type = None
        self._num_cami_crashes = None
        self._uptime_in_seconds = None
        self._avg_cpu_utilization = None
        self._avg_cpu_per_core = None
        self._avg_free_memory_kb = None
        self._total_available_memory_kb = None
        self._avg_cpu_temperature = None
        self.discriminator = None
        self.model_type = model_type
        if status_data_type is not None:
            self.status_data_type = status_data_type
        if num_cami_crashes is not None:
            self.num_cami_crashes = num_cami_crashes
        if uptime_in_seconds is not None:
            self.uptime_in_seconds = uptime_in_seconds
        if avg_cpu_utilization is not None:
            self.avg_cpu_utilization = avg_cpu_utilization
        if avg_cpu_per_core is not None:
            self.avg_cpu_per_core = avg_cpu_per_core
        if avg_free_memory_kb is not None:
            self.avg_free_memory_kb = avg_free_memory_kb
        if total_available_memory_kb is not None:
            self.total_available_memory_kb = total_available_memory_kb
        if avg_cpu_temperature is not None:
            self.avg_cpu_temperature = avg_cpu_temperature

    @property
    def model_type(self):
        """Gets the model_type of this OperatingSystemPerformance.  # noqa: E501


        :return: The model_type of this OperatingSystemPerformance.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this OperatingSystemPerformance.


        :param model_type: The model_type of this OperatingSystemPerformance.  # noqa: E501
        :type: str
        """
        if model_type is None:
            raise ValueError("Invalid value for `model_type`, must not be `None`")  # noqa: E501
        allowed_values = ["OperatingSystemPerformance"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"  # noqa: E501
                .format(model_type, allowed_values)
            )

        self._model_type = model_type

    @property
    def status_data_type(self):
        """Gets the status_data_type of this OperatingSystemPerformance.  # noqa: E501


        :return: The status_data_type of this OperatingSystemPerformance.  # noqa: E501
        :rtype: str
        """
        return self._status_data_type

    @status_data_type.setter
    def status_data_type(self, status_data_type):
        """Sets the status_data_type of this OperatingSystemPerformance.


        :param status_data_type: The status_data_type of this OperatingSystemPerformance.  # noqa: E501
        :type: str
        """
        allowed_values = ["OS_PERFORMANCE"]  # noqa: E501
        if status_data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `status_data_type` ({0}), must be one of {1}"  # noqa: E501
                .format(status_data_type, allowed_values)
            )

        self._status_data_type = status_data_type

    @property
    def num_cami_crashes(self):
        """Gets the num_cami_crashes of this OperatingSystemPerformance.  # noqa: E501


        :return: The num_cami_crashes of this OperatingSystemPerformance.  # noqa: E501
        :rtype: int
        """
        return self._num_cami_crashes

    @num_cami_crashes.setter
    def num_cami_crashes(self, num_cami_crashes):
        """Sets the num_cami_crashes of this OperatingSystemPerformance.


        :param num_cami_crashes: The num_cami_crashes of this OperatingSystemPerformance.  # noqa: E501
        :type: int
        """

        self._num_cami_crashes = num_cami_crashes

    @property
    def uptime_in_seconds(self):
        """Gets the uptime_in_seconds of this OperatingSystemPerformance.  # noqa: E501


        :return: The uptime_in_seconds of this OperatingSystemPerformance.  # noqa: E501
        :rtype: int
        """
        return self._uptime_in_seconds

    @uptime_in_seconds.setter
    def uptime_in_seconds(self, uptime_in_seconds):
        """Sets the uptime_in_seconds of this OperatingSystemPerformance.


        :param uptime_in_seconds: The uptime_in_seconds of this OperatingSystemPerformance.  # noqa: E501
        :type: int
        """

        self._uptime_in_seconds = uptime_in_seconds

    @property
    def avg_cpu_utilization(self):
        """Gets the avg_cpu_utilization of this OperatingSystemPerformance.  # noqa: E501


        :return: The avg_cpu_utilization of this OperatingSystemPerformance.  # noqa: E501
        :rtype: float
        """
        return self._avg_cpu_utilization

    @avg_cpu_utilization.setter
    def avg_cpu_utilization(self, avg_cpu_utilization):
        """Sets the avg_cpu_utilization of this OperatingSystemPerformance.


        :param avg_cpu_utilization: The avg_cpu_utilization of this OperatingSystemPerformance.  # noqa: E501
        :type: float
        """

        self._avg_cpu_utilization = avg_cpu_utilization

    @property
    def avg_cpu_per_core(self):
        """Gets the avg_cpu_per_core of this OperatingSystemPerformance.  # noqa: E501


        :return: The avg_cpu_per_core of this OperatingSystemPerformance.  # noqa: E501
        :rtype: list[float]
        """
        return self._avg_cpu_per_core

    @avg_cpu_per_core.setter
    def avg_cpu_per_core(self, avg_cpu_per_core):
        """Sets the avg_cpu_per_core of this OperatingSystemPerformance.


        :param avg_cpu_per_core: The avg_cpu_per_core of this OperatingSystemPerformance.  # noqa: E501
        :type: list[float]
        """

        self._avg_cpu_per_core = avg_cpu_per_core

    @property
    def avg_free_memory_kb(self):
        """Gets the avg_free_memory_kb of this OperatingSystemPerformance.  # noqa: E501


        :return: The avg_free_memory_kb of this OperatingSystemPerformance.  # noqa: E501
        :rtype: int
        """
        return self._avg_free_memory_kb

    @avg_free_memory_kb.setter
    def avg_free_memory_kb(self, avg_free_memory_kb):
        """Sets the avg_free_memory_kb of this OperatingSystemPerformance.


        :param avg_free_memory_kb: The avg_free_memory_kb of this OperatingSystemPerformance.  # noqa: E501
        :type: int
        """

        self._avg_free_memory_kb = avg_free_memory_kb

    @property
    def total_available_memory_kb(self):
        """Gets the total_available_memory_kb of this OperatingSystemPerformance.  # noqa: E501


        :return: The total_available_memory_kb of this OperatingSystemPerformance.  # noqa: E501
        :rtype: int
        """
        return self._total_available_memory_kb

    @total_available_memory_kb.setter
    def total_available_memory_kb(self, total_available_memory_kb):
        """Sets the total_available_memory_kb of this OperatingSystemPerformance.


        :param total_available_memory_kb: The total_available_memory_kb of this OperatingSystemPerformance.  # noqa: E501
        :type: int
        """

        self._total_available_memory_kb = total_available_memory_kb

    @property
    def avg_cpu_temperature(self):
        """Gets the avg_cpu_temperature of this OperatingSystemPerformance.  # noqa: E501


        :return: The avg_cpu_temperature of this OperatingSystemPerformance.  # noqa: E501
        :rtype: float
        """
        return self._avg_cpu_temperature

    @avg_cpu_temperature.setter
    def avg_cpu_temperature(self, avg_cpu_temperature):
        """Sets the avg_cpu_temperature of this OperatingSystemPerformance.


        :param avg_cpu_temperature: The avg_cpu_temperature of this OperatingSystemPerformance.  # noqa: E501
        :type: float
        """

        self._avg_cpu_temperature = avg_cpu_temperature

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OperatingSystemPerformance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OperatingSystemPerformance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
