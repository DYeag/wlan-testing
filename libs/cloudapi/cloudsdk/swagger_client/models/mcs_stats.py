# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class McsStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mcs_num': 'McsType',
        'tx_frames': 'int',
        'rx_frames': 'int',
        'rate': 'int'
    }

    attribute_map = {
        'mcs_num': 'mcsNum',
        'tx_frames': 'txFrames',
        'rx_frames': 'rxFrames',
        'rate': 'rate'
    }

    def __init__(self, mcs_num=None, tx_frames=None, rx_frames=None, rate=None):  # noqa: E501
        """McsStats - a model defined in Swagger"""  # noqa: E501
        self._mcs_num = None
        self._tx_frames = None
        self._rx_frames = None
        self._rate = None
        self.discriminator = None
        if mcs_num is not None:
            self.mcs_num = mcs_num
        if tx_frames is not None:
            self.tx_frames = tx_frames
        if rx_frames is not None:
            self.rx_frames = rx_frames
        if rate is not None:
            self.rate = rate

    @property
    def mcs_num(self):
        """Gets the mcs_num of this McsStats.  # noqa: E501


        :return: The mcs_num of this McsStats.  # noqa: E501
        :rtype: McsType
        """
        return self._mcs_num

    @mcs_num.setter
    def mcs_num(self, mcs_num):
        """Sets the mcs_num of this McsStats.


        :param mcs_num: The mcs_num of this McsStats.  # noqa: E501
        :type: McsType
        """

        self._mcs_num = mcs_num

    @property
    def tx_frames(self):
        """Gets the tx_frames of this McsStats.  # noqa: E501

        The number of successfully transmitted frames at this rate. Do not count failed transmission.  # noqa: E501

        :return: The tx_frames of this McsStats.  # noqa: E501
        :rtype: int
        """
        return self._tx_frames

    @tx_frames.setter
    def tx_frames(self, tx_frames):
        """Sets the tx_frames of this McsStats.

        The number of successfully transmitted frames at this rate. Do not count failed transmission.  # noqa: E501

        :param tx_frames: The tx_frames of this McsStats.  # noqa: E501
        :type: int
        """

        self._tx_frames = tx_frames

    @property
    def rx_frames(self):
        """Gets the rx_frames of this McsStats.  # noqa: E501

        The number of received frames at this rate.  # noqa: E501

        :return: The rx_frames of this McsStats.  # noqa: E501
        :rtype: int
        """
        return self._rx_frames

    @rx_frames.setter
    def rx_frames(self, rx_frames):
        """Sets the rx_frames of this McsStats.

        The number of received frames at this rate.  # noqa: E501

        :param rx_frames: The rx_frames of this McsStats.  # noqa: E501
        :type: int
        """

        self._rx_frames = rx_frames

    @property
    def rate(self):
        """Gets the rate of this McsStats.  # noqa: E501


        :return: The rate of this McsStats.  # noqa: E501
        :rtype: int
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this McsStats.


        :param rate: The rate of this McsStats.  # noqa: E501
        :type: int
        """

        self._rate = rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(McsStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, McsStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
