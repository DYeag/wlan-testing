# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClientTimeoutEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_type': 'str',
        'all_of': 'RealTimeEvent',
        'session_id': 'int',
        'client_mac_address': 'MacAddress',
        'last_recv_time': 'int',
        'last_sent_time': 'int',
        'timeout_reason': 'ClientTimeoutReason'
    }

    attribute_map = {
        'model_type': 'model_type',
        'all_of': 'allOf',
        'session_id': 'sessionId',
        'client_mac_address': 'clientMacAddress',
        'last_recv_time': 'lastRecvTime',
        'last_sent_time': 'lastSentTime',
        'timeout_reason': 'timeoutReason'
    }

    def __init__(self, model_type=None, all_of=None, session_id=None, client_mac_address=None, last_recv_time=None, last_sent_time=None, timeout_reason=None):  # noqa: E501
        """ClientTimeoutEvent - a model defined in Swagger"""  # noqa: E501
        self._model_type = None
        self._all_of = None
        self._session_id = None
        self._client_mac_address = None
        self._last_recv_time = None
        self._last_sent_time = None
        self._timeout_reason = None
        self.discriminator = None
        self.model_type = model_type
        if all_of is not None:
            self.all_of = all_of
        if session_id is not None:
            self.session_id = session_id
        if client_mac_address is not None:
            self.client_mac_address = client_mac_address
        if last_recv_time is not None:
            self.last_recv_time = last_recv_time
        if last_sent_time is not None:
            self.last_sent_time = last_sent_time
        if timeout_reason is not None:
            self.timeout_reason = timeout_reason

    @property
    def model_type(self):
        """Gets the model_type of this ClientTimeoutEvent.  # noqa: E501


        :return: The model_type of this ClientTimeoutEvent.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this ClientTimeoutEvent.


        :param model_type: The model_type of this ClientTimeoutEvent.  # noqa: E501
        :type: str
        """
        if model_type is None:
            raise ValueError("Invalid value for `model_type`, must not be `None`")  # noqa: E501

        self._model_type = model_type

    @property
    def all_of(self):
        """Gets the all_of of this ClientTimeoutEvent.  # noqa: E501


        :return: The all_of of this ClientTimeoutEvent.  # noqa: E501
        :rtype: RealTimeEvent
        """
        return self._all_of

    @all_of.setter
    def all_of(self, all_of):
        """Sets the all_of of this ClientTimeoutEvent.


        :param all_of: The all_of of this ClientTimeoutEvent.  # noqa: E501
        :type: RealTimeEvent
        """

        self._all_of = all_of

    @property
    def session_id(self):
        """Gets the session_id of this ClientTimeoutEvent.  # noqa: E501


        :return: The session_id of this ClientTimeoutEvent.  # noqa: E501
        :rtype: int
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this ClientTimeoutEvent.


        :param session_id: The session_id of this ClientTimeoutEvent.  # noqa: E501
        :type: int
        """

        self._session_id = session_id

    @property
    def client_mac_address(self):
        """Gets the client_mac_address of this ClientTimeoutEvent.  # noqa: E501


        :return: The client_mac_address of this ClientTimeoutEvent.  # noqa: E501
        :rtype: MacAddress
        """
        return self._client_mac_address

    @client_mac_address.setter
    def client_mac_address(self, client_mac_address):
        """Sets the client_mac_address of this ClientTimeoutEvent.


        :param client_mac_address: The client_mac_address of this ClientTimeoutEvent.  # noqa: E501
        :type: MacAddress
        """

        self._client_mac_address = client_mac_address

    @property
    def last_recv_time(self):
        """Gets the last_recv_time of this ClientTimeoutEvent.  # noqa: E501


        :return: The last_recv_time of this ClientTimeoutEvent.  # noqa: E501
        :rtype: int
        """
        return self._last_recv_time

    @last_recv_time.setter
    def last_recv_time(self, last_recv_time):
        """Sets the last_recv_time of this ClientTimeoutEvent.


        :param last_recv_time: The last_recv_time of this ClientTimeoutEvent.  # noqa: E501
        :type: int
        """

        self._last_recv_time = last_recv_time

    @property
    def last_sent_time(self):
        """Gets the last_sent_time of this ClientTimeoutEvent.  # noqa: E501


        :return: The last_sent_time of this ClientTimeoutEvent.  # noqa: E501
        :rtype: int
        """
        return self._last_sent_time

    @last_sent_time.setter
    def last_sent_time(self, last_sent_time):
        """Sets the last_sent_time of this ClientTimeoutEvent.


        :param last_sent_time: The last_sent_time of this ClientTimeoutEvent.  # noqa: E501
        :type: int
        """

        self._last_sent_time = last_sent_time

    @property
    def timeout_reason(self):
        """Gets the timeout_reason of this ClientTimeoutEvent.  # noqa: E501


        :return: The timeout_reason of this ClientTimeoutEvent.  # noqa: E501
        :rtype: ClientTimeoutReason
        """
        return self._timeout_reason

    @timeout_reason.setter
    def timeout_reason(self, timeout_reason):
        """Sets the timeout_reason of this ClientTimeoutEvent.


        :param timeout_reason: The timeout_reason of this ClientTimeoutEvent.  # noqa: E501
        :type: ClientTimeoutReason
        """

        self._timeout_reason = timeout_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientTimeoutEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientTimeoutEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
