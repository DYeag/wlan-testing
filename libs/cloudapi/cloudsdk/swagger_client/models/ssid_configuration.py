# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.profile_details import ProfileDetails  # noqa: F401,E501

class SsidConfiguration(ProfileDetails):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_type': 'str',
        'ssid': 'str',
        'applied_radios': 'list[RadioType]',
        'ssid_admin_state': 'StateSetting',
        'secure_mode': 'SsidSecureMode',
        'vlan_id': 'int',
        'dynamic_vlan': 'DynamicVlanMode',
        'key_str': 'str',
        'broadcast_ssid': 'StateSetting',
        'key_refresh': 'int',
        'no_local_subnets': 'bool',
        'radius_service_id': 'int',
        'radius_acounting_service_interval': 'int',
        'radius_nas_configuration': 'RadiusNasConfiguration',
        'captive_portal_id': 'int',
        'bandwidth_limit_down': 'int',
        'bandwidth_limit_up': 'int',
        'client_bandwidth_limit_down': 'int',
        'client_bandwidth_limit_up': 'int',
        'video_traffic_only': 'bool',
        'radio_based_configs': 'RadioBasedSsidConfigurationMap',
        'bonjour_gateway_profile_id': 'int',
        'enable80211w': 'bool',
        'wep_config': 'WepConfiguration',
        'forward_mode': 'NetworkForwardMode'
    }
    if hasattr(ProfileDetails, "swagger_types"):
        swagger_types.update(ProfileDetails.swagger_types)

    attribute_map = {
        'model_type': 'model_type',
        'ssid': 'ssid',
        'applied_radios': 'appliedRadios',
        'ssid_admin_state': 'ssidAdminState',
        'secure_mode': 'secureMode',
        'vlan_id': 'vlanId',
        'dynamic_vlan': 'dynamicVlan',
        'key_str': 'keyStr',
        'broadcast_ssid': 'broadcastSsid',
        'key_refresh': 'keyRefresh',
        'no_local_subnets': 'noLocalSubnets',
        'radius_service_id': 'radiusServiceId',
        'radius_acounting_service_interval': 'radiusAcountingServiceInterval',
        'radius_nas_configuration': 'radiusNasConfiguration',
        'captive_portal_id': 'captivePortalId',
        'bandwidth_limit_down': 'bandwidthLimitDown',
        'bandwidth_limit_up': 'bandwidthLimitUp',
        'client_bandwidth_limit_down': 'clientBandwidthLimitDown',
        'client_bandwidth_limit_up': 'clientBandwidthLimitUp',
        'video_traffic_only': 'videoTrafficOnly',
        'radio_based_configs': 'radioBasedConfigs',
        'bonjour_gateway_profile_id': 'bonjourGatewayProfileId',
        'enable80211w': 'enable80211w',
        'wep_config': 'wepConfig',
        'forward_mode': 'forwardMode'
    }
    if hasattr(ProfileDetails, "attribute_map"):
        attribute_map.update(ProfileDetails.attribute_map)

    def __init__(self, model_type=None, ssid=None, applied_radios=None, ssid_admin_state=None, secure_mode=None, vlan_id=None, dynamic_vlan=None, key_str=None, broadcast_ssid=None, key_refresh=0, no_local_subnets=None, radius_service_id=None, radius_acounting_service_interval=None, radius_nas_configuration=None, captive_portal_id=None, bandwidth_limit_down=None, bandwidth_limit_up=None, client_bandwidth_limit_down=None, client_bandwidth_limit_up=None, video_traffic_only=None, radio_based_configs=None, bonjour_gateway_profile_id=None, enable80211w=None, wep_config=None, forward_mode=None, *args, **kwargs):  # noqa: E501
        """SsidConfiguration - a model defined in Swagger"""  # noqa: E501
        self._model_type = None
        self._ssid = None
        self._applied_radios = None
        self._ssid_admin_state = None
        self._secure_mode = None
        self._vlan_id = None
        self._dynamic_vlan = None
        self._key_str = None
        self._broadcast_ssid = None
        self._key_refresh = None
        self._no_local_subnets = None
        self._radius_service_id = None
        self._radius_acounting_service_interval = None
        self._radius_nas_configuration = None
        self._captive_portal_id = None
        self._bandwidth_limit_down = None
        self._bandwidth_limit_up = None
        self._client_bandwidth_limit_down = None
        self._client_bandwidth_limit_up = None
        self._video_traffic_only = None
        self._radio_based_configs = None
        self._bonjour_gateway_profile_id = None
        self._enable80211w = None
        self._wep_config = None
        self._forward_mode = None
        self.discriminator = None
        if model_type is not None:
            self.model_type = model_type
        if ssid is not None:
            self.ssid = ssid
        if applied_radios is not None:
            self.applied_radios = applied_radios
        if ssid_admin_state is not None:
            self.ssid_admin_state = ssid_admin_state
        if secure_mode is not None:
            self.secure_mode = secure_mode
        if vlan_id is not None:
            self.vlan_id = vlan_id
        if dynamic_vlan is not None:
            self.dynamic_vlan = dynamic_vlan
        if key_str is not None:
            self.key_str = key_str
        if broadcast_ssid is not None:
            self.broadcast_ssid = broadcast_ssid
        if key_refresh is not None:
            self.key_refresh = key_refresh
        if no_local_subnets is not None:
            self.no_local_subnets = no_local_subnets
        if radius_service_id is not None:
            self.radius_service_id = radius_service_id
        if radius_acounting_service_interval is not None:
            self.radius_acounting_service_interval = radius_acounting_service_interval
        if radius_nas_configuration is not None:
            self.radius_nas_configuration = radius_nas_configuration
        if captive_portal_id is not None:
            self.captive_portal_id = captive_portal_id
        if bandwidth_limit_down is not None:
            self.bandwidth_limit_down = bandwidth_limit_down
        if bandwidth_limit_up is not None:
            self.bandwidth_limit_up = bandwidth_limit_up
        if client_bandwidth_limit_down is not None:
            self.client_bandwidth_limit_down = client_bandwidth_limit_down
        if client_bandwidth_limit_up is not None:
            self.client_bandwidth_limit_up = client_bandwidth_limit_up
        if video_traffic_only is not None:
            self.video_traffic_only = video_traffic_only
        if radio_based_configs is not None:
            self.radio_based_configs = radio_based_configs
        if bonjour_gateway_profile_id is not None:
            self.bonjour_gateway_profile_id = bonjour_gateway_profile_id
        if enable80211w is not None:
            self.enable80211w = enable80211w
        if wep_config is not None:
            self.wep_config = wep_config
        if forward_mode is not None:
            self.forward_mode = forward_mode
        ProfileDetails.__init__(self, *args, **kwargs)

    @property
    def model_type(self):
        """Gets the model_type of this SsidConfiguration.  # noqa: E501


        :return: The model_type of this SsidConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this SsidConfiguration.


        :param model_type: The model_type of this SsidConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["SsidConfiguration"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"  # noqa: E501
                .format(model_type, allowed_values)
            )

        self._model_type = model_type

    @property
    def ssid(self):
        """Gets the ssid of this SsidConfiguration.  # noqa: E501


        :return: The ssid of this SsidConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._ssid

    @ssid.setter
    def ssid(self, ssid):
        """Sets the ssid of this SsidConfiguration.


        :param ssid: The ssid of this SsidConfiguration.  # noqa: E501
        :type: str
        """

        self._ssid = ssid

    @property
    def applied_radios(self):
        """Gets the applied_radios of this SsidConfiguration.  # noqa: E501


        :return: The applied_radios of this SsidConfiguration.  # noqa: E501
        :rtype: list[RadioType]
        """
        return self._applied_radios

    @applied_radios.setter
    def applied_radios(self, applied_radios):
        """Sets the applied_radios of this SsidConfiguration.


        :param applied_radios: The applied_radios of this SsidConfiguration.  # noqa: E501
        :type: list[RadioType]
        """

        self._applied_radios = applied_radios

    @property
    def ssid_admin_state(self):
        """Gets the ssid_admin_state of this SsidConfiguration.  # noqa: E501


        :return: The ssid_admin_state of this SsidConfiguration.  # noqa: E501
        :rtype: StateSetting
        """
        return self._ssid_admin_state

    @ssid_admin_state.setter
    def ssid_admin_state(self, ssid_admin_state):
        """Sets the ssid_admin_state of this SsidConfiguration.


        :param ssid_admin_state: The ssid_admin_state of this SsidConfiguration.  # noqa: E501
        :type: StateSetting
        """

        self._ssid_admin_state = ssid_admin_state

    @property
    def secure_mode(self):
        """Gets the secure_mode of this SsidConfiguration.  # noqa: E501


        :return: The secure_mode of this SsidConfiguration.  # noqa: E501
        :rtype: SsidSecureMode
        """
        return self._secure_mode

    @secure_mode.setter
    def secure_mode(self, secure_mode):
        """Sets the secure_mode of this SsidConfiguration.


        :param secure_mode: The secure_mode of this SsidConfiguration.  # noqa: E501
        :type: SsidSecureMode
        """

        self._secure_mode = secure_mode

    @property
    def vlan_id(self):
        """Gets the vlan_id of this SsidConfiguration.  # noqa: E501


        :return: The vlan_id of this SsidConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this SsidConfiguration.


        :param vlan_id: The vlan_id of this SsidConfiguration.  # noqa: E501
        :type: int
        """

        self._vlan_id = vlan_id

    @property
    def dynamic_vlan(self):
        """Gets the dynamic_vlan of this SsidConfiguration.  # noqa: E501


        :return: The dynamic_vlan of this SsidConfiguration.  # noqa: E501
        :rtype: DynamicVlanMode
        """
        return self._dynamic_vlan

    @dynamic_vlan.setter
    def dynamic_vlan(self, dynamic_vlan):
        """Sets the dynamic_vlan of this SsidConfiguration.


        :param dynamic_vlan: The dynamic_vlan of this SsidConfiguration.  # noqa: E501
        :type: DynamicVlanMode
        """

        self._dynamic_vlan = dynamic_vlan

    @property
    def key_str(self):
        """Gets the key_str of this SsidConfiguration.  # noqa: E501


        :return: The key_str of this SsidConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._key_str

    @key_str.setter
    def key_str(self, key_str):
        """Sets the key_str of this SsidConfiguration.


        :param key_str: The key_str of this SsidConfiguration.  # noqa: E501
        :type: str
        """

        self._key_str = key_str

    @property
    def broadcast_ssid(self):
        """Gets the broadcast_ssid of this SsidConfiguration.  # noqa: E501


        :return: The broadcast_ssid of this SsidConfiguration.  # noqa: E501
        :rtype: StateSetting
        """
        return self._broadcast_ssid

    @broadcast_ssid.setter
    def broadcast_ssid(self, broadcast_ssid):
        """Sets the broadcast_ssid of this SsidConfiguration.


        :param broadcast_ssid: The broadcast_ssid of this SsidConfiguration.  # noqa: E501
        :type: StateSetting
        """

        self._broadcast_ssid = broadcast_ssid

    @property
    def key_refresh(self):
        """Gets the key_refresh of this SsidConfiguration.  # noqa: E501


        :return: The key_refresh of this SsidConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._key_refresh

    @key_refresh.setter
    def key_refresh(self, key_refresh):
        """Sets the key_refresh of this SsidConfiguration.


        :param key_refresh: The key_refresh of this SsidConfiguration.  # noqa: E501
        :type: int
        """

        self._key_refresh = key_refresh

    @property
    def no_local_subnets(self):
        """Gets the no_local_subnets of this SsidConfiguration.  # noqa: E501


        :return: The no_local_subnets of this SsidConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._no_local_subnets

    @no_local_subnets.setter
    def no_local_subnets(self, no_local_subnets):
        """Sets the no_local_subnets of this SsidConfiguration.


        :param no_local_subnets: The no_local_subnets of this SsidConfiguration.  # noqa: E501
        :type: bool
        """

        self._no_local_subnets = no_local_subnets

    @property
    def radius_service_id(self):
        """Gets the radius_service_id of this SsidConfiguration.  # noqa: E501


        :return: The radius_service_id of this SsidConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._radius_service_id

    @radius_service_id.setter
    def radius_service_id(self, radius_service_id):
        """Sets the radius_service_id of this SsidConfiguration.


        :param radius_service_id: The radius_service_id of this SsidConfiguration.  # noqa: E501
        :type: int
        """

        self._radius_service_id = radius_service_id

    @property
    def radius_acounting_service_interval(self):
        """Gets the radius_acounting_service_interval of this SsidConfiguration.  # noqa: E501

        If this is set (i.e. non-null), RadiusAccountingService is configured, and SsidSecureMode is configured as Enterprise/Radius, ap will send interim accounting updates every N seconds  # noqa: E501

        :return: The radius_acounting_service_interval of this SsidConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._radius_acounting_service_interval

    @radius_acounting_service_interval.setter
    def radius_acounting_service_interval(self, radius_acounting_service_interval):
        """Sets the radius_acounting_service_interval of this SsidConfiguration.

        If this is set (i.e. non-null), RadiusAccountingService is configured, and SsidSecureMode is configured as Enterprise/Radius, ap will send interim accounting updates every N seconds  # noqa: E501

        :param radius_acounting_service_interval: The radius_acounting_service_interval of this SsidConfiguration.  # noqa: E501
        :type: int
        """

        self._radius_acounting_service_interval = radius_acounting_service_interval

    @property
    def radius_nas_configuration(self):
        """Gets the radius_nas_configuration of this SsidConfiguration.  # noqa: E501


        :return: The radius_nas_configuration of this SsidConfiguration.  # noqa: E501
        :rtype: RadiusNasConfiguration
        """
        return self._radius_nas_configuration

    @radius_nas_configuration.setter
    def radius_nas_configuration(self, radius_nas_configuration):
        """Sets the radius_nas_configuration of this SsidConfiguration.


        :param radius_nas_configuration: The radius_nas_configuration of this SsidConfiguration.  # noqa: E501
        :type: RadiusNasConfiguration
        """

        self._radius_nas_configuration = radius_nas_configuration

    @property
    def captive_portal_id(self):
        """Gets the captive_portal_id of this SsidConfiguration.  # noqa: E501

        id of a CaptivePortalConfiguration profile, must be also added to the children of this profile  # noqa: E501

        :return: The captive_portal_id of this SsidConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._captive_portal_id

    @captive_portal_id.setter
    def captive_portal_id(self, captive_portal_id):
        """Sets the captive_portal_id of this SsidConfiguration.

        id of a CaptivePortalConfiguration profile, must be also added to the children of this profile  # noqa: E501

        :param captive_portal_id: The captive_portal_id of this SsidConfiguration.  # noqa: E501
        :type: int
        """

        self._captive_portal_id = captive_portal_id

    @property
    def bandwidth_limit_down(self):
        """Gets the bandwidth_limit_down of this SsidConfiguration.  # noqa: E501


        :return: The bandwidth_limit_down of this SsidConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._bandwidth_limit_down

    @bandwidth_limit_down.setter
    def bandwidth_limit_down(self, bandwidth_limit_down):
        """Sets the bandwidth_limit_down of this SsidConfiguration.


        :param bandwidth_limit_down: The bandwidth_limit_down of this SsidConfiguration.  # noqa: E501
        :type: int
        """

        self._bandwidth_limit_down = bandwidth_limit_down

    @property
    def bandwidth_limit_up(self):
        """Gets the bandwidth_limit_up of this SsidConfiguration.  # noqa: E501


        :return: The bandwidth_limit_up of this SsidConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._bandwidth_limit_up

    @bandwidth_limit_up.setter
    def bandwidth_limit_up(self, bandwidth_limit_up):
        """Sets the bandwidth_limit_up of this SsidConfiguration.


        :param bandwidth_limit_up: The bandwidth_limit_up of this SsidConfiguration.  # noqa: E501
        :type: int
        """

        self._bandwidth_limit_up = bandwidth_limit_up

    @property
    def client_bandwidth_limit_down(self):
        """Gets the client_bandwidth_limit_down of this SsidConfiguration.  # noqa: E501


        :return: The client_bandwidth_limit_down of this SsidConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._client_bandwidth_limit_down

    @client_bandwidth_limit_down.setter
    def client_bandwidth_limit_down(self, client_bandwidth_limit_down):
        """Sets the client_bandwidth_limit_down of this SsidConfiguration.


        :param client_bandwidth_limit_down: The client_bandwidth_limit_down of this SsidConfiguration.  # noqa: E501
        :type: int
        """

        self._client_bandwidth_limit_down = client_bandwidth_limit_down

    @property
    def client_bandwidth_limit_up(self):
        """Gets the client_bandwidth_limit_up of this SsidConfiguration.  # noqa: E501


        :return: The client_bandwidth_limit_up of this SsidConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._client_bandwidth_limit_up

    @client_bandwidth_limit_up.setter
    def client_bandwidth_limit_up(self, client_bandwidth_limit_up):
        """Sets the client_bandwidth_limit_up of this SsidConfiguration.


        :param client_bandwidth_limit_up: The client_bandwidth_limit_up of this SsidConfiguration.  # noqa: E501
        :type: int
        """

        self._client_bandwidth_limit_up = client_bandwidth_limit_up

    @property
    def video_traffic_only(self):
        """Gets the video_traffic_only of this SsidConfiguration.  # noqa: E501


        :return: The video_traffic_only of this SsidConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._video_traffic_only

    @video_traffic_only.setter
    def video_traffic_only(self, video_traffic_only):
        """Sets the video_traffic_only of this SsidConfiguration.


        :param video_traffic_only: The video_traffic_only of this SsidConfiguration.  # noqa: E501
        :type: bool
        """

        self._video_traffic_only = video_traffic_only

    @property
    def radio_based_configs(self):
        """Gets the radio_based_configs of this SsidConfiguration.  # noqa: E501


        :return: The radio_based_configs of this SsidConfiguration.  # noqa: E501
        :rtype: RadioBasedSsidConfigurationMap
        """
        return self._radio_based_configs

    @radio_based_configs.setter
    def radio_based_configs(self, radio_based_configs):
        """Sets the radio_based_configs of this SsidConfiguration.


        :param radio_based_configs: The radio_based_configs of this SsidConfiguration.  # noqa: E501
        :type: RadioBasedSsidConfigurationMap
        """

        self._radio_based_configs = radio_based_configs

    @property
    def bonjour_gateway_profile_id(self):
        """Gets the bonjour_gateway_profile_id of this SsidConfiguration.  # noqa: E501

        id of a BonjourGateway profile, must be also added to the children of this profile  # noqa: E501

        :return: The bonjour_gateway_profile_id of this SsidConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._bonjour_gateway_profile_id

    @bonjour_gateway_profile_id.setter
    def bonjour_gateway_profile_id(self, bonjour_gateway_profile_id):
        """Sets the bonjour_gateway_profile_id of this SsidConfiguration.

        id of a BonjourGateway profile, must be also added to the children of this profile  # noqa: E501

        :param bonjour_gateway_profile_id: The bonjour_gateway_profile_id of this SsidConfiguration.  # noqa: E501
        :type: int
        """

        self._bonjour_gateway_profile_id = bonjour_gateway_profile_id

    @property
    def enable80211w(self):
        """Gets the enable80211w of this SsidConfiguration.  # noqa: E501


        :return: The enable80211w of this SsidConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._enable80211w

    @enable80211w.setter
    def enable80211w(self, enable80211w):
        """Sets the enable80211w of this SsidConfiguration.


        :param enable80211w: The enable80211w of this SsidConfiguration.  # noqa: E501
        :type: bool
        """

        self._enable80211w = enable80211w

    @property
    def wep_config(self):
        """Gets the wep_config of this SsidConfiguration.  # noqa: E501


        :return: The wep_config of this SsidConfiguration.  # noqa: E501
        :rtype: WepConfiguration
        """
        return self._wep_config

    @wep_config.setter
    def wep_config(self, wep_config):
        """Sets the wep_config of this SsidConfiguration.


        :param wep_config: The wep_config of this SsidConfiguration.  # noqa: E501
        :type: WepConfiguration
        """

        self._wep_config = wep_config

    @property
    def forward_mode(self):
        """Gets the forward_mode of this SsidConfiguration.  # noqa: E501


        :return: The forward_mode of this SsidConfiguration.  # noqa: E501
        :rtype: NetworkForwardMode
        """
        return self._forward_mode

    @forward_mode.setter
    def forward_mode(self, forward_mode):
        """Sets the forward_mode of this SsidConfiguration.


        :param forward_mode: The forward_mode of this SsidConfiguration.  # noqa: E501
        :type: NetworkForwardMode
        """

        self._forward_mode = forward_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SsidConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SsidConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
