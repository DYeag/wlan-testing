# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PasspointOsuIcon(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'icon_width': 'int',
        'icon_height': 'int',
        'language_code': 'str',
        'icon_locale': 'str',
        'icon_name': 'str',
        'file_path': 'str',
        'image_url': 'str',
        'icon_type': 'str'
    }

    attribute_map = {
        'icon_width': 'iconWidth',
        'icon_height': 'iconHeight',
        'language_code': 'languageCode',
        'icon_locale': 'iconLocale',
        'icon_name': 'iconName',
        'file_path': 'filePath',
        'image_url': 'imageUrl',
        'icon_type': 'ICON_TYPE'
    }

    def __init__(self, icon_width=None, icon_height=None, language_code=None, icon_locale=None, icon_name=None, file_path=None, image_url=None, icon_type=None):  # noqa: E501
        """PasspointOsuIcon - a model defined in Swagger"""  # noqa: E501
        self._icon_width = None
        self._icon_height = None
        self._language_code = None
        self._icon_locale = None
        self._icon_name = None
        self._file_path = None
        self._image_url = None
        self._icon_type = None
        self.discriminator = None
        if icon_width is not None:
            self.icon_width = icon_width
        if icon_height is not None:
            self.icon_height = icon_height
        if language_code is not None:
            self.language_code = language_code
        if icon_locale is not None:
            self.icon_locale = icon_locale
        if icon_name is not None:
            self.icon_name = icon_name
        if file_path is not None:
            self.file_path = file_path
        if image_url is not None:
            self.image_url = image_url
        if icon_type is not None:
            self.icon_type = icon_type

    @property
    def icon_width(self):
        """Gets the icon_width of this PasspointOsuIcon.  # noqa: E501


        :return: The icon_width of this PasspointOsuIcon.  # noqa: E501
        :rtype: int
        """
        return self._icon_width

    @icon_width.setter
    def icon_width(self, icon_width):
        """Sets the icon_width of this PasspointOsuIcon.


        :param icon_width: The icon_width of this PasspointOsuIcon.  # noqa: E501
        :type: int
        """

        self._icon_width = icon_width

    @property
    def icon_height(self):
        """Gets the icon_height of this PasspointOsuIcon.  # noqa: E501


        :return: The icon_height of this PasspointOsuIcon.  # noqa: E501
        :rtype: int
        """
        return self._icon_height

    @icon_height.setter
    def icon_height(self, icon_height):
        """Sets the icon_height of this PasspointOsuIcon.


        :param icon_height: The icon_height of this PasspointOsuIcon.  # noqa: E501
        :type: int
        """

        self._icon_height = icon_height

    @property
    def language_code(self):
        """Gets the language_code of this PasspointOsuIcon.  # noqa: E501


        :return: The language_code of this PasspointOsuIcon.  # noqa: E501
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this PasspointOsuIcon.


        :param language_code: The language_code of this PasspointOsuIcon.  # noqa: E501
        :type: str
        """

        self._language_code = language_code

    @property
    def icon_locale(self):
        """Gets the icon_locale of this PasspointOsuIcon.  # noqa: E501

        The primary locale for this Icon.  # noqa: E501

        :return: The icon_locale of this PasspointOsuIcon.  # noqa: E501
        :rtype: str
        """
        return self._icon_locale

    @icon_locale.setter
    def icon_locale(self, icon_locale):
        """Sets the icon_locale of this PasspointOsuIcon.

        The primary locale for this Icon.  # noqa: E501

        :param icon_locale: The icon_locale of this PasspointOsuIcon.  # noqa: E501
        :type: str
        """

        self._icon_locale = icon_locale

    @property
    def icon_name(self):
        """Gets the icon_name of this PasspointOsuIcon.  # noqa: E501


        :return: The icon_name of this PasspointOsuIcon.  # noqa: E501
        :rtype: str
        """
        return self._icon_name

    @icon_name.setter
    def icon_name(self, icon_name):
        """Sets the icon_name of this PasspointOsuIcon.


        :param icon_name: The icon_name of this PasspointOsuIcon.  # noqa: E501
        :type: str
        """

        self._icon_name = icon_name

    @property
    def file_path(self):
        """Gets the file_path of this PasspointOsuIcon.  # noqa: E501


        :return: The file_path of this PasspointOsuIcon.  # noqa: E501
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this PasspointOsuIcon.


        :param file_path: The file_path of this PasspointOsuIcon.  # noqa: E501
        :type: str
        """

        self._file_path = file_path

    @property
    def image_url(self):
        """Gets the image_url of this PasspointOsuIcon.  # noqa: E501


        :return: The image_url of this PasspointOsuIcon.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this PasspointOsuIcon.


        :param image_url: The image_url of this PasspointOsuIcon.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def icon_type(self):
        """Gets the icon_type of this PasspointOsuIcon.  # noqa: E501


        :return: The icon_type of this PasspointOsuIcon.  # noqa: E501
        :rtype: str
        """
        return self._icon_type

    @icon_type.setter
    def icon_type(self, icon_type):
        """Sets the icon_type of this PasspointOsuIcon.


        :param icon_type: The icon_type of this PasspointOsuIcon.  # noqa: E501
        :type: str
        """
        allowed_values = ["image/png"]  # noqa: E501
        if icon_type not in allowed_values:
            raise ValueError(
                "Invalid value for `icon_type` ({0}), must be one of {1}"  # noqa: E501
                .format(icon_type, allowed_values)
            )

        self._icon_type = icon_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PasspointOsuIcon, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PasspointOsuIcon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
