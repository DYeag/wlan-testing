# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NetworkProbeMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vlan_if': 'str',
        'dhcp_state': 'StateUpDownError',
        'dhcp_latency_ms': 'int',
        'dns_state': 'StateUpDownError',
        'dns_latency_ms': 'int',
        'radius_state': 'StateUpDownError',
        'radius_latency_ms': 'int',
        'dns_probe_results': 'list[DnsProbeMetric]'
    }

    attribute_map = {
        'vlan_if': 'vlanIF',
        'dhcp_state': 'dhcpState',
        'dhcp_latency_ms': 'dhcpLatencyMs',
        'dns_state': 'dnsState',
        'dns_latency_ms': 'dnsLatencyMs',
        'radius_state': 'radiusState',
        'radius_latency_ms': 'radiusLatencyMs',
        'dns_probe_results': 'dnsProbeResults'
    }

    def __init__(self, vlan_if=None, dhcp_state=None, dhcp_latency_ms=None, dns_state=None, dns_latency_ms=None, radius_state=None, radius_latency_ms=None, dns_probe_results=None):  # noqa: E501
        """NetworkProbeMetrics - a model defined in Swagger"""  # noqa: E501
        self._vlan_if = None
        self._dhcp_state = None
        self._dhcp_latency_ms = None
        self._dns_state = None
        self._dns_latency_ms = None
        self._radius_state = None
        self._radius_latency_ms = None
        self._dns_probe_results = None
        self.discriminator = None
        if vlan_if is not None:
            self.vlan_if = vlan_if
        if dhcp_state is not None:
            self.dhcp_state = dhcp_state
        if dhcp_latency_ms is not None:
            self.dhcp_latency_ms = dhcp_latency_ms
        if dns_state is not None:
            self.dns_state = dns_state
        if dns_latency_ms is not None:
            self.dns_latency_ms = dns_latency_ms
        if radius_state is not None:
            self.radius_state = radius_state
        if radius_latency_ms is not None:
            self.radius_latency_ms = radius_latency_ms
        if dns_probe_results is not None:
            self.dns_probe_results = dns_probe_results

    @property
    def vlan_if(self):
        """Gets the vlan_if of this NetworkProbeMetrics.  # noqa: E501


        :return: The vlan_if of this NetworkProbeMetrics.  # noqa: E501
        :rtype: str
        """
        return self._vlan_if

    @vlan_if.setter
    def vlan_if(self, vlan_if):
        """Sets the vlan_if of this NetworkProbeMetrics.


        :param vlan_if: The vlan_if of this NetworkProbeMetrics.  # noqa: E501
        :type: str
        """

        self._vlan_if = vlan_if

    @property
    def dhcp_state(self):
        """Gets the dhcp_state of this NetworkProbeMetrics.  # noqa: E501


        :return: The dhcp_state of this NetworkProbeMetrics.  # noqa: E501
        :rtype: StateUpDownError
        """
        return self._dhcp_state

    @dhcp_state.setter
    def dhcp_state(self, dhcp_state):
        """Sets the dhcp_state of this NetworkProbeMetrics.


        :param dhcp_state: The dhcp_state of this NetworkProbeMetrics.  # noqa: E501
        :type: StateUpDownError
        """

        self._dhcp_state = dhcp_state

    @property
    def dhcp_latency_ms(self):
        """Gets the dhcp_latency_ms of this NetworkProbeMetrics.  # noqa: E501


        :return: The dhcp_latency_ms of this NetworkProbeMetrics.  # noqa: E501
        :rtype: int
        """
        return self._dhcp_latency_ms

    @dhcp_latency_ms.setter
    def dhcp_latency_ms(self, dhcp_latency_ms):
        """Sets the dhcp_latency_ms of this NetworkProbeMetrics.


        :param dhcp_latency_ms: The dhcp_latency_ms of this NetworkProbeMetrics.  # noqa: E501
        :type: int
        """

        self._dhcp_latency_ms = dhcp_latency_ms

    @property
    def dns_state(self):
        """Gets the dns_state of this NetworkProbeMetrics.  # noqa: E501


        :return: The dns_state of this NetworkProbeMetrics.  # noqa: E501
        :rtype: StateUpDownError
        """
        return self._dns_state

    @dns_state.setter
    def dns_state(self, dns_state):
        """Sets the dns_state of this NetworkProbeMetrics.


        :param dns_state: The dns_state of this NetworkProbeMetrics.  # noqa: E501
        :type: StateUpDownError
        """

        self._dns_state = dns_state

    @property
    def dns_latency_ms(self):
        """Gets the dns_latency_ms of this NetworkProbeMetrics.  # noqa: E501


        :return: The dns_latency_ms of this NetworkProbeMetrics.  # noqa: E501
        :rtype: int
        """
        return self._dns_latency_ms

    @dns_latency_ms.setter
    def dns_latency_ms(self, dns_latency_ms):
        """Sets the dns_latency_ms of this NetworkProbeMetrics.


        :param dns_latency_ms: The dns_latency_ms of this NetworkProbeMetrics.  # noqa: E501
        :type: int
        """

        self._dns_latency_ms = dns_latency_ms

    @property
    def radius_state(self):
        """Gets the radius_state of this NetworkProbeMetrics.  # noqa: E501


        :return: The radius_state of this NetworkProbeMetrics.  # noqa: E501
        :rtype: StateUpDownError
        """
        return self._radius_state

    @radius_state.setter
    def radius_state(self, radius_state):
        """Sets the radius_state of this NetworkProbeMetrics.


        :param radius_state: The radius_state of this NetworkProbeMetrics.  # noqa: E501
        :type: StateUpDownError
        """

        self._radius_state = radius_state

    @property
    def radius_latency_ms(self):
        """Gets the radius_latency_ms of this NetworkProbeMetrics.  # noqa: E501


        :return: The radius_latency_ms of this NetworkProbeMetrics.  # noqa: E501
        :rtype: int
        """
        return self._radius_latency_ms

    @radius_latency_ms.setter
    def radius_latency_ms(self, radius_latency_ms):
        """Sets the radius_latency_ms of this NetworkProbeMetrics.


        :param radius_latency_ms: The radius_latency_ms of this NetworkProbeMetrics.  # noqa: E501
        :type: int
        """

        self._radius_latency_ms = radius_latency_ms

    @property
    def dns_probe_results(self):
        """Gets the dns_probe_results of this NetworkProbeMetrics.  # noqa: E501


        :return: The dns_probe_results of this NetworkProbeMetrics.  # noqa: E501
        :rtype: list[DnsProbeMetric]
        """
        return self._dns_probe_results

    @dns_probe_results.setter
    def dns_probe_results(self, dns_probe_results):
        """Sets the dns_probe_results of this NetworkProbeMetrics.


        :param dns_probe_results: The dns_probe_results of this NetworkProbeMetrics.  # noqa: E501
        :type: list[DnsProbeMetric]
        """

        self._dns_probe_results = dns_probe_results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkProbeMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkProbeMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
