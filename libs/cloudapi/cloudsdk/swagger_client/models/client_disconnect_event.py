# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClientDisconnectEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_type': 'str',
        'all_of': 'RealTimeEvent',
        'session_id': 'int',
        'ssid': 'str',
        'client_mac_address': 'MacAddress',
        'radio_type': 'RadioType',
        'mac_address_bytes': 'list[str]',
        'reason_code': 'WlanReasonCode',
        'internal_reason_code': 'int',
        'rssi': 'int',
        'last_recv_time': 'int',
        'last_sent_time': 'int',
        'frame_type': 'DisconnectFrameType',
        'initiator': 'DisconnectInitiator'
    }

    attribute_map = {
        'model_type': 'model_type',
        'all_of': 'allOf',
        'session_id': 'sessionId',
        'ssid': 'ssid',
        'client_mac_address': 'clientMacAddress',
        'radio_type': 'radioType',
        'mac_address_bytes': 'macAddressBytes',
        'reason_code': 'reasonCode',
        'internal_reason_code': 'internalReasonCode',
        'rssi': 'rssi',
        'last_recv_time': 'lastRecvTime',
        'last_sent_time': 'lastSentTime',
        'frame_type': 'frameType',
        'initiator': 'initiator'
    }

    def __init__(self, model_type=None, all_of=None, session_id=None, ssid=None, client_mac_address=None, radio_type=None, mac_address_bytes=None, reason_code=None, internal_reason_code=None, rssi=None, last_recv_time=None, last_sent_time=None, frame_type=None, initiator=None):  # noqa: E501
        """ClientDisconnectEvent - a model defined in Swagger"""  # noqa: E501
        self._model_type = None
        self._all_of = None
        self._session_id = None
        self._ssid = None
        self._client_mac_address = None
        self._radio_type = None
        self._mac_address_bytes = None
        self._reason_code = None
        self._internal_reason_code = None
        self._rssi = None
        self._last_recv_time = None
        self._last_sent_time = None
        self._frame_type = None
        self._initiator = None
        self.discriminator = None
        self.model_type = model_type
        if all_of is not None:
            self.all_of = all_of
        if session_id is not None:
            self.session_id = session_id
        if ssid is not None:
            self.ssid = ssid
        if client_mac_address is not None:
            self.client_mac_address = client_mac_address
        if radio_type is not None:
            self.radio_type = radio_type
        if mac_address_bytes is not None:
            self.mac_address_bytes = mac_address_bytes
        if reason_code is not None:
            self.reason_code = reason_code
        if internal_reason_code is not None:
            self.internal_reason_code = internal_reason_code
        if rssi is not None:
            self.rssi = rssi
        if last_recv_time is not None:
            self.last_recv_time = last_recv_time
        if last_sent_time is not None:
            self.last_sent_time = last_sent_time
        if frame_type is not None:
            self.frame_type = frame_type
        if initiator is not None:
            self.initiator = initiator

    @property
    def model_type(self):
        """Gets the model_type of this ClientDisconnectEvent.  # noqa: E501


        :return: The model_type of this ClientDisconnectEvent.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this ClientDisconnectEvent.


        :param model_type: The model_type of this ClientDisconnectEvent.  # noqa: E501
        :type: str
        """
        if model_type is None:
            raise ValueError("Invalid value for `model_type`, must not be `None`")  # noqa: E501

        self._model_type = model_type

    @property
    def all_of(self):
        """Gets the all_of of this ClientDisconnectEvent.  # noqa: E501


        :return: The all_of of this ClientDisconnectEvent.  # noqa: E501
        :rtype: RealTimeEvent
        """
        return self._all_of

    @all_of.setter
    def all_of(self, all_of):
        """Sets the all_of of this ClientDisconnectEvent.


        :param all_of: The all_of of this ClientDisconnectEvent.  # noqa: E501
        :type: RealTimeEvent
        """

        self._all_of = all_of

    @property
    def session_id(self):
        """Gets the session_id of this ClientDisconnectEvent.  # noqa: E501


        :return: The session_id of this ClientDisconnectEvent.  # noqa: E501
        :rtype: int
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this ClientDisconnectEvent.


        :param session_id: The session_id of this ClientDisconnectEvent.  # noqa: E501
        :type: int
        """

        self._session_id = session_id

    @property
    def ssid(self):
        """Gets the ssid of this ClientDisconnectEvent.  # noqa: E501


        :return: The ssid of this ClientDisconnectEvent.  # noqa: E501
        :rtype: str
        """
        return self._ssid

    @ssid.setter
    def ssid(self, ssid):
        """Sets the ssid of this ClientDisconnectEvent.


        :param ssid: The ssid of this ClientDisconnectEvent.  # noqa: E501
        :type: str
        """

        self._ssid = ssid

    @property
    def client_mac_address(self):
        """Gets the client_mac_address of this ClientDisconnectEvent.  # noqa: E501


        :return: The client_mac_address of this ClientDisconnectEvent.  # noqa: E501
        :rtype: MacAddress
        """
        return self._client_mac_address

    @client_mac_address.setter
    def client_mac_address(self, client_mac_address):
        """Sets the client_mac_address of this ClientDisconnectEvent.


        :param client_mac_address: The client_mac_address of this ClientDisconnectEvent.  # noqa: E501
        :type: MacAddress
        """

        self._client_mac_address = client_mac_address

    @property
    def radio_type(self):
        """Gets the radio_type of this ClientDisconnectEvent.  # noqa: E501


        :return: The radio_type of this ClientDisconnectEvent.  # noqa: E501
        :rtype: RadioType
        """
        return self._radio_type

    @radio_type.setter
    def radio_type(self, radio_type):
        """Sets the radio_type of this ClientDisconnectEvent.


        :param radio_type: The radio_type of this ClientDisconnectEvent.  # noqa: E501
        :type: RadioType
        """

        self._radio_type = radio_type

    @property
    def mac_address_bytes(self):
        """Gets the mac_address_bytes of this ClientDisconnectEvent.  # noqa: E501


        :return: The mac_address_bytes of this ClientDisconnectEvent.  # noqa: E501
        :rtype: list[str]
        """
        return self._mac_address_bytes

    @mac_address_bytes.setter
    def mac_address_bytes(self, mac_address_bytes):
        """Sets the mac_address_bytes of this ClientDisconnectEvent.


        :param mac_address_bytes: The mac_address_bytes of this ClientDisconnectEvent.  # noqa: E501
        :type: list[str]
        """

        self._mac_address_bytes = mac_address_bytes

    @property
    def reason_code(self):
        """Gets the reason_code of this ClientDisconnectEvent.  # noqa: E501


        :return: The reason_code of this ClientDisconnectEvent.  # noqa: E501
        :rtype: WlanReasonCode
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this ClientDisconnectEvent.


        :param reason_code: The reason_code of this ClientDisconnectEvent.  # noqa: E501
        :type: WlanReasonCode
        """

        self._reason_code = reason_code

    @property
    def internal_reason_code(self):
        """Gets the internal_reason_code of this ClientDisconnectEvent.  # noqa: E501


        :return: The internal_reason_code of this ClientDisconnectEvent.  # noqa: E501
        :rtype: int
        """
        return self._internal_reason_code

    @internal_reason_code.setter
    def internal_reason_code(self, internal_reason_code):
        """Sets the internal_reason_code of this ClientDisconnectEvent.


        :param internal_reason_code: The internal_reason_code of this ClientDisconnectEvent.  # noqa: E501
        :type: int
        """

        self._internal_reason_code = internal_reason_code

    @property
    def rssi(self):
        """Gets the rssi of this ClientDisconnectEvent.  # noqa: E501


        :return: The rssi of this ClientDisconnectEvent.  # noqa: E501
        :rtype: int
        """
        return self._rssi

    @rssi.setter
    def rssi(self, rssi):
        """Sets the rssi of this ClientDisconnectEvent.


        :param rssi: The rssi of this ClientDisconnectEvent.  # noqa: E501
        :type: int
        """

        self._rssi = rssi

    @property
    def last_recv_time(self):
        """Gets the last_recv_time of this ClientDisconnectEvent.  # noqa: E501


        :return: The last_recv_time of this ClientDisconnectEvent.  # noqa: E501
        :rtype: int
        """
        return self._last_recv_time

    @last_recv_time.setter
    def last_recv_time(self, last_recv_time):
        """Sets the last_recv_time of this ClientDisconnectEvent.


        :param last_recv_time: The last_recv_time of this ClientDisconnectEvent.  # noqa: E501
        :type: int
        """

        self._last_recv_time = last_recv_time

    @property
    def last_sent_time(self):
        """Gets the last_sent_time of this ClientDisconnectEvent.  # noqa: E501


        :return: The last_sent_time of this ClientDisconnectEvent.  # noqa: E501
        :rtype: int
        """
        return self._last_sent_time

    @last_sent_time.setter
    def last_sent_time(self, last_sent_time):
        """Sets the last_sent_time of this ClientDisconnectEvent.


        :param last_sent_time: The last_sent_time of this ClientDisconnectEvent.  # noqa: E501
        :type: int
        """

        self._last_sent_time = last_sent_time

    @property
    def frame_type(self):
        """Gets the frame_type of this ClientDisconnectEvent.  # noqa: E501


        :return: The frame_type of this ClientDisconnectEvent.  # noqa: E501
        :rtype: DisconnectFrameType
        """
        return self._frame_type

    @frame_type.setter
    def frame_type(self, frame_type):
        """Sets the frame_type of this ClientDisconnectEvent.


        :param frame_type: The frame_type of this ClientDisconnectEvent.  # noqa: E501
        :type: DisconnectFrameType
        """

        self._frame_type = frame_type

    @property
    def initiator(self):
        """Gets the initiator of this ClientDisconnectEvent.  # noqa: E501


        :return: The initiator of this ClientDisconnectEvent.  # noqa: E501
        :rtype: DisconnectInitiator
        """
        return self._initiator

    @initiator.setter
    def initiator(self, initiator):
        """Sets the initiator of this ClientDisconnectEvent.


        :param initiator: The initiator of this ClientDisconnectEvent.  # noqa: E501
        :type: DisconnectInitiator
        """

        self._initiator = initiator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientDisconnectEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientDisconnectEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
