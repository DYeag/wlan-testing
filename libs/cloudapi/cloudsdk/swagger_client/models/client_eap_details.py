# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClientEapDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'eap_key1_timestamp': 'int',
        'eap_key2_timestamp': 'int',
        'eap_key3_timestamp': 'int',
        'eap_key4_timestamp': 'int',
        'request_identity_timestamp': 'int',
        'eap_negotiation_start_timestamp': 'int',
        'eap_success_timestamp': 'int'
    }

    attribute_map = {
        'eap_key1_timestamp': 'eapKey1Timestamp',
        'eap_key2_timestamp': 'eapKey2Timestamp',
        'eap_key3_timestamp': 'eapKey3Timestamp',
        'eap_key4_timestamp': 'eapKey4Timestamp',
        'request_identity_timestamp': 'requestIdentityTimestamp',
        'eap_negotiation_start_timestamp': 'eapNegotiationStartTimestamp',
        'eap_success_timestamp': 'eapSuccessTimestamp'
    }

    def __init__(self, eap_key1_timestamp=None, eap_key2_timestamp=None, eap_key3_timestamp=None, eap_key4_timestamp=None, request_identity_timestamp=None, eap_negotiation_start_timestamp=None, eap_success_timestamp=None):  # noqa: E501
        """ClientEapDetails - a model defined in Swagger"""  # noqa: E501
        self._eap_key1_timestamp = None
        self._eap_key2_timestamp = None
        self._eap_key3_timestamp = None
        self._eap_key4_timestamp = None
        self._request_identity_timestamp = None
        self._eap_negotiation_start_timestamp = None
        self._eap_success_timestamp = None
        self.discriminator = None
        if eap_key1_timestamp is not None:
            self.eap_key1_timestamp = eap_key1_timestamp
        if eap_key2_timestamp is not None:
            self.eap_key2_timestamp = eap_key2_timestamp
        if eap_key3_timestamp is not None:
            self.eap_key3_timestamp = eap_key3_timestamp
        if eap_key4_timestamp is not None:
            self.eap_key4_timestamp = eap_key4_timestamp
        if request_identity_timestamp is not None:
            self.request_identity_timestamp = request_identity_timestamp
        if eap_negotiation_start_timestamp is not None:
            self.eap_negotiation_start_timestamp = eap_negotiation_start_timestamp
        if eap_success_timestamp is not None:
            self.eap_success_timestamp = eap_success_timestamp

    @property
    def eap_key1_timestamp(self):
        """Gets the eap_key1_timestamp of this ClientEapDetails.  # noqa: E501


        :return: The eap_key1_timestamp of this ClientEapDetails.  # noqa: E501
        :rtype: int
        """
        return self._eap_key1_timestamp

    @eap_key1_timestamp.setter
    def eap_key1_timestamp(self, eap_key1_timestamp):
        """Sets the eap_key1_timestamp of this ClientEapDetails.


        :param eap_key1_timestamp: The eap_key1_timestamp of this ClientEapDetails.  # noqa: E501
        :type: int
        """

        self._eap_key1_timestamp = eap_key1_timestamp

    @property
    def eap_key2_timestamp(self):
        """Gets the eap_key2_timestamp of this ClientEapDetails.  # noqa: E501


        :return: The eap_key2_timestamp of this ClientEapDetails.  # noqa: E501
        :rtype: int
        """
        return self._eap_key2_timestamp

    @eap_key2_timestamp.setter
    def eap_key2_timestamp(self, eap_key2_timestamp):
        """Sets the eap_key2_timestamp of this ClientEapDetails.


        :param eap_key2_timestamp: The eap_key2_timestamp of this ClientEapDetails.  # noqa: E501
        :type: int
        """

        self._eap_key2_timestamp = eap_key2_timestamp

    @property
    def eap_key3_timestamp(self):
        """Gets the eap_key3_timestamp of this ClientEapDetails.  # noqa: E501


        :return: The eap_key3_timestamp of this ClientEapDetails.  # noqa: E501
        :rtype: int
        """
        return self._eap_key3_timestamp

    @eap_key3_timestamp.setter
    def eap_key3_timestamp(self, eap_key3_timestamp):
        """Sets the eap_key3_timestamp of this ClientEapDetails.


        :param eap_key3_timestamp: The eap_key3_timestamp of this ClientEapDetails.  # noqa: E501
        :type: int
        """

        self._eap_key3_timestamp = eap_key3_timestamp

    @property
    def eap_key4_timestamp(self):
        """Gets the eap_key4_timestamp of this ClientEapDetails.  # noqa: E501


        :return: The eap_key4_timestamp of this ClientEapDetails.  # noqa: E501
        :rtype: int
        """
        return self._eap_key4_timestamp

    @eap_key4_timestamp.setter
    def eap_key4_timestamp(self, eap_key4_timestamp):
        """Sets the eap_key4_timestamp of this ClientEapDetails.


        :param eap_key4_timestamp: The eap_key4_timestamp of this ClientEapDetails.  # noqa: E501
        :type: int
        """

        self._eap_key4_timestamp = eap_key4_timestamp

    @property
    def request_identity_timestamp(self):
        """Gets the request_identity_timestamp of this ClientEapDetails.  # noqa: E501


        :return: The request_identity_timestamp of this ClientEapDetails.  # noqa: E501
        :rtype: int
        """
        return self._request_identity_timestamp

    @request_identity_timestamp.setter
    def request_identity_timestamp(self, request_identity_timestamp):
        """Sets the request_identity_timestamp of this ClientEapDetails.


        :param request_identity_timestamp: The request_identity_timestamp of this ClientEapDetails.  # noqa: E501
        :type: int
        """

        self._request_identity_timestamp = request_identity_timestamp

    @property
    def eap_negotiation_start_timestamp(self):
        """Gets the eap_negotiation_start_timestamp of this ClientEapDetails.  # noqa: E501


        :return: The eap_negotiation_start_timestamp of this ClientEapDetails.  # noqa: E501
        :rtype: int
        """
        return self._eap_negotiation_start_timestamp

    @eap_negotiation_start_timestamp.setter
    def eap_negotiation_start_timestamp(self, eap_negotiation_start_timestamp):
        """Sets the eap_negotiation_start_timestamp of this ClientEapDetails.


        :param eap_negotiation_start_timestamp: The eap_negotiation_start_timestamp of this ClientEapDetails.  # noqa: E501
        :type: int
        """

        self._eap_negotiation_start_timestamp = eap_negotiation_start_timestamp

    @property
    def eap_success_timestamp(self):
        """Gets the eap_success_timestamp of this ClientEapDetails.  # noqa: E501


        :return: The eap_success_timestamp of this ClientEapDetails.  # noqa: E501
        :rtype: int
        """
        return self._eap_success_timestamp

    @eap_success_timestamp.setter
    def eap_success_timestamp(self, eap_success_timestamp):
        """Sets the eap_success_timestamp of this ClientEapDetails.


        :param eap_success_timestamp: The eap_success_timestamp of this ClientEapDetails.  # noqa: E501
        :type: int
        """

        self._eap_success_timestamp = eap_success_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientEapDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientEapDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
