# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DhcpAckEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_type': 'str',
        'all_of': 'BaseDhcpEvent',
        'subnet_mask': 'str',
        'primary_dns': 'str',
        'secondary_dns': 'str',
        'lease_time': 'int',
        'renewal_time': 'int',
        'rebinding_time': 'int',
        'time_offset': 'int',
        'gateway_ip': 'str'
    }

    attribute_map = {
        'model_type': 'model_type',
        'all_of': 'allOf',
        'subnet_mask': 'subnetMask',
        'primary_dns': 'primaryDns',
        'secondary_dns': 'secondaryDns',
        'lease_time': 'leaseTime',
        'renewal_time': 'renewalTime',
        'rebinding_time': 'rebindingTime',
        'time_offset': 'timeOffset',
        'gateway_ip': 'gatewayIp'
    }

    def __init__(self, model_type=None, all_of=None, subnet_mask=None, primary_dns=None, secondary_dns=None, lease_time=None, renewal_time=None, rebinding_time=None, time_offset=None, gateway_ip=None):  # noqa: E501
        """DhcpAckEvent - a model defined in Swagger"""  # noqa: E501
        self._model_type = None
        self._all_of = None
        self._subnet_mask = None
        self._primary_dns = None
        self._secondary_dns = None
        self._lease_time = None
        self._renewal_time = None
        self._rebinding_time = None
        self._time_offset = None
        self._gateway_ip = None
        self.discriminator = None
        self.model_type = model_type
        if all_of is not None:
            self.all_of = all_of
        if subnet_mask is not None:
            self.subnet_mask = subnet_mask
        if primary_dns is not None:
            self.primary_dns = primary_dns
        if secondary_dns is not None:
            self.secondary_dns = secondary_dns
        if lease_time is not None:
            self.lease_time = lease_time
        if renewal_time is not None:
            self.renewal_time = renewal_time
        if rebinding_time is not None:
            self.rebinding_time = rebinding_time
        if time_offset is not None:
            self.time_offset = time_offset
        if gateway_ip is not None:
            self.gateway_ip = gateway_ip

    @property
    def model_type(self):
        """Gets the model_type of this DhcpAckEvent.  # noqa: E501


        :return: The model_type of this DhcpAckEvent.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this DhcpAckEvent.


        :param model_type: The model_type of this DhcpAckEvent.  # noqa: E501
        :type: str
        """
        if model_type is None:
            raise ValueError("Invalid value for `model_type`, must not be `None`")  # noqa: E501

        self._model_type = model_type

    @property
    def all_of(self):
        """Gets the all_of of this DhcpAckEvent.  # noqa: E501


        :return: The all_of of this DhcpAckEvent.  # noqa: E501
        :rtype: BaseDhcpEvent
        """
        return self._all_of

    @all_of.setter
    def all_of(self, all_of):
        """Sets the all_of of this DhcpAckEvent.


        :param all_of: The all_of of this DhcpAckEvent.  # noqa: E501
        :type: BaseDhcpEvent
        """

        self._all_of = all_of

    @property
    def subnet_mask(self):
        """Gets the subnet_mask of this DhcpAckEvent.  # noqa: E501

        string representing InetAddress  # noqa: E501

        :return: The subnet_mask of this DhcpAckEvent.  # noqa: E501
        :rtype: str
        """
        return self._subnet_mask

    @subnet_mask.setter
    def subnet_mask(self, subnet_mask):
        """Sets the subnet_mask of this DhcpAckEvent.

        string representing InetAddress  # noqa: E501

        :param subnet_mask: The subnet_mask of this DhcpAckEvent.  # noqa: E501
        :type: str
        """

        self._subnet_mask = subnet_mask

    @property
    def primary_dns(self):
        """Gets the primary_dns of this DhcpAckEvent.  # noqa: E501

        string representing InetAddress  # noqa: E501

        :return: The primary_dns of this DhcpAckEvent.  # noqa: E501
        :rtype: str
        """
        return self._primary_dns

    @primary_dns.setter
    def primary_dns(self, primary_dns):
        """Sets the primary_dns of this DhcpAckEvent.

        string representing InetAddress  # noqa: E501

        :param primary_dns: The primary_dns of this DhcpAckEvent.  # noqa: E501
        :type: str
        """

        self._primary_dns = primary_dns

    @property
    def secondary_dns(self):
        """Gets the secondary_dns of this DhcpAckEvent.  # noqa: E501

        string representing InetAddress  # noqa: E501

        :return: The secondary_dns of this DhcpAckEvent.  # noqa: E501
        :rtype: str
        """
        return self._secondary_dns

    @secondary_dns.setter
    def secondary_dns(self, secondary_dns):
        """Sets the secondary_dns of this DhcpAckEvent.

        string representing InetAddress  # noqa: E501

        :param secondary_dns: The secondary_dns of this DhcpAckEvent.  # noqa: E501
        :type: str
        """

        self._secondary_dns = secondary_dns

    @property
    def lease_time(self):
        """Gets the lease_time of this DhcpAckEvent.  # noqa: E501


        :return: The lease_time of this DhcpAckEvent.  # noqa: E501
        :rtype: int
        """
        return self._lease_time

    @lease_time.setter
    def lease_time(self, lease_time):
        """Sets the lease_time of this DhcpAckEvent.


        :param lease_time: The lease_time of this DhcpAckEvent.  # noqa: E501
        :type: int
        """

        self._lease_time = lease_time

    @property
    def renewal_time(self):
        """Gets the renewal_time of this DhcpAckEvent.  # noqa: E501


        :return: The renewal_time of this DhcpAckEvent.  # noqa: E501
        :rtype: int
        """
        return self._renewal_time

    @renewal_time.setter
    def renewal_time(self, renewal_time):
        """Sets the renewal_time of this DhcpAckEvent.


        :param renewal_time: The renewal_time of this DhcpAckEvent.  # noqa: E501
        :type: int
        """

        self._renewal_time = renewal_time

    @property
    def rebinding_time(self):
        """Gets the rebinding_time of this DhcpAckEvent.  # noqa: E501


        :return: The rebinding_time of this DhcpAckEvent.  # noqa: E501
        :rtype: int
        """
        return self._rebinding_time

    @rebinding_time.setter
    def rebinding_time(self, rebinding_time):
        """Sets the rebinding_time of this DhcpAckEvent.


        :param rebinding_time: The rebinding_time of this DhcpAckEvent.  # noqa: E501
        :type: int
        """

        self._rebinding_time = rebinding_time

    @property
    def time_offset(self):
        """Gets the time_offset of this DhcpAckEvent.  # noqa: E501


        :return: The time_offset of this DhcpAckEvent.  # noqa: E501
        :rtype: int
        """
        return self._time_offset

    @time_offset.setter
    def time_offset(self, time_offset):
        """Sets the time_offset of this DhcpAckEvent.


        :param time_offset: The time_offset of this DhcpAckEvent.  # noqa: E501
        :type: int
        """

        self._time_offset = time_offset

    @property
    def gateway_ip(self):
        """Gets the gateway_ip of this DhcpAckEvent.  # noqa: E501

        string representing InetAddress  # noqa: E501

        :return: The gateway_ip of this DhcpAckEvent.  # noqa: E501
        :rtype: str
        """
        return self._gateway_ip

    @gateway_ip.setter
    def gateway_ip(self, gateway_ip):
        """Sets the gateway_ip of this DhcpAckEvent.

        string representing InetAddress  # noqa: E501

        :param gateway_ip: The gateway_ip of this DhcpAckEvent.  # noqa: E501
        :type: str
        """

        self._gateway_ip = gateway_ip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DhcpAckEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DhcpAckEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
