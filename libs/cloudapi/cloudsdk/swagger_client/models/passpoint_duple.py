# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PasspointDuple(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'locale': 'str',
        'duple_iso3_language': 'str',
        'duple_name': 'str',
        'default_duple_separator': 'str'
    }

    attribute_map = {
        'locale': 'locale',
        'duple_iso3_language': 'dupleIso3Language',
        'duple_name': 'dupleName',
        'default_duple_separator': 'defaultDupleSeparator'
    }

    def __init__(self, locale=None, duple_iso3_language=None, duple_name=None, default_duple_separator=None):  # noqa: E501
        """PasspointDuple - a model defined in Swagger"""  # noqa: E501
        self._locale = None
        self._duple_iso3_language = None
        self._duple_name = None
        self._default_duple_separator = None
        self.discriminator = None
        if locale is not None:
            self.locale = locale
        if duple_iso3_language is not None:
            self.duple_iso3_language = duple_iso3_language
        if duple_name is not None:
            self.duple_name = duple_name
        if default_duple_separator is not None:
            self.default_duple_separator = default_duple_separator

    @property
    def locale(self):
        """Gets the locale of this PasspointDuple.  # noqa: E501

        The locale for this duple.  # noqa: E501

        :return: The locale of this PasspointDuple.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this PasspointDuple.

        The locale for this duple.  # noqa: E501

        :param locale: The locale of this PasspointDuple.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def duple_iso3_language(self):
        """Gets the duple_iso3_language of this PasspointDuple.  # noqa: E501

        3 letter iso language representation based on locale  # noqa: E501

        :return: The duple_iso3_language of this PasspointDuple.  # noqa: E501
        :rtype: str
        """
        return self._duple_iso3_language

    @duple_iso3_language.setter
    def duple_iso3_language(self, duple_iso3_language):
        """Sets the duple_iso3_language of this PasspointDuple.

        3 letter iso language representation based on locale  # noqa: E501

        :param duple_iso3_language: The duple_iso3_language of this PasspointDuple.  # noqa: E501
        :type: str
        """

        self._duple_iso3_language = duple_iso3_language

    @property
    def duple_name(self):
        """Gets the duple_name of this PasspointDuple.  # noqa: E501


        :return: The duple_name of this PasspointDuple.  # noqa: E501
        :rtype: str
        """
        return self._duple_name

    @duple_name.setter
    def duple_name(self, duple_name):
        """Sets the duple_name of this PasspointDuple.


        :param duple_name: The duple_name of this PasspointDuple.  # noqa: E501
        :type: str
        """

        self._duple_name = duple_name

    @property
    def default_duple_separator(self):
        """Gets the default_duple_separator of this PasspointDuple.  # noqa: E501

        default separator between the values of a duple, by default it is a ':'  # noqa: E501

        :return: The default_duple_separator of this PasspointDuple.  # noqa: E501
        :rtype: str
        """
        return self._default_duple_separator

    @default_duple_separator.setter
    def default_duple_separator(self, default_duple_separator):
        """Sets the default_duple_separator of this PasspointDuple.

        default separator between the values of a duple, by default it is a ':'  # noqa: E501

        :param default_duple_separator: The default_duple_separator of this PasspointDuple.  # noqa: E501
        :type: str
        """

        self._default_duple_separator = default_duple_separator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PasspointDuple, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PasspointDuple):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
