# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Alarm(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_id': 'int',
        'equipment_id': 'int',
        'alarm_code': 'AlarmCode',
        'created_timestamp': 'int',
        'originator_type': 'OriginatorType',
        'severity': 'StatusCode',
        'scope_type': 'AlarmScopeType',
        'scope_id': 'str',
        'details': 'AlarmDetails',
        'acknowledged': 'bool',
        'last_modified_timestamp': 'int'
    }

    attribute_map = {
        'customer_id': 'customerId',
        'equipment_id': 'equipmentId',
        'alarm_code': 'alarmCode',
        'created_timestamp': 'createdTimestamp',
        'originator_type': 'originatorType',
        'severity': 'severity',
        'scope_type': 'scopeType',
        'scope_id': 'scopeId',
        'details': 'details',
        'acknowledged': 'acknowledged',
        'last_modified_timestamp': 'lastModifiedTimestamp'
    }

    def __init__(self, customer_id=None, equipment_id=None, alarm_code=None, created_timestamp=None, originator_type=None, severity=None, scope_type=None, scope_id=None, details=None, acknowledged=None, last_modified_timestamp=None):  # noqa: E501
        """Alarm - a model defined in Swagger"""  # noqa: E501
        self._customer_id = None
        self._equipment_id = None
        self._alarm_code = None
        self._created_timestamp = None
        self._originator_type = None
        self._severity = None
        self._scope_type = None
        self._scope_id = None
        self._details = None
        self._acknowledged = None
        self._last_modified_timestamp = None
        self.discriminator = None
        if customer_id is not None:
            self.customer_id = customer_id
        if equipment_id is not None:
            self.equipment_id = equipment_id
        if alarm_code is not None:
            self.alarm_code = alarm_code
        if created_timestamp is not None:
            self.created_timestamp = created_timestamp
        if originator_type is not None:
            self.originator_type = originator_type
        if severity is not None:
            self.severity = severity
        if scope_type is not None:
            self.scope_type = scope_type
        if scope_id is not None:
            self.scope_id = scope_id
        if details is not None:
            self.details = details
        if acknowledged is not None:
            self.acknowledged = acknowledged
        if last_modified_timestamp is not None:
            self.last_modified_timestamp = last_modified_timestamp

    @property
    def customer_id(self):
        """Gets the customer_id of this Alarm.  # noqa: E501


        :return: The customer_id of this Alarm.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Alarm.


        :param customer_id: The customer_id of this Alarm.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def equipment_id(self):
        """Gets the equipment_id of this Alarm.  # noqa: E501


        :return: The equipment_id of this Alarm.  # noqa: E501
        :rtype: int
        """
        return self._equipment_id

    @equipment_id.setter
    def equipment_id(self, equipment_id):
        """Sets the equipment_id of this Alarm.


        :param equipment_id: The equipment_id of this Alarm.  # noqa: E501
        :type: int
        """

        self._equipment_id = equipment_id

    @property
    def alarm_code(self):
        """Gets the alarm_code of this Alarm.  # noqa: E501


        :return: The alarm_code of this Alarm.  # noqa: E501
        :rtype: AlarmCode
        """
        return self._alarm_code

    @alarm_code.setter
    def alarm_code(self, alarm_code):
        """Sets the alarm_code of this Alarm.


        :param alarm_code: The alarm_code of this Alarm.  # noqa: E501
        :type: AlarmCode
        """

        self._alarm_code = alarm_code

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this Alarm.  # noqa: E501


        :return: The created_timestamp of this Alarm.  # noqa: E501
        :rtype: int
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this Alarm.


        :param created_timestamp: The created_timestamp of this Alarm.  # noqa: E501
        :type: int
        """

        self._created_timestamp = created_timestamp

    @property
    def originator_type(self):
        """Gets the originator_type of this Alarm.  # noqa: E501


        :return: The originator_type of this Alarm.  # noqa: E501
        :rtype: OriginatorType
        """
        return self._originator_type

    @originator_type.setter
    def originator_type(self, originator_type):
        """Sets the originator_type of this Alarm.


        :param originator_type: The originator_type of this Alarm.  # noqa: E501
        :type: OriginatorType
        """

        self._originator_type = originator_type

    @property
    def severity(self):
        """Gets the severity of this Alarm.  # noqa: E501


        :return: The severity of this Alarm.  # noqa: E501
        :rtype: StatusCode
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Alarm.


        :param severity: The severity of this Alarm.  # noqa: E501
        :type: StatusCode
        """

        self._severity = severity

    @property
    def scope_type(self):
        """Gets the scope_type of this Alarm.  # noqa: E501


        :return: The scope_type of this Alarm.  # noqa: E501
        :rtype: AlarmScopeType
        """
        return self._scope_type

    @scope_type.setter
    def scope_type(self, scope_type):
        """Sets the scope_type of this Alarm.


        :param scope_type: The scope_type of this Alarm.  # noqa: E501
        :type: AlarmScopeType
        """

        self._scope_type = scope_type

    @property
    def scope_id(self):
        """Gets the scope_id of this Alarm.  # noqa: E501


        :return: The scope_id of this Alarm.  # noqa: E501
        :rtype: str
        """
        return self._scope_id

    @scope_id.setter
    def scope_id(self, scope_id):
        """Sets the scope_id of this Alarm.


        :param scope_id: The scope_id of this Alarm.  # noqa: E501
        :type: str
        """

        self._scope_id = scope_id

    @property
    def details(self):
        """Gets the details of this Alarm.  # noqa: E501


        :return: The details of this Alarm.  # noqa: E501
        :rtype: AlarmDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Alarm.


        :param details: The details of this Alarm.  # noqa: E501
        :type: AlarmDetails
        """

        self._details = details

    @property
    def acknowledged(self):
        """Gets the acknowledged of this Alarm.  # noqa: E501


        :return: The acknowledged of this Alarm.  # noqa: E501
        :rtype: bool
        """
        return self._acknowledged

    @acknowledged.setter
    def acknowledged(self, acknowledged):
        """Sets the acknowledged of this Alarm.


        :param acknowledged: The acknowledged of this Alarm.  # noqa: E501
        :type: bool
        """

        self._acknowledged = acknowledged

    @property
    def last_modified_timestamp(self):
        """Gets the last_modified_timestamp of this Alarm.  # noqa: E501

        must be provided for update operation, update will be rejected if provided value does not match the one currently stored in the database  # noqa: E501

        :return: The last_modified_timestamp of this Alarm.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_timestamp

    @last_modified_timestamp.setter
    def last_modified_timestamp(self, last_modified_timestamp):
        """Sets the last_modified_timestamp of this Alarm.

        must be provided for update operation, update will be rejected if provided value does not match the one currently stored in the database  # noqa: E501

        :param last_modified_timestamp: The last_modified_timestamp of this Alarm.  # noqa: E501
        :type: int
        """

        self._last_modified_timestamp = last_modified_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Alarm, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Alarm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
