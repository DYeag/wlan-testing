# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RadioUtilizationPerRadioDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'avg_assoc_client_tx': 'int',
        'avg_unassoc_client_tx': 'int',
        'avg_assoc_client_rx': 'int',
        'avg_unassoc_client_rx': 'int',
        'avg_non_wifi': 'int'
    }

    attribute_map = {
        'avg_assoc_client_tx': 'avgAssocClientTx',
        'avg_unassoc_client_tx': 'avgUnassocClientTx',
        'avg_assoc_client_rx': 'avgAssocClientRx',
        'avg_unassoc_client_rx': 'avgUnassocClientRx',
        'avg_non_wifi': 'avgNonWifi'
    }

    def __init__(self, avg_assoc_client_tx=None, avg_unassoc_client_tx=None, avg_assoc_client_rx=None, avg_unassoc_client_rx=None, avg_non_wifi=None):  # noqa: E501
        """RadioUtilizationPerRadioDetails - a model defined in Swagger"""  # noqa: E501
        self._avg_assoc_client_tx = None
        self._avg_unassoc_client_tx = None
        self._avg_assoc_client_rx = None
        self._avg_unassoc_client_rx = None
        self._avg_non_wifi = None
        self.discriminator = None
        if avg_assoc_client_tx is not None:
            self.avg_assoc_client_tx = avg_assoc_client_tx
        if avg_unassoc_client_tx is not None:
            self.avg_unassoc_client_tx = avg_unassoc_client_tx
        if avg_assoc_client_rx is not None:
            self.avg_assoc_client_rx = avg_assoc_client_rx
        if avg_unassoc_client_rx is not None:
            self.avg_unassoc_client_rx = avg_unassoc_client_rx
        if avg_non_wifi is not None:
            self.avg_non_wifi = avg_non_wifi

    @property
    def avg_assoc_client_tx(self):
        """Gets the avg_assoc_client_tx of this RadioUtilizationPerRadioDetails.  # noqa: E501


        :return: The avg_assoc_client_tx of this RadioUtilizationPerRadioDetails.  # noqa: E501
        :rtype: int
        """
        return self._avg_assoc_client_tx

    @avg_assoc_client_tx.setter
    def avg_assoc_client_tx(self, avg_assoc_client_tx):
        """Sets the avg_assoc_client_tx of this RadioUtilizationPerRadioDetails.


        :param avg_assoc_client_tx: The avg_assoc_client_tx of this RadioUtilizationPerRadioDetails.  # noqa: E501
        :type: int
        """

        self._avg_assoc_client_tx = avg_assoc_client_tx

    @property
    def avg_unassoc_client_tx(self):
        """Gets the avg_unassoc_client_tx of this RadioUtilizationPerRadioDetails.  # noqa: E501


        :return: The avg_unassoc_client_tx of this RadioUtilizationPerRadioDetails.  # noqa: E501
        :rtype: int
        """
        return self._avg_unassoc_client_tx

    @avg_unassoc_client_tx.setter
    def avg_unassoc_client_tx(self, avg_unassoc_client_tx):
        """Sets the avg_unassoc_client_tx of this RadioUtilizationPerRadioDetails.


        :param avg_unassoc_client_tx: The avg_unassoc_client_tx of this RadioUtilizationPerRadioDetails.  # noqa: E501
        :type: int
        """

        self._avg_unassoc_client_tx = avg_unassoc_client_tx

    @property
    def avg_assoc_client_rx(self):
        """Gets the avg_assoc_client_rx of this RadioUtilizationPerRadioDetails.  # noqa: E501


        :return: The avg_assoc_client_rx of this RadioUtilizationPerRadioDetails.  # noqa: E501
        :rtype: int
        """
        return self._avg_assoc_client_rx

    @avg_assoc_client_rx.setter
    def avg_assoc_client_rx(self, avg_assoc_client_rx):
        """Sets the avg_assoc_client_rx of this RadioUtilizationPerRadioDetails.


        :param avg_assoc_client_rx: The avg_assoc_client_rx of this RadioUtilizationPerRadioDetails.  # noqa: E501
        :type: int
        """

        self._avg_assoc_client_rx = avg_assoc_client_rx

    @property
    def avg_unassoc_client_rx(self):
        """Gets the avg_unassoc_client_rx of this RadioUtilizationPerRadioDetails.  # noqa: E501


        :return: The avg_unassoc_client_rx of this RadioUtilizationPerRadioDetails.  # noqa: E501
        :rtype: int
        """
        return self._avg_unassoc_client_rx

    @avg_unassoc_client_rx.setter
    def avg_unassoc_client_rx(self, avg_unassoc_client_rx):
        """Sets the avg_unassoc_client_rx of this RadioUtilizationPerRadioDetails.


        :param avg_unassoc_client_rx: The avg_unassoc_client_rx of this RadioUtilizationPerRadioDetails.  # noqa: E501
        :type: int
        """

        self._avg_unassoc_client_rx = avg_unassoc_client_rx

    @property
    def avg_non_wifi(self):
        """Gets the avg_non_wifi of this RadioUtilizationPerRadioDetails.  # noqa: E501


        :return: The avg_non_wifi of this RadioUtilizationPerRadioDetails.  # noqa: E501
        :rtype: int
        """
        return self._avg_non_wifi

    @avg_non_wifi.setter
    def avg_non_wifi(self, avg_non_wifi):
        """Sets the avg_non_wifi of this RadioUtilizationPerRadioDetails.


        :param avg_non_wifi: The avg_non_wifi of this RadioUtilizationPerRadioDetails.  # noqa: E501
        :type: int
        """

        self._avg_non_wifi = avg_non_wifi

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RadioUtilizationPerRadioDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RadioUtilizationPerRadioDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
