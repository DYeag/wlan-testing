# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TunnelMetricData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip_addr': 'str',
        'cfg_time': 'int',
        'up_time': 'int',
        'pings_sent': 'int',
        'pings_recvd': 'int',
        'active_tun': 'bool'
    }

    attribute_map = {
        'ip_addr': 'ipAddr',
        'cfg_time': 'cfgTime',
        'up_time': 'upTime',
        'pings_sent': 'pingsSent',
        'pings_recvd': 'pingsRecvd',
        'active_tun': 'activeTun'
    }

    def __init__(self, ip_addr=None, cfg_time=None, up_time=None, pings_sent=None, pings_recvd=None, active_tun=None):  # noqa: E501
        """TunnelMetricData - a model defined in Swagger"""  # noqa: E501
        self._ip_addr = None
        self._cfg_time = None
        self._up_time = None
        self._pings_sent = None
        self._pings_recvd = None
        self._active_tun = None
        self.discriminator = None
        if ip_addr is not None:
            self.ip_addr = ip_addr
        if cfg_time is not None:
            self.cfg_time = cfg_time
        if up_time is not None:
            self.up_time = up_time
        if pings_sent is not None:
            self.pings_sent = pings_sent
        if pings_recvd is not None:
            self.pings_recvd = pings_recvd
        if active_tun is not None:
            self.active_tun = active_tun

    @property
    def ip_addr(self):
        """Gets the ip_addr of this TunnelMetricData.  # noqa: E501

        IP address of tunnel peer  # noqa: E501

        :return: The ip_addr of this TunnelMetricData.  # noqa: E501
        :rtype: str
        """
        return self._ip_addr

    @ip_addr.setter
    def ip_addr(self, ip_addr):
        """Sets the ip_addr of this TunnelMetricData.

        IP address of tunnel peer  # noqa: E501

        :param ip_addr: The ip_addr of this TunnelMetricData.  # noqa: E501
        :type: str
        """

        self._ip_addr = ip_addr

    @property
    def cfg_time(self):
        """Gets the cfg_time of this TunnelMetricData.  # noqa: E501

        number of seconds tunnel was configured  # noqa: E501

        :return: The cfg_time of this TunnelMetricData.  # noqa: E501
        :rtype: int
        """
        return self._cfg_time

    @cfg_time.setter
    def cfg_time(self, cfg_time):
        """Sets the cfg_time of this TunnelMetricData.

        number of seconds tunnel was configured  # noqa: E501

        :param cfg_time: The cfg_time of this TunnelMetricData.  # noqa: E501
        :type: int
        """

        self._cfg_time = cfg_time

    @property
    def up_time(self):
        """Gets the up_time of this TunnelMetricData.  # noqa: E501

        number of seconds tunnel was up in current bin  # noqa: E501

        :return: The up_time of this TunnelMetricData.  # noqa: E501
        :rtype: int
        """
        return self._up_time

    @up_time.setter
    def up_time(self, up_time):
        """Sets the up_time of this TunnelMetricData.

        number of seconds tunnel was up in current bin  # noqa: E501

        :param up_time: The up_time of this TunnelMetricData.  # noqa: E501
        :type: int
        """

        self._up_time = up_time

    @property
    def pings_sent(self):
        """Gets the pings_sent of this TunnelMetricData.  # noqa: E501

        number of 'ping' sent in the current bin in case tunnel was DOWN  # noqa: E501

        :return: The pings_sent of this TunnelMetricData.  # noqa: E501
        :rtype: int
        """
        return self._pings_sent

    @pings_sent.setter
    def pings_sent(self, pings_sent):
        """Sets the pings_sent of this TunnelMetricData.

        number of 'ping' sent in the current bin in case tunnel was DOWN  # noqa: E501

        :param pings_sent: The pings_sent of this TunnelMetricData.  # noqa: E501
        :type: int
        """

        self._pings_sent = pings_sent

    @property
    def pings_recvd(self):
        """Gets the pings_recvd of this TunnelMetricData.  # noqa: E501

        number of 'ping' response received by peer in the current bin in case tunnel was DOWN  # noqa: E501

        :return: The pings_recvd of this TunnelMetricData.  # noqa: E501
        :rtype: int
        """
        return self._pings_recvd

    @pings_recvd.setter
    def pings_recvd(self, pings_recvd):
        """Sets the pings_recvd of this TunnelMetricData.

        number of 'ping' response received by peer in the current bin in case tunnel was DOWN  # noqa: E501

        :param pings_recvd: The pings_recvd of this TunnelMetricData.  # noqa: E501
        :type: int
        """

        self._pings_recvd = pings_recvd

    @property
    def active_tun(self):
        """Gets the active_tun of this TunnelMetricData.  # noqa: E501

        Indicates if the current tunnel is the active one  # noqa: E501

        :return: The active_tun of this TunnelMetricData.  # noqa: E501
        :rtype: bool
        """
        return self._active_tun

    @active_tun.setter
    def active_tun(self, active_tun):
        """Sets the active_tun of this TunnelMetricData.

        Indicates if the current tunnel is the active one  # noqa: E501

        :param active_tun: The active_tun of this TunnelMetricData.  # noqa: E501
        :type: bool
        """

        self._active_tun = active_tun

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TunnelMetricData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TunnelMetricData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
