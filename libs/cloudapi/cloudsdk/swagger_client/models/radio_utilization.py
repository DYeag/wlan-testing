# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RadioUtilization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assoc_client_tx': 'int',
        'unassoc_client_tx': 'int',
        'assoc_client_rx': 'int',
        'unassoc_client_rx': 'int',
        'non_wifi': 'int',
        'timestamp_seconds': 'int',
        'ibss': 'float',
        'un_available_capacity': 'float'
    }

    attribute_map = {
        'assoc_client_tx': 'assocClientTx',
        'unassoc_client_tx': 'unassocClientTx',
        'assoc_client_rx': 'assocClientRx',
        'unassoc_client_rx': 'unassocClientRx',
        'non_wifi': 'nonWifi',
        'timestamp_seconds': 'timestampSeconds',
        'ibss': 'ibss',
        'un_available_capacity': 'unAvailableCapacity'
    }

    def __init__(self, assoc_client_tx=None, unassoc_client_tx=None, assoc_client_rx=None, unassoc_client_rx=None, non_wifi=None, timestamp_seconds=None, ibss=None, un_available_capacity=None):  # noqa: E501
        """RadioUtilization - a model defined in Swagger"""  # noqa: E501
        self._assoc_client_tx = None
        self._unassoc_client_tx = None
        self._assoc_client_rx = None
        self._unassoc_client_rx = None
        self._non_wifi = None
        self._timestamp_seconds = None
        self._ibss = None
        self._un_available_capacity = None
        self.discriminator = None
        if assoc_client_tx is not None:
            self.assoc_client_tx = assoc_client_tx
        if unassoc_client_tx is not None:
            self.unassoc_client_tx = unassoc_client_tx
        if assoc_client_rx is not None:
            self.assoc_client_rx = assoc_client_rx
        if unassoc_client_rx is not None:
            self.unassoc_client_rx = unassoc_client_rx
        if non_wifi is not None:
            self.non_wifi = non_wifi
        if timestamp_seconds is not None:
            self.timestamp_seconds = timestamp_seconds
        if ibss is not None:
            self.ibss = ibss
        if un_available_capacity is not None:
            self.un_available_capacity = un_available_capacity

    @property
    def assoc_client_tx(self):
        """Gets the assoc_client_tx of this RadioUtilization.  # noqa: E501


        :return: The assoc_client_tx of this RadioUtilization.  # noqa: E501
        :rtype: int
        """
        return self._assoc_client_tx

    @assoc_client_tx.setter
    def assoc_client_tx(self, assoc_client_tx):
        """Sets the assoc_client_tx of this RadioUtilization.


        :param assoc_client_tx: The assoc_client_tx of this RadioUtilization.  # noqa: E501
        :type: int
        """

        self._assoc_client_tx = assoc_client_tx

    @property
    def unassoc_client_tx(self):
        """Gets the unassoc_client_tx of this RadioUtilization.  # noqa: E501


        :return: The unassoc_client_tx of this RadioUtilization.  # noqa: E501
        :rtype: int
        """
        return self._unassoc_client_tx

    @unassoc_client_tx.setter
    def unassoc_client_tx(self, unassoc_client_tx):
        """Sets the unassoc_client_tx of this RadioUtilization.


        :param unassoc_client_tx: The unassoc_client_tx of this RadioUtilization.  # noqa: E501
        :type: int
        """

        self._unassoc_client_tx = unassoc_client_tx

    @property
    def assoc_client_rx(self):
        """Gets the assoc_client_rx of this RadioUtilization.  # noqa: E501


        :return: The assoc_client_rx of this RadioUtilization.  # noqa: E501
        :rtype: int
        """
        return self._assoc_client_rx

    @assoc_client_rx.setter
    def assoc_client_rx(self, assoc_client_rx):
        """Sets the assoc_client_rx of this RadioUtilization.


        :param assoc_client_rx: The assoc_client_rx of this RadioUtilization.  # noqa: E501
        :type: int
        """

        self._assoc_client_rx = assoc_client_rx

    @property
    def unassoc_client_rx(self):
        """Gets the unassoc_client_rx of this RadioUtilization.  # noqa: E501


        :return: The unassoc_client_rx of this RadioUtilization.  # noqa: E501
        :rtype: int
        """
        return self._unassoc_client_rx

    @unassoc_client_rx.setter
    def unassoc_client_rx(self, unassoc_client_rx):
        """Sets the unassoc_client_rx of this RadioUtilization.


        :param unassoc_client_rx: The unassoc_client_rx of this RadioUtilization.  # noqa: E501
        :type: int
        """

        self._unassoc_client_rx = unassoc_client_rx

    @property
    def non_wifi(self):
        """Gets the non_wifi of this RadioUtilization.  # noqa: E501


        :return: The non_wifi of this RadioUtilization.  # noqa: E501
        :rtype: int
        """
        return self._non_wifi

    @non_wifi.setter
    def non_wifi(self, non_wifi):
        """Sets the non_wifi of this RadioUtilization.


        :param non_wifi: The non_wifi of this RadioUtilization.  # noqa: E501
        :type: int
        """

        self._non_wifi = non_wifi

    @property
    def timestamp_seconds(self):
        """Gets the timestamp_seconds of this RadioUtilization.  # noqa: E501


        :return: The timestamp_seconds of this RadioUtilization.  # noqa: E501
        :rtype: int
        """
        return self._timestamp_seconds

    @timestamp_seconds.setter
    def timestamp_seconds(self, timestamp_seconds):
        """Sets the timestamp_seconds of this RadioUtilization.


        :param timestamp_seconds: The timestamp_seconds of this RadioUtilization.  # noqa: E501
        :type: int
        """

        self._timestamp_seconds = timestamp_seconds

    @property
    def ibss(self):
        """Gets the ibss of this RadioUtilization.  # noqa: E501


        :return: The ibss of this RadioUtilization.  # noqa: E501
        :rtype: float
        """
        return self._ibss

    @ibss.setter
    def ibss(self, ibss):
        """Sets the ibss of this RadioUtilization.


        :param ibss: The ibss of this RadioUtilization.  # noqa: E501
        :type: float
        """

        self._ibss = ibss

    @property
    def un_available_capacity(self):
        """Gets the un_available_capacity of this RadioUtilization.  # noqa: E501


        :return: The un_available_capacity of this RadioUtilization.  # noqa: E501
        :rtype: float
        """
        return self._un_available_capacity

    @un_available_capacity.setter
    def un_available_capacity(self, un_available_capacity):
        """Sets the un_available_capacity of this RadioUtilization.


        :param un_available_capacity: The un_available_capacity of this RadioUtilization.  # noqa: E501
        :type: float
        """

        self._un_available_capacity = un_available_capacity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RadioUtilization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RadioUtilization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
