# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class McsType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    _1_2_4GHZ_ONLY = "MCS_1#  2.4GHz only"
    _2_2_4GHZ_ONLY = "MCS_2#  2.4GHz only"
    _5DOT5_2_4GHZ_ONLY = "MCS_5dot5# 2.4GHz only"
    _11_2_4GHZ_ONLY = "MCS_11# 2.4GHz only"
    _6 = "MCS_6"
    _9 = "MCS_9"
    _12 = "MCS_12"
    _18 = "MCS_18"
    _24 = "MCS_24"
    _36 = "MCS_36"
    _48 = "MCS_48"
    _54 = "MCS_54"
    N_0 = "MCS_N_0"
    N_1 = "MCS_N_1"
    N_2 = "MCS_N_2"
    N_3 = "MCS_N_3"
    N_4 = "MCS_N_4"
    N_5 = "MCS_N_5"
    N_6 = "MCS_N_6"
    N_7 = "MCS_N_7"
    N_8 = "MCS_N_8"
    N_9 = "MCS_N_9"
    N_10 = "MCS_N_10"
    N_11 = "MCS_N_11"
    N_12 = "MCS_N_12"
    N_13 = "MCS_N_13"
    N_14 = "MCS_N_14"
    N_15 = "MCS_N_15"
    AC_1X1_0 = "MCS_AC_1x1_0"
    AC_1X1_1 = "MCS_AC_1x1_1"
    AC_1X1_2 = "MCS_AC_1x1_2"
    AC_1X1_3 = "MCS_AC_1x1_3"
    AC_1X1_4 = "MCS_AC_1x1_4"
    AC_1X1_5 = "MCS_AC_1x1_5"
    AC_1X1_6 = "MCS_AC_1x1_6"
    AC_1X1_7 = "MCS_AC_1x1_7"
    AC_1X1_8 = "MCS_AC_1x1_8"
    AC_1X1_9 = "MCS_AC_1x1_9"
    AC_2X2_0 = "MCS_AC_2x2_0"
    AC_2X2_1 = "MCS_AC_2x2_1"
    AC_2X2_2 = "MCS_AC_2x2_2"
    AC_2X2_3 = "MCS_AC_2x2_3"
    AC_2X2_4 = "MCS_AC_2x2_4"
    AC_2X2_5 = "MCS_AC_2x2_5"
    AC_2X2_6 = "MCS_AC_2x2_6"
    AC_2X2_7 = "MCS_AC_2x2_7"
    AC_2X2_8 = "MCS_AC_2x2_8"
    AC_2X2_9 = "MCS_AC_2x2_9"
    AC_3X3_0 = "MCS_AC_3x3_0"
    AC_3X3_1 = "MCS_AC_3x3_1"
    AC_3X3_2 = "MCS_AC_3x3_2"
    AC_3X3_3 = "MCS_AC_3x3_3"
    AC_3X3_4 = "MCS_AC_3x3_4"
    AC_3X3_5 = "MCS_AC_3x3_5"
    AC_3X3_6 = "MCS_AC_3x3_6"
    AC_3X3_7 = "MCS_AC_3x3_7"
    AC_3X3_8 = "MCS_AC_3x3_8"
    AC_3X3_9 = "MCS_AC_3x3_9"
    N_16 = "MCS_N_16"
    N_17 = "MCS_N_17"
    N_18 = "MCS_N_18"
    N_19 = "MCS_N_19"
    N_20 = "MCS_N_20"
    N_21 = "MCS_N_21"
    N_22 = "MCS_N_22"
    N_23 = "MCS_N_23"
    N_24 = "MCS_N_24"
    N_25 = "MCS_N_25"
    N_26 = "MCS_N_26"
    N_27 = "MCS_N_27"
    N_28 = "MCS_N_28"
    N_29 = "MCS_N_29"
    N_30 = "MCS_N_30"
    N_31 = "MCS_N_31"
    AC_4X4_0 = "MCS_AC_4x4_0"
    AC_4X4_1 = "MCS_AC_4x4_1"
    AC_4X4_2 = "MCS_AC_4x4_2"
    AC_4X4_3 = "MCS_AC_4x4_3"
    AC_4X4_4 = "MCS_AC_4x4_4"
    AC_4X4_5 = "MCS_AC_4x4_5"
    AC_4X4_6 = "MCS_AC_4x4_6"
    AC_4X4_7 = "MCS_AC_4x4_7"
    AC_4X4_8 = "MCS_AC_4x4_8"
    AC_4X4_9 = "MCS_AC_4x4_9"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """McsType - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(McsType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, McsType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
