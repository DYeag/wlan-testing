# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AlarmCode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    LIMITEDCLOUDCONNECTIVITY = "LimitedCloudConnectivity"
    ACCESSPOINTISUNREACHABLE = "AccessPointIsUnreachable"
    NOMETRICSRECEIVED = "NoMetricsReceived"
    NOISEFLOOR2G = "NoiseFloor2G"
    CHANNELUTILIZATION2G = "ChannelUtilization2G"
    NOISEFLOOR5G = "NoiseFloor5G"
    CHANNELUTILIZATION5G = "ChannelUtilization5G"
    DNS = "DNS"
    DNSLATENCY = "DNSLatency"
    DHCP = "DHCP"
    DHCPLATENCY = "DHCPLatency"
    RADIUS = "Radius"
    RADIUSLATENCY = "RadiusLatency"
    CLOUDLINK = "CloudLink"
    CLOUDLINKLATENCY = "CloudLinkLatency"
    CPUUTILIZATION = "CPUUtilization"
    MEMORYUTILIZATION = "MemoryUtilization"
    DISCONNECTED = "Disconnected"
    CPUTEMPERATURE = "CPUTemperature"
    LOWMEMORYREBOOT = "LowMemoryReboot"
    COUNTRYCODEMISMATCH = "CountryCodeMisMatch"
    HARDWAREISSUEDIAGNOSTIC = "HardwareIssueDiagnostic"
    TOOMANYCLIENTS2G = "TooManyClients2g"
    TOOMANYCLIENTS5G = "TooManyClients5g"
    REBOOTREQUESTFAILED = "RebootRequestFailed"
    RADIUSCONFIGURATIONFAILED = "RadiusConfigurationFailed"
    FIRMWAREUPGRADESTUCK = "FirmwareUpgradeStuck"
    MULTIPLEAPCSONSAMESUBNET = "MultipleAPCsOnSameSubnet"
    RADIOHUNG2G = "RadioHung2G"
    RADIOHUNG5G = "RadioHung5G"
    CONFIGURATIONOUTOFSYNC = "ConfigurationOutOfSync"
    FAILEDCPAUTHENTICATIONS = "FailedCPAuthentications"
    DISABLEDSSID = "DisabledSSID"
    DEAUTHATTACKDETECTED = "DeauthAttackDetected"
    TOOMANYBLOCKEDDEVICES = "TooManyBlockedDevices"
    TOOMANYROGUEAPS = "TooManyRogueAPs"
    NEIGHBOURSCANSTUCKON2G = "NeighbourScanStuckOn2g"
    NEIGHBOURSCANSTUCKON5G = "NeighbourScanStuckOn5g"
    INTROUBLESHOOTMODE = "InTroubleshootMode"
    CHANNELSOUTOFSYNC2G = "ChannelsOutOfSync2g"
    CHANNELSOUTOFSYNC5GV = "ChannelsOutOfSync5gv"
    INCONSISTENTBASEMACS = "InconsistentBasemacs"
    GENERICERROR = "GenericError"
    RADIOHUNG = "RadioHung"
    ASSOCFAILURE = "AssocFailure"
    CLIENTAUTHFAILURE = "ClientAuthFailure"
    QOEISSUES2G = "QoEIssues2g"
    QOEISSUES5G = "QoEIssues5g"
    DNSSERVERUNREACHABLE = "DNSServerUnreachable"
    DNSSERVERLATENCY = "DNSServerLatency"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """AlarmCode - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlarmCode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlarmCode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
