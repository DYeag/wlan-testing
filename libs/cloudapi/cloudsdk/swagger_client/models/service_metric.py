# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceMetric(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_id': 'int',
        'location_id': 'int',
        'equipment_id': 'int',
        'client_mac': 'int',
        'client_mac_address': 'MacAddress',
        'data_type': 'ServiceMetricDataType',
        'created_timestamp': 'int',
        'details': 'ServiceMetricDetails'
    }

    attribute_map = {
        'customer_id': 'customerId',
        'location_id': 'locationId',
        'equipment_id': 'equipmentId',
        'client_mac': 'clientMac',
        'client_mac_address': 'clientMacAddress',
        'data_type': 'dataType',
        'created_timestamp': 'createdTimestamp',
        'details': 'details'
    }

    def __init__(self, customer_id=None, location_id=None, equipment_id=None, client_mac=None, client_mac_address=None, data_type=None, created_timestamp=None, details=None):  # noqa: E501
        """ServiceMetric - a model defined in Swagger"""  # noqa: E501
        self._customer_id = None
        self._location_id = None
        self._equipment_id = None
        self._client_mac = None
        self._client_mac_address = None
        self._data_type = None
        self._created_timestamp = None
        self._details = None
        self.discriminator = None
        if customer_id is not None:
            self.customer_id = customer_id
        if location_id is not None:
            self.location_id = location_id
        if equipment_id is not None:
            self.equipment_id = equipment_id
        if client_mac is not None:
            self.client_mac = client_mac
        if client_mac_address is not None:
            self.client_mac_address = client_mac_address
        if data_type is not None:
            self.data_type = data_type
        if created_timestamp is not None:
            self.created_timestamp = created_timestamp
        if details is not None:
            self.details = details

    @property
    def customer_id(self):
        """Gets the customer_id of this ServiceMetric.  # noqa: E501


        :return: The customer_id of this ServiceMetric.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this ServiceMetric.


        :param customer_id: The customer_id of this ServiceMetric.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def location_id(self):
        """Gets the location_id of this ServiceMetric.  # noqa: E501


        :return: The location_id of this ServiceMetric.  # noqa: E501
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this ServiceMetric.


        :param location_id: The location_id of this ServiceMetric.  # noqa: E501
        :type: int
        """

        self._location_id = location_id

    @property
    def equipment_id(self):
        """Gets the equipment_id of this ServiceMetric.  # noqa: E501


        :return: The equipment_id of this ServiceMetric.  # noqa: E501
        :rtype: int
        """
        return self._equipment_id

    @equipment_id.setter
    def equipment_id(self, equipment_id):
        """Sets the equipment_id of this ServiceMetric.


        :param equipment_id: The equipment_id of this ServiceMetric.  # noqa: E501
        :type: int
        """

        self._equipment_id = equipment_id

    @property
    def client_mac(self):
        """Gets the client_mac of this ServiceMetric.  # noqa: E501

        int64 representation of the client MAC address, used internally for storage and indexing  # noqa: E501

        :return: The client_mac of this ServiceMetric.  # noqa: E501
        :rtype: int
        """
        return self._client_mac

    @client_mac.setter
    def client_mac(self, client_mac):
        """Sets the client_mac of this ServiceMetric.

        int64 representation of the client MAC address, used internally for storage and indexing  # noqa: E501

        :param client_mac: The client_mac of this ServiceMetric.  # noqa: E501
        :type: int
        """

        self._client_mac = client_mac

    @property
    def client_mac_address(self):
        """Gets the client_mac_address of this ServiceMetric.  # noqa: E501


        :return: The client_mac_address of this ServiceMetric.  # noqa: E501
        :rtype: MacAddress
        """
        return self._client_mac_address

    @client_mac_address.setter
    def client_mac_address(self, client_mac_address):
        """Sets the client_mac_address of this ServiceMetric.


        :param client_mac_address: The client_mac_address of this ServiceMetric.  # noqa: E501
        :type: MacAddress
        """

        self._client_mac_address = client_mac_address

    @property
    def data_type(self):
        """Gets the data_type of this ServiceMetric.  # noqa: E501


        :return: The data_type of this ServiceMetric.  # noqa: E501
        :rtype: ServiceMetricDataType
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this ServiceMetric.


        :param data_type: The data_type of this ServiceMetric.  # noqa: E501
        :type: ServiceMetricDataType
        """

        self._data_type = data_type

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this ServiceMetric.  # noqa: E501


        :return: The created_timestamp of this ServiceMetric.  # noqa: E501
        :rtype: int
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this ServiceMetric.


        :param created_timestamp: The created_timestamp of this ServiceMetric.  # noqa: E501
        :type: int
        """

        self._created_timestamp = created_timestamp

    @property
    def details(self):
        """Gets the details of this ServiceMetric.  # noqa: E501


        :return: The details of this ServiceMetric.  # noqa: E501
        :rtype: ServiceMetricDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ServiceMetric.


        :param details: The details of this ServiceMetric.  # noqa: E501
        :type: ServiceMetricDetails
        """

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceMetric, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceMetric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
