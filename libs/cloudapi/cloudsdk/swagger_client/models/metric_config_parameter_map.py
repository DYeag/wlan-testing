# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetricConfigParameterMap(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ap_node': 'ServiceMetricSurveyConfigParameters',
        'ap_ssid': 'ServiceMetricRadioConfigParameters',
        'client': 'ServiceMetricRadioConfigParameters',
        'channel': 'ServiceMetricSurveyConfigParameters',
        'neighbour': 'ServiceMetricSurveyConfigParameters',
        'qo_e': 'ServiceMetricConfigParameters',
        'client_qo_e': 'ServiceMetricConfigParameters'
    }

    attribute_map = {
        'ap_node': 'ApNode',
        'ap_ssid': 'ApSsid',
        'client': 'Client',
        'channel': 'Channel',
        'neighbour': 'Neighbour',
        'qo_e': 'QoE',
        'client_qo_e': 'ClientQoE'
    }

    def __init__(self, ap_node=None, ap_ssid=None, client=None, channel=None, neighbour=None, qo_e=None, client_qo_e=None):  # noqa: E501
        """MetricConfigParameterMap - a model defined in Swagger"""  # noqa: E501
        self._ap_node = None
        self._ap_ssid = None
        self._client = None
        self._channel = None
        self._neighbour = None
        self._qo_e = None
        self._client_qo_e = None
        self.discriminator = None
        if ap_node is not None:
            self.ap_node = ap_node
        if ap_ssid is not None:
            self.ap_ssid = ap_ssid
        if client is not None:
            self.client = client
        if channel is not None:
            self.channel = channel
        if neighbour is not None:
            self.neighbour = neighbour
        if qo_e is not None:
            self.qo_e = qo_e
        if client_qo_e is not None:
            self.client_qo_e = client_qo_e

    @property
    def ap_node(self):
        """Gets the ap_node of this MetricConfigParameterMap.  # noqa: E501


        :return: The ap_node of this MetricConfigParameterMap.  # noqa: E501
        :rtype: ServiceMetricSurveyConfigParameters
        """
        return self._ap_node

    @ap_node.setter
    def ap_node(self, ap_node):
        """Sets the ap_node of this MetricConfigParameterMap.


        :param ap_node: The ap_node of this MetricConfigParameterMap.  # noqa: E501
        :type: ServiceMetricSurveyConfigParameters
        """

        self._ap_node = ap_node

    @property
    def ap_ssid(self):
        """Gets the ap_ssid of this MetricConfigParameterMap.  # noqa: E501


        :return: The ap_ssid of this MetricConfigParameterMap.  # noqa: E501
        :rtype: ServiceMetricRadioConfigParameters
        """
        return self._ap_ssid

    @ap_ssid.setter
    def ap_ssid(self, ap_ssid):
        """Sets the ap_ssid of this MetricConfigParameterMap.


        :param ap_ssid: The ap_ssid of this MetricConfigParameterMap.  # noqa: E501
        :type: ServiceMetricRadioConfigParameters
        """

        self._ap_ssid = ap_ssid

    @property
    def client(self):
        """Gets the client of this MetricConfigParameterMap.  # noqa: E501


        :return: The client of this MetricConfigParameterMap.  # noqa: E501
        :rtype: ServiceMetricRadioConfigParameters
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this MetricConfigParameterMap.


        :param client: The client of this MetricConfigParameterMap.  # noqa: E501
        :type: ServiceMetricRadioConfigParameters
        """

        self._client = client

    @property
    def channel(self):
        """Gets the channel of this MetricConfigParameterMap.  # noqa: E501


        :return: The channel of this MetricConfigParameterMap.  # noqa: E501
        :rtype: ServiceMetricSurveyConfigParameters
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this MetricConfigParameterMap.


        :param channel: The channel of this MetricConfigParameterMap.  # noqa: E501
        :type: ServiceMetricSurveyConfigParameters
        """

        self._channel = channel

    @property
    def neighbour(self):
        """Gets the neighbour of this MetricConfigParameterMap.  # noqa: E501


        :return: The neighbour of this MetricConfigParameterMap.  # noqa: E501
        :rtype: ServiceMetricSurveyConfigParameters
        """
        return self._neighbour

    @neighbour.setter
    def neighbour(self, neighbour):
        """Sets the neighbour of this MetricConfigParameterMap.


        :param neighbour: The neighbour of this MetricConfigParameterMap.  # noqa: E501
        :type: ServiceMetricSurveyConfigParameters
        """

        self._neighbour = neighbour

    @property
    def qo_e(self):
        """Gets the qo_e of this MetricConfigParameterMap.  # noqa: E501


        :return: The qo_e of this MetricConfigParameterMap.  # noqa: E501
        :rtype: ServiceMetricConfigParameters
        """
        return self._qo_e

    @qo_e.setter
    def qo_e(self, qo_e):
        """Sets the qo_e of this MetricConfigParameterMap.


        :param qo_e: The qo_e of this MetricConfigParameterMap.  # noqa: E501
        :type: ServiceMetricConfigParameters
        """

        self._qo_e = qo_e

    @property
    def client_qo_e(self):
        """Gets the client_qo_e of this MetricConfigParameterMap.  # noqa: E501


        :return: The client_qo_e of this MetricConfigParameterMap.  # noqa: E501
        :rtype: ServiceMetricConfigParameters
        """
        return self._client_qo_e

    @client_qo_e.setter
    def client_qo_e(self, client_qo_e):
        """Sets the client_qo_e of this MetricConfigParameterMap.


        :param client_qo_e: The client_qo_e of this MetricConfigParameterMap.  # noqa: E501
        :type: ServiceMetricConfigParameters
        """

        self._client_qo_e = client_qo_e

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetricConfigParameterMap, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricConfigParameterMap):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
