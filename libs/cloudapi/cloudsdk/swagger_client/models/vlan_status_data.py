# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VLANStatusData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip_base': 'str',
        'subnet_mask': 'str',
        'gateway': 'str',
        'dhcp_server': 'str',
        'dns_server1': 'str',
        'dns_server2': 'str',
        'dns_server3': 'str'
    }

    attribute_map = {
        'ip_base': 'ipBase',
        'subnet_mask': 'subnetMask',
        'gateway': 'gateway',
        'dhcp_server': 'dhcpServer',
        'dns_server1': 'dnsServer1',
        'dns_server2': 'dnsServer2',
        'dns_server3': 'dnsServer3'
    }

    def __init__(self, ip_base=None, subnet_mask=None, gateway=None, dhcp_server=None, dns_server1=None, dns_server2=None, dns_server3=None):  # noqa: E501
        """VLANStatusData - a model defined in Swagger"""  # noqa: E501
        self._ip_base = None
        self._subnet_mask = None
        self._gateway = None
        self._dhcp_server = None
        self._dns_server1 = None
        self._dns_server2 = None
        self._dns_server3 = None
        self.discriminator = None
        if ip_base is not None:
            self.ip_base = ip_base
        if subnet_mask is not None:
            self.subnet_mask = subnet_mask
        if gateway is not None:
            self.gateway = gateway
        if dhcp_server is not None:
            self.dhcp_server = dhcp_server
        if dns_server1 is not None:
            self.dns_server1 = dns_server1
        if dns_server2 is not None:
            self.dns_server2 = dns_server2
        if dns_server3 is not None:
            self.dns_server3 = dns_server3

    @property
    def ip_base(self):
        """Gets the ip_base of this VLANStatusData.  # noqa: E501


        :return: The ip_base of this VLANStatusData.  # noqa: E501
        :rtype: str
        """
        return self._ip_base

    @ip_base.setter
    def ip_base(self, ip_base):
        """Sets the ip_base of this VLANStatusData.


        :param ip_base: The ip_base of this VLANStatusData.  # noqa: E501
        :type: str
        """

        self._ip_base = ip_base

    @property
    def subnet_mask(self):
        """Gets the subnet_mask of this VLANStatusData.  # noqa: E501


        :return: The subnet_mask of this VLANStatusData.  # noqa: E501
        :rtype: str
        """
        return self._subnet_mask

    @subnet_mask.setter
    def subnet_mask(self, subnet_mask):
        """Sets the subnet_mask of this VLANStatusData.


        :param subnet_mask: The subnet_mask of this VLANStatusData.  # noqa: E501
        :type: str
        """

        self._subnet_mask = subnet_mask

    @property
    def gateway(self):
        """Gets the gateway of this VLANStatusData.  # noqa: E501


        :return: The gateway of this VLANStatusData.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this VLANStatusData.


        :param gateway: The gateway of this VLANStatusData.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def dhcp_server(self):
        """Gets the dhcp_server of this VLANStatusData.  # noqa: E501


        :return: The dhcp_server of this VLANStatusData.  # noqa: E501
        :rtype: str
        """
        return self._dhcp_server

    @dhcp_server.setter
    def dhcp_server(self, dhcp_server):
        """Sets the dhcp_server of this VLANStatusData.


        :param dhcp_server: The dhcp_server of this VLANStatusData.  # noqa: E501
        :type: str
        """

        self._dhcp_server = dhcp_server

    @property
    def dns_server1(self):
        """Gets the dns_server1 of this VLANStatusData.  # noqa: E501


        :return: The dns_server1 of this VLANStatusData.  # noqa: E501
        :rtype: str
        """
        return self._dns_server1

    @dns_server1.setter
    def dns_server1(self, dns_server1):
        """Sets the dns_server1 of this VLANStatusData.


        :param dns_server1: The dns_server1 of this VLANStatusData.  # noqa: E501
        :type: str
        """

        self._dns_server1 = dns_server1

    @property
    def dns_server2(self):
        """Gets the dns_server2 of this VLANStatusData.  # noqa: E501


        :return: The dns_server2 of this VLANStatusData.  # noqa: E501
        :rtype: str
        """
        return self._dns_server2

    @dns_server2.setter
    def dns_server2(self, dns_server2):
        """Sets the dns_server2 of this VLANStatusData.


        :param dns_server2: The dns_server2 of this VLANStatusData.  # noqa: E501
        :type: str
        """

        self._dns_server2 = dns_server2

    @property
    def dns_server3(self):
        """Gets the dns_server3 of this VLANStatusData.  # noqa: E501


        :return: The dns_server3 of this VLANStatusData.  # noqa: E501
        :rtype: str
        """
        return self._dns_server3

    @dns_server3.setter
    def dns_server3(self, dns_server3):
        """Sets the dns_server3 of this VLANStatusData.


        :param dns_server3: The dns_server3 of this VLANStatusData.  # noqa: E501
        :type: str
        """

        self._dns_server3 = dns_server3

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VLANStatusData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VLANStatusData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
