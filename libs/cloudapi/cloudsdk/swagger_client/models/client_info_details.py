# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClientInfoDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alias': 'str',
        'client_type': 'int',
        'ap_fingerprint': 'str',
        'user_name': 'str',
        'host_name': 'str',
        'last_used_cp_username': 'str',
        'last_user_agent': 'str',
        'do_not_steer': 'bool',
        'blocklist_details': 'BlocklistDetails'
    }

    attribute_map = {
        'alias': 'alias',
        'client_type': 'clientType',
        'ap_fingerprint': 'apFingerprint',
        'user_name': 'userName',
        'host_name': 'hostName',
        'last_used_cp_username': 'lastUsedCpUsername',
        'last_user_agent': 'lastUserAgent',
        'do_not_steer': 'doNotSteer',
        'blocklist_details': 'blocklistDetails'
    }

    def __init__(self, alias=None, client_type=None, ap_fingerprint=None, user_name=None, host_name=None, last_used_cp_username=None, last_user_agent=None, do_not_steer=None, blocklist_details=None):  # noqa: E501
        """ClientInfoDetails - a model defined in Swagger"""  # noqa: E501
        self._alias = None
        self._client_type = None
        self._ap_fingerprint = None
        self._user_name = None
        self._host_name = None
        self._last_used_cp_username = None
        self._last_user_agent = None
        self._do_not_steer = None
        self._blocklist_details = None
        self.discriminator = None
        if alias is not None:
            self.alias = alias
        if client_type is not None:
            self.client_type = client_type
        if ap_fingerprint is not None:
            self.ap_fingerprint = ap_fingerprint
        if user_name is not None:
            self.user_name = user_name
        if host_name is not None:
            self.host_name = host_name
        if last_used_cp_username is not None:
            self.last_used_cp_username = last_used_cp_username
        if last_user_agent is not None:
            self.last_user_agent = last_user_agent
        if do_not_steer is not None:
            self.do_not_steer = do_not_steer
        if blocklist_details is not None:
            self.blocklist_details = blocklist_details

    @property
    def alias(self):
        """Gets the alias of this ClientInfoDetails.  # noqa: E501


        :return: The alias of this ClientInfoDetails.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this ClientInfoDetails.


        :param alias: The alias of this ClientInfoDetails.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def client_type(self):
        """Gets the client_type of this ClientInfoDetails.  # noqa: E501


        :return: The client_type of this ClientInfoDetails.  # noqa: E501
        :rtype: int
        """
        return self._client_type

    @client_type.setter
    def client_type(self, client_type):
        """Sets the client_type of this ClientInfoDetails.


        :param client_type: The client_type of this ClientInfoDetails.  # noqa: E501
        :type: int
        """

        self._client_type = client_type

    @property
    def ap_fingerprint(self):
        """Gets the ap_fingerprint of this ClientInfoDetails.  # noqa: E501


        :return: The ap_fingerprint of this ClientInfoDetails.  # noqa: E501
        :rtype: str
        """
        return self._ap_fingerprint

    @ap_fingerprint.setter
    def ap_fingerprint(self, ap_fingerprint):
        """Sets the ap_fingerprint of this ClientInfoDetails.


        :param ap_fingerprint: The ap_fingerprint of this ClientInfoDetails.  # noqa: E501
        :type: str
        """

        self._ap_fingerprint = ap_fingerprint

    @property
    def user_name(self):
        """Gets the user_name of this ClientInfoDetails.  # noqa: E501


        :return: The user_name of this ClientInfoDetails.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ClientInfoDetails.


        :param user_name: The user_name of this ClientInfoDetails.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def host_name(self):
        """Gets the host_name of this ClientInfoDetails.  # noqa: E501


        :return: The host_name of this ClientInfoDetails.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this ClientInfoDetails.


        :param host_name: The host_name of this ClientInfoDetails.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def last_used_cp_username(self):
        """Gets the last_used_cp_username of this ClientInfoDetails.  # noqa: E501


        :return: The last_used_cp_username of this ClientInfoDetails.  # noqa: E501
        :rtype: str
        """
        return self._last_used_cp_username

    @last_used_cp_username.setter
    def last_used_cp_username(self, last_used_cp_username):
        """Sets the last_used_cp_username of this ClientInfoDetails.


        :param last_used_cp_username: The last_used_cp_username of this ClientInfoDetails.  # noqa: E501
        :type: str
        """

        self._last_used_cp_username = last_used_cp_username

    @property
    def last_user_agent(self):
        """Gets the last_user_agent of this ClientInfoDetails.  # noqa: E501


        :return: The last_user_agent of this ClientInfoDetails.  # noqa: E501
        :rtype: str
        """
        return self._last_user_agent

    @last_user_agent.setter
    def last_user_agent(self, last_user_agent):
        """Sets the last_user_agent of this ClientInfoDetails.


        :param last_user_agent: The last_user_agent of this ClientInfoDetails.  # noqa: E501
        :type: str
        """

        self._last_user_agent = last_user_agent

    @property
    def do_not_steer(self):
        """Gets the do_not_steer of this ClientInfoDetails.  # noqa: E501


        :return: The do_not_steer of this ClientInfoDetails.  # noqa: E501
        :rtype: bool
        """
        return self._do_not_steer

    @do_not_steer.setter
    def do_not_steer(self, do_not_steer):
        """Sets the do_not_steer of this ClientInfoDetails.


        :param do_not_steer: The do_not_steer of this ClientInfoDetails.  # noqa: E501
        :type: bool
        """

        self._do_not_steer = do_not_steer

    @property
    def blocklist_details(self):
        """Gets the blocklist_details of this ClientInfoDetails.  # noqa: E501


        :return: The blocklist_details of this ClientInfoDetails.  # noqa: E501
        :rtype: BlocklistDetails
        """
        return self._blocklist_details

    @blocklist_details.setter
    def blocklist_details(self, blocklist_details):
        """Sets the blocklist_details of this ClientInfoDetails.


        :param blocklist_details: The blocklist_details of this ClientInfoDetails.  # noqa: E501
        :type: BlocklistDetails
        """

        self._blocklist_details = blocklist_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientInfoDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientInfoDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
