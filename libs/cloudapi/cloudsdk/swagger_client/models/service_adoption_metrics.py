# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceAdoptionMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'year': 'int',
        'month': 'int',
        'week_of_year': 'int',
        'day_of_year': 'int',
        'customer_id': 'int',
        'location_id': 'int',
        'equipment_id': 'int',
        'num_unique_connected_macs': 'int',
        'num_bytes_upstream': 'int',
        'num_bytes_downstream': 'int'
    }

    attribute_map = {
        'year': 'year',
        'month': 'month',
        'week_of_year': 'weekOfYear',
        'day_of_year': 'dayOfYear',
        'customer_id': 'customerId',
        'location_id': 'locationId',
        'equipment_id': 'equipmentId',
        'num_unique_connected_macs': 'numUniqueConnectedMacs',
        'num_bytes_upstream': 'numBytesUpstream',
        'num_bytes_downstream': 'numBytesDownstream'
    }

    def __init__(self, year=None, month=None, week_of_year=None, day_of_year=None, customer_id=None, location_id=None, equipment_id=None, num_unique_connected_macs=None, num_bytes_upstream=None, num_bytes_downstream=None):  # noqa: E501
        """ServiceAdoptionMetrics - a model defined in Swagger"""  # noqa: E501
        self._year = None
        self._month = None
        self._week_of_year = None
        self._day_of_year = None
        self._customer_id = None
        self._location_id = None
        self._equipment_id = None
        self._num_unique_connected_macs = None
        self._num_bytes_upstream = None
        self._num_bytes_downstream = None
        self.discriminator = None
        if year is not None:
            self.year = year
        if month is not None:
            self.month = month
        if week_of_year is not None:
            self.week_of_year = week_of_year
        if day_of_year is not None:
            self.day_of_year = day_of_year
        if customer_id is not None:
            self.customer_id = customer_id
        if location_id is not None:
            self.location_id = location_id
        if equipment_id is not None:
            self.equipment_id = equipment_id
        if num_unique_connected_macs is not None:
            self.num_unique_connected_macs = num_unique_connected_macs
        if num_bytes_upstream is not None:
            self.num_bytes_upstream = num_bytes_upstream
        if num_bytes_downstream is not None:
            self.num_bytes_downstream = num_bytes_downstream

    @property
    def year(self):
        """Gets the year of this ServiceAdoptionMetrics.  # noqa: E501


        :return: The year of this ServiceAdoptionMetrics.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this ServiceAdoptionMetrics.


        :param year: The year of this ServiceAdoptionMetrics.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def month(self):
        """Gets the month of this ServiceAdoptionMetrics.  # noqa: E501


        :return: The month of this ServiceAdoptionMetrics.  # noqa: E501
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this ServiceAdoptionMetrics.


        :param month: The month of this ServiceAdoptionMetrics.  # noqa: E501
        :type: int
        """

        self._month = month

    @property
    def week_of_year(self):
        """Gets the week_of_year of this ServiceAdoptionMetrics.  # noqa: E501


        :return: The week_of_year of this ServiceAdoptionMetrics.  # noqa: E501
        :rtype: int
        """
        return self._week_of_year

    @week_of_year.setter
    def week_of_year(self, week_of_year):
        """Sets the week_of_year of this ServiceAdoptionMetrics.


        :param week_of_year: The week_of_year of this ServiceAdoptionMetrics.  # noqa: E501
        :type: int
        """

        self._week_of_year = week_of_year

    @property
    def day_of_year(self):
        """Gets the day_of_year of this ServiceAdoptionMetrics.  # noqa: E501


        :return: The day_of_year of this ServiceAdoptionMetrics.  # noqa: E501
        :rtype: int
        """
        return self._day_of_year

    @day_of_year.setter
    def day_of_year(self, day_of_year):
        """Sets the day_of_year of this ServiceAdoptionMetrics.


        :param day_of_year: The day_of_year of this ServiceAdoptionMetrics.  # noqa: E501
        :type: int
        """

        self._day_of_year = day_of_year

    @property
    def customer_id(self):
        """Gets the customer_id of this ServiceAdoptionMetrics.  # noqa: E501


        :return: The customer_id of this ServiceAdoptionMetrics.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this ServiceAdoptionMetrics.


        :param customer_id: The customer_id of this ServiceAdoptionMetrics.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def location_id(self):
        """Gets the location_id of this ServiceAdoptionMetrics.  # noqa: E501


        :return: The location_id of this ServiceAdoptionMetrics.  # noqa: E501
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this ServiceAdoptionMetrics.


        :param location_id: The location_id of this ServiceAdoptionMetrics.  # noqa: E501
        :type: int
        """

        self._location_id = location_id

    @property
    def equipment_id(self):
        """Gets the equipment_id of this ServiceAdoptionMetrics.  # noqa: E501


        :return: The equipment_id of this ServiceAdoptionMetrics.  # noqa: E501
        :rtype: int
        """
        return self._equipment_id

    @equipment_id.setter
    def equipment_id(self, equipment_id):
        """Sets the equipment_id of this ServiceAdoptionMetrics.


        :param equipment_id: The equipment_id of this ServiceAdoptionMetrics.  # noqa: E501
        :type: int
        """

        self._equipment_id = equipment_id

    @property
    def num_unique_connected_macs(self):
        """Gets the num_unique_connected_macs of this ServiceAdoptionMetrics.  # noqa: E501

        number of unique connected MAC addresses for the data point. Note - this number is accurate only at the lowest level of granularity - per AP per day. In case of aggregations - per location/customer or per week/month - this number is just a sum of corresponding datapoints, and it does not account for non-unique MACs in those cases.  # noqa: E501

        :return: The num_unique_connected_macs of this ServiceAdoptionMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_unique_connected_macs

    @num_unique_connected_macs.setter
    def num_unique_connected_macs(self, num_unique_connected_macs):
        """Sets the num_unique_connected_macs of this ServiceAdoptionMetrics.

        number of unique connected MAC addresses for the data point. Note - this number is accurate only at the lowest level of granularity - per AP per day. In case of aggregations - per location/customer or per week/month - this number is just a sum of corresponding datapoints, and it does not account for non-unique MACs in those cases.  # noqa: E501

        :param num_unique_connected_macs: The num_unique_connected_macs of this ServiceAdoptionMetrics.  # noqa: E501
        :type: int
        """

        self._num_unique_connected_macs = num_unique_connected_macs

    @property
    def num_bytes_upstream(self):
        """Gets the num_bytes_upstream of this ServiceAdoptionMetrics.  # noqa: E501


        :return: The num_bytes_upstream of this ServiceAdoptionMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_bytes_upstream

    @num_bytes_upstream.setter
    def num_bytes_upstream(self, num_bytes_upstream):
        """Sets the num_bytes_upstream of this ServiceAdoptionMetrics.


        :param num_bytes_upstream: The num_bytes_upstream of this ServiceAdoptionMetrics.  # noqa: E501
        :type: int
        """

        self._num_bytes_upstream = num_bytes_upstream

    @property
    def num_bytes_downstream(self):
        """Gets the num_bytes_downstream of this ServiceAdoptionMetrics.  # noqa: E501


        :return: The num_bytes_downstream of this ServiceAdoptionMetrics.  # noqa: E501
        :rtype: int
        """
        return self._num_bytes_downstream

    @num_bytes_downstream.setter
    def num_bytes_downstream(self, num_bytes_downstream):
        """Sets the num_bytes_downstream of this ServiceAdoptionMetrics.


        :param num_bytes_downstream: The num_bytes_downstream of this ServiceAdoptionMetrics.  # noqa: E501
        :type: int
        """

        self._num_bytes_downstream = num_bytes_downstream

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceAdoptionMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceAdoptionMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
