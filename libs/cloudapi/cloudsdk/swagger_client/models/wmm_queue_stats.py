# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WmmQueueStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'queue_type': 'WmmQueueType',
        'tx_frames': 'int',
        'tx_bytes': 'int',
        'tx_failed_frames': 'int',
        'tx_failed_bytes': 'int',
        'rx_frames': 'int',
        'rx_bytes': 'int',
        'rx_failed_frames': 'int',
        'rx_failed_bytes': 'int',
        'forward_frames': 'int',
        'forward_bytes': 'int',
        'tx_expired_frames': 'int',
        'tx_expired_bytes': 'int'
    }

    attribute_map = {
        'queue_type': 'queueType',
        'tx_frames': 'txFrames',
        'tx_bytes': 'txBytes',
        'tx_failed_frames': 'txFailedFrames',
        'tx_failed_bytes': 'txFailedBytes',
        'rx_frames': 'rxFrames',
        'rx_bytes': 'rxBytes',
        'rx_failed_frames': 'rxFailedFrames',
        'rx_failed_bytes': 'rxFailedBytes',
        'forward_frames': 'forwardFrames',
        'forward_bytes': 'forwardBytes',
        'tx_expired_frames': 'txExpiredFrames',
        'tx_expired_bytes': 'txExpiredBytes'
    }

    def __init__(self, queue_type=None, tx_frames=None, tx_bytes=None, tx_failed_frames=None, tx_failed_bytes=None, rx_frames=None, rx_bytes=None, rx_failed_frames=None, rx_failed_bytes=None, forward_frames=None, forward_bytes=None, tx_expired_frames=None, tx_expired_bytes=None):  # noqa: E501
        """WmmQueueStats - a model defined in Swagger"""  # noqa: E501
        self._queue_type = None
        self._tx_frames = None
        self._tx_bytes = None
        self._tx_failed_frames = None
        self._tx_failed_bytes = None
        self._rx_frames = None
        self._rx_bytes = None
        self._rx_failed_frames = None
        self._rx_failed_bytes = None
        self._forward_frames = None
        self._forward_bytes = None
        self._tx_expired_frames = None
        self._tx_expired_bytes = None
        self.discriminator = None
        if queue_type is not None:
            self.queue_type = queue_type
        if tx_frames is not None:
            self.tx_frames = tx_frames
        if tx_bytes is not None:
            self.tx_bytes = tx_bytes
        if tx_failed_frames is not None:
            self.tx_failed_frames = tx_failed_frames
        if tx_failed_bytes is not None:
            self.tx_failed_bytes = tx_failed_bytes
        if rx_frames is not None:
            self.rx_frames = rx_frames
        if rx_bytes is not None:
            self.rx_bytes = rx_bytes
        if rx_failed_frames is not None:
            self.rx_failed_frames = rx_failed_frames
        if rx_failed_bytes is not None:
            self.rx_failed_bytes = rx_failed_bytes
        if forward_frames is not None:
            self.forward_frames = forward_frames
        if forward_bytes is not None:
            self.forward_bytes = forward_bytes
        if tx_expired_frames is not None:
            self.tx_expired_frames = tx_expired_frames
        if tx_expired_bytes is not None:
            self.tx_expired_bytes = tx_expired_bytes

    @property
    def queue_type(self):
        """Gets the queue_type of this WmmQueueStats.  # noqa: E501


        :return: The queue_type of this WmmQueueStats.  # noqa: E501
        :rtype: WmmQueueType
        """
        return self._queue_type

    @queue_type.setter
    def queue_type(self, queue_type):
        """Sets the queue_type of this WmmQueueStats.


        :param queue_type: The queue_type of this WmmQueueStats.  # noqa: E501
        :type: WmmQueueType
        """

        self._queue_type = queue_type

    @property
    def tx_frames(self):
        """Gets the tx_frames of this WmmQueueStats.  # noqa: E501


        :return: The tx_frames of this WmmQueueStats.  # noqa: E501
        :rtype: int
        """
        return self._tx_frames

    @tx_frames.setter
    def tx_frames(self, tx_frames):
        """Sets the tx_frames of this WmmQueueStats.


        :param tx_frames: The tx_frames of this WmmQueueStats.  # noqa: E501
        :type: int
        """

        self._tx_frames = tx_frames

    @property
    def tx_bytes(self):
        """Gets the tx_bytes of this WmmQueueStats.  # noqa: E501


        :return: The tx_bytes of this WmmQueueStats.  # noqa: E501
        :rtype: int
        """
        return self._tx_bytes

    @tx_bytes.setter
    def tx_bytes(self, tx_bytes):
        """Sets the tx_bytes of this WmmQueueStats.


        :param tx_bytes: The tx_bytes of this WmmQueueStats.  # noqa: E501
        :type: int
        """

        self._tx_bytes = tx_bytes

    @property
    def tx_failed_frames(self):
        """Gets the tx_failed_frames of this WmmQueueStats.  # noqa: E501


        :return: The tx_failed_frames of this WmmQueueStats.  # noqa: E501
        :rtype: int
        """
        return self._tx_failed_frames

    @tx_failed_frames.setter
    def tx_failed_frames(self, tx_failed_frames):
        """Sets the tx_failed_frames of this WmmQueueStats.


        :param tx_failed_frames: The tx_failed_frames of this WmmQueueStats.  # noqa: E501
        :type: int
        """

        self._tx_failed_frames = tx_failed_frames

    @property
    def tx_failed_bytes(self):
        """Gets the tx_failed_bytes of this WmmQueueStats.  # noqa: E501


        :return: The tx_failed_bytes of this WmmQueueStats.  # noqa: E501
        :rtype: int
        """
        return self._tx_failed_bytes

    @tx_failed_bytes.setter
    def tx_failed_bytes(self, tx_failed_bytes):
        """Sets the tx_failed_bytes of this WmmQueueStats.


        :param tx_failed_bytes: The tx_failed_bytes of this WmmQueueStats.  # noqa: E501
        :type: int
        """

        self._tx_failed_bytes = tx_failed_bytes

    @property
    def rx_frames(self):
        """Gets the rx_frames of this WmmQueueStats.  # noqa: E501


        :return: The rx_frames of this WmmQueueStats.  # noqa: E501
        :rtype: int
        """
        return self._rx_frames

    @rx_frames.setter
    def rx_frames(self, rx_frames):
        """Sets the rx_frames of this WmmQueueStats.


        :param rx_frames: The rx_frames of this WmmQueueStats.  # noqa: E501
        :type: int
        """

        self._rx_frames = rx_frames

    @property
    def rx_bytes(self):
        """Gets the rx_bytes of this WmmQueueStats.  # noqa: E501


        :return: The rx_bytes of this WmmQueueStats.  # noqa: E501
        :rtype: int
        """
        return self._rx_bytes

    @rx_bytes.setter
    def rx_bytes(self, rx_bytes):
        """Sets the rx_bytes of this WmmQueueStats.


        :param rx_bytes: The rx_bytes of this WmmQueueStats.  # noqa: E501
        :type: int
        """

        self._rx_bytes = rx_bytes

    @property
    def rx_failed_frames(self):
        """Gets the rx_failed_frames of this WmmQueueStats.  # noqa: E501


        :return: The rx_failed_frames of this WmmQueueStats.  # noqa: E501
        :rtype: int
        """
        return self._rx_failed_frames

    @rx_failed_frames.setter
    def rx_failed_frames(self, rx_failed_frames):
        """Sets the rx_failed_frames of this WmmQueueStats.


        :param rx_failed_frames: The rx_failed_frames of this WmmQueueStats.  # noqa: E501
        :type: int
        """

        self._rx_failed_frames = rx_failed_frames

    @property
    def rx_failed_bytes(self):
        """Gets the rx_failed_bytes of this WmmQueueStats.  # noqa: E501


        :return: The rx_failed_bytes of this WmmQueueStats.  # noqa: E501
        :rtype: int
        """
        return self._rx_failed_bytes

    @rx_failed_bytes.setter
    def rx_failed_bytes(self, rx_failed_bytes):
        """Sets the rx_failed_bytes of this WmmQueueStats.


        :param rx_failed_bytes: The rx_failed_bytes of this WmmQueueStats.  # noqa: E501
        :type: int
        """

        self._rx_failed_bytes = rx_failed_bytes

    @property
    def forward_frames(self):
        """Gets the forward_frames of this WmmQueueStats.  # noqa: E501


        :return: The forward_frames of this WmmQueueStats.  # noqa: E501
        :rtype: int
        """
        return self._forward_frames

    @forward_frames.setter
    def forward_frames(self, forward_frames):
        """Sets the forward_frames of this WmmQueueStats.


        :param forward_frames: The forward_frames of this WmmQueueStats.  # noqa: E501
        :type: int
        """

        self._forward_frames = forward_frames

    @property
    def forward_bytes(self):
        """Gets the forward_bytes of this WmmQueueStats.  # noqa: E501


        :return: The forward_bytes of this WmmQueueStats.  # noqa: E501
        :rtype: int
        """
        return self._forward_bytes

    @forward_bytes.setter
    def forward_bytes(self, forward_bytes):
        """Sets the forward_bytes of this WmmQueueStats.


        :param forward_bytes: The forward_bytes of this WmmQueueStats.  # noqa: E501
        :type: int
        """

        self._forward_bytes = forward_bytes

    @property
    def tx_expired_frames(self):
        """Gets the tx_expired_frames of this WmmQueueStats.  # noqa: E501


        :return: The tx_expired_frames of this WmmQueueStats.  # noqa: E501
        :rtype: int
        """
        return self._tx_expired_frames

    @tx_expired_frames.setter
    def tx_expired_frames(self, tx_expired_frames):
        """Sets the tx_expired_frames of this WmmQueueStats.


        :param tx_expired_frames: The tx_expired_frames of this WmmQueueStats.  # noqa: E501
        :type: int
        """

        self._tx_expired_frames = tx_expired_frames

    @property
    def tx_expired_bytes(self):
        """Gets the tx_expired_bytes of this WmmQueueStats.  # noqa: E501


        :return: The tx_expired_bytes of this WmmQueueStats.  # noqa: E501
        :rtype: int
        """
        return self._tx_expired_bytes

    @tx_expired_bytes.setter
    def tx_expired_bytes(self, tx_expired_bytes):
        """Sets the tx_expired_bytes of this WmmQueueStats.


        :param tx_expired_bytes: The tx_expired_bytes of this WmmQueueStats.  # noqa: E501
        :type: int
        """

        self._tx_expired_bytes = tx_expired_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WmmQueueStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WmmQueueStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
