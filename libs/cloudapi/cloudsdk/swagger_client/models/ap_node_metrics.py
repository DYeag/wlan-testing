# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApNodeMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_type': 'str',
        'period_length_sec': 'int',
        'client_mac_addresses_per_radio': 'ListOfMacsPerRadioMap',
        'tx_bytes_per_radio': 'LongPerRadioTypeMap',
        'rx_bytes_per_radio': 'LongPerRadioTypeMap',
        'noise_floor_per_radio': 'IntegerPerRadioTypeMap',
        'tunnel_metrics': 'list[TunnelMetricData]',
        'network_probe_metrics': 'list[NetworkProbeMetrics]',
        'radius_metrics': 'list[RadiusMetrics]',
        'cloud_link_availability': 'int',
        'cloud_link_latency_in_ms': 'int',
        'channel_utilization_per_radio': 'IntegerPerRadioTypeMap',
        'ap_performance': 'ApPerformance',
        'vlan_subnet': 'list[VlanSubnet]',
        'radio_utilization_per_radio': 'ListOfRadioUtilizationPerRadioMap',
        'radio_stats_per_radio': 'RadioStatisticsPerRadioMap',
        'mcs_stats_per_radio': 'ListOfMcsStatsPerRadioMap',
        'wmm_queues_per_radio': 'MapOfWmmQueueStatsPerRadioMap'
    }

    attribute_map = {
        'model_type': 'model_type',
        'period_length_sec': 'periodLengthSec',
        'client_mac_addresses_per_radio': 'clientMacAddressesPerRadio',
        'tx_bytes_per_radio': 'txBytesPerRadio',
        'rx_bytes_per_radio': 'rxBytesPerRadio',
        'noise_floor_per_radio': 'noiseFloorPerRadio',
        'tunnel_metrics': 'tunnelMetrics',
        'network_probe_metrics': 'networkProbeMetrics',
        'radius_metrics': 'radiusMetrics',
        'cloud_link_availability': 'cloudLinkAvailability',
        'cloud_link_latency_in_ms': 'cloudLinkLatencyInMs',
        'channel_utilization_per_radio': 'channelUtilizationPerRadio',
        'ap_performance': 'apPerformance',
        'vlan_subnet': 'vlanSubnet',
        'radio_utilization_per_radio': 'radioUtilizationPerRadio',
        'radio_stats_per_radio': 'radioStatsPerRadio',
        'mcs_stats_per_radio': 'mcsStatsPerRadio',
        'wmm_queues_per_radio': 'wmmQueuesPerRadio'
    }

    def __init__(self, model_type=None, period_length_sec=None, client_mac_addresses_per_radio=None, tx_bytes_per_radio=None, rx_bytes_per_radio=None, noise_floor_per_radio=None, tunnel_metrics=None, network_probe_metrics=None, radius_metrics=None, cloud_link_availability=None, cloud_link_latency_in_ms=None, channel_utilization_per_radio=None, ap_performance=None, vlan_subnet=None, radio_utilization_per_radio=None, radio_stats_per_radio=None, mcs_stats_per_radio=None, wmm_queues_per_radio=None):  # noqa: E501
        """ApNodeMetrics - a model defined in Swagger"""  # noqa: E501
        self._model_type = None
        self._period_length_sec = None
        self._client_mac_addresses_per_radio = None
        self._tx_bytes_per_radio = None
        self._rx_bytes_per_radio = None
        self._noise_floor_per_radio = None
        self._tunnel_metrics = None
        self._network_probe_metrics = None
        self._radius_metrics = None
        self._cloud_link_availability = None
        self._cloud_link_latency_in_ms = None
        self._channel_utilization_per_radio = None
        self._ap_performance = None
        self._vlan_subnet = None
        self._radio_utilization_per_radio = None
        self._radio_stats_per_radio = None
        self._mcs_stats_per_radio = None
        self._wmm_queues_per_radio = None
        self.discriminator = None
        self.model_type = model_type
        if period_length_sec is not None:
            self.period_length_sec = period_length_sec
        if client_mac_addresses_per_radio is not None:
            self.client_mac_addresses_per_radio = client_mac_addresses_per_radio
        if tx_bytes_per_radio is not None:
            self.tx_bytes_per_radio = tx_bytes_per_radio
        if rx_bytes_per_radio is not None:
            self.rx_bytes_per_radio = rx_bytes_per_radio
        if noise_floor_per_radio is not None:
            self.noise_floor_per_radio = noise_floor_per_radio
        if tunnel_metrics is not None:
            self.tunnel_metrics = tunnel_metrics
        if network_probe_metrics is not None:
            self.network_probe_metrics = network_probe_metrics
        if radius_metrics is not None:
            self.radius_metrics = radius_metrics
        if cloud_link_availability is not None:
            self.cloud_link_availability = cloud_link_availability
        if cloud_link_latency_in_ms is not None:
            self.cloud_link_latency_in_ms = cloud_link_latency_in_ms
        if channel_utilization_per_radio is not None:
            self.channel_utilization_per_radio = channel_utilization_per_radio
        if ap_performance is not None:
            self.ap_performance = ap_performance
        if vlan_subnet is not None:
            self.vlan_subnet = vlan_subnet
        if radio_utilization_per_radio is not None:
            self.radio_utilization_per_radio = radio_utilization_per_radio
        if radio_stats_per_radio is not None:
            self.radio_stats_per_radio = radio_stats_per_radio
        if mcs_stats_per_radio is not None:
            self.mcs_stats_per_radio = mcs_stats_per_radio
        if wmm_queues_per_radio is not None:
            self.wmm_queues_per_radio = wmm_queues_per_radio

    @property
    def model_type(self):
        """Gets the model_type of this ApNodeMetrics.  # noqa: E501


        :return: The model_type of this ApNodeMetrics.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this ApNodeMetrics.


        :param model_type: The model_type of this ApNodeMetrics.  # noqa: E501
        :type: str
        """
        if model_type is None:
            raise ValueError("Invalid value for `model_type`, must not be `None`")  # noqa: E501

        self._model_type = model_type

    @property
    def period_length_sec(self):
        """Gets the period_length_sec of this ApNodeMetrics.  # noqa: E501

        How many seconds the AP measured for the metric  # noqa: E501

        :return: The period_length_sec of this ApNodeMetrics.  # noqa: E501
        :rtype: int
        """
        return self._period_length_sec

    @period_length_sec.setter
    def period_length_sec(self, period_length_sec):
        """Sets the period_length_sec of this ApNodeMetrics.

        How many seconds the AP measured for the metric  # noqa: E501

        :param period_length_sec: The period_length_sec of this ApNodeMetrics.  # noqa: E501
        :type: int
        """

        self._period_length_sec = period_length_sec

    @property
    def client_mac_addresses_per_radio(self):
        """Gets the client_mac_addresses_per_radio of this ApNodeMetrics.  # noqa: E501


        :return: The client_mac_addresses_per_radio of this ApNodeMetrics.  # noqa: E501
        :rtype: ListOfMacsPerRadioMap
        """
        return self._client_mac_addresses_per_radio

    @client_mac_addresses_per_radio.setter
    def client_mac_addresses_per_radio(self, client_mac_addresses_per_radio):
        """Sets the client_mac_addresses_per_radio of this ApNodeMetrics.


        :param client_mac_addresses_per_radio: The client_mac_addresses_per_radio of this ApNodeMetrics.  # noqa: E501
        :type: ListOfMacsPerRadioMap
        """

        self._client_mac_addresses_per_radio = client_mac_addresses_per_radio

    @property
    def tx_bytes_per_radio(self):
        """Gets the tx_bytes_per_radio of this ApNodeMetrics.  # noqa: E501


        :return: The tx_bytes_per_radio of this ApNodeMetrics.  # noqa: E501
        :rtype: LongPerRadioTypeMap
        """
        return self._tx_bytes_per_radio

    @tx_bytes_per_radio.setter
    def tx_bytes_per_radio(self, tx_bytes_per_radio):
        """Sets the tx_bytes_per_radio of this ApNodeMetrics.


        :param tx_bytes_per_radio: The tx_bytes_per_radio of this ApNodeMetrics.  # noqa: E501
        :type: LongPerRadioTypeMap
        """

        self._tx_bytes_per_radio = tx_bytes_per_radio

    @property
    def rx_bytes_per_radio(self):
        """Gets the rx_bytes_per_radio of this ApNodeMetrics.  # noqa: E501


        :return: The rx_bytes_per_radio of this ApNodeMetrics.  # noqa: E501
        :rtype: LongPerRadioTypeMap
        """
        return self._rx_bytes_per_radio

    @rx_bytes_per_radio.setter
    def rx_bytes_per_radio(self, rx_bytes_per_radio):
        """Sets the rx_bytes_per_radio of this ApNodeMetrics.


        :param rx_bytes_per_radio: The rx_bytes_per_radio of this ApNodeMetrics.  # noqa: E501
        :type: LongPerRadioTypeMap
        """

        self._rx_bytes_per_radio = rx_bytes_per_radio

    @property
    def noise_floor_per_radio(self):
        """Gets the noise_floor_per_radio of this ApNodeMetrics.  # noqa: E501


        :return: The noise_floor_per_radio of this ApNodeMetrics.  # noqa: E501
        :rtype: IntegerPerRadioTypeMap
        """
        return self._noise_floor_per_radio

    @noise_floor_per_radio.setter
    def noise_floor_per_radio(self, noise_floor_per_radio):
        """Sets the noise_floor_per_radio of this ApNodeMetrics.


        :param noise_floor_per_radio: The noise_floor_per_radio of this ApNodeMetrics.  # noqa: E501
        :type: IntegerPerRadioTypeMap
        """

        self._noise_floor_per_radio = noise_floor_per_radio

    @property
    def tunnel_metrics(self):
        """Gets the tunnel_metrics of this ApNodeMetrics.  # noqa: E501


        :return: The tunnel_metrics of this ApNodeMetrics.  # noqa: E501
        :rtype: list[TunnelMetricData]
        """
        return self._tunnel_metrics

    @tunnel_metrics.setter
    def tunnel_metrics(self, tunnel_metrics):
        """Sets the tunnel_metrics of this ApNodeMetrics.


        :param tunnel_metrics: The tunnel_metrics of this ApNodeMetrics.  # noqa: E501
        :type: list[TunnelMetricData]
        """

        self._tunnel_metrics = tunnel_metrics

    @property
    def network_probe_metrics(self):
        """Gets the network_probe_metrics of this ApNodeMetrics.  # noqa: E501


        :return: The network_probe_metrics of this ApNodeMetrics.  # noqa: E501
        :rtype: list[NetworkProbeMetrics]
        """
        return self._network_probe_metrics

    @network_probe_metrics.setter
    def network_probe_metrics(self, network_probe_metrics):
        """Sets the network_probe_metrics of this ApNodeMetrics.


        :param network_probe_metrics: The network_probe_metrics of this ApNodeMetrics.  # noqa: E501
        :type: list[NetworkProbeMetrics]
        """

        self._network_probe_metrics = network_probe_metrics

    @property
    def radius_metrics(self):
        """Gets the radius_metrics of this ApNodeMetrics.  # noqa: E501


        :return: The radius_metrics of this ApNodeMetrics.  # noqa: E501
        :rtype: list[RadiusMetrics]
        """
        return self._radius_metrics

    @radius_metrics.setter
    def radius_metrics(self, radius_metrics):
        """Sets the radius_metrics of this ApNodeMetrics.


        :param radius_metrics: The radius_metrics of this ApNodeMetrics.  # noqa: E501
        :type: list[RadiusMetrics]
        """

        self._radius_metrics = radius_metrics

    @property
    def cloud_link_availability(self):
        """Gets the cloud_link_availability of this ApNodeMetrics.  # noqa: E501


        :return: The cloud_link_availability of this ApNodeMetrics.  # noqa: E501
        :rtype: int
        """
        return self._cloud_link_availability

    @cloud_link_availability.setter
    def cloud_link_availability(self, cloud_link_availability):
        """Sets the cloud_link_availability of this ApNodeMetrics.


        :param cloud_link_availability: The cloud_link_availability of this ApNodeMetrics.  # noqa: E501
        :type: int
        """

        self._cloud_link_availability = cloud_link_availability

    @property
    def cloud_link_latency_in_ms(self):
        """Gets the cloud_link_latency_in_ms of this ApNodeMetrics.  # noqa: E501


        :return: The cloud_link_latency_in_ms of this ApNodeMetrics.  # noqa: E501
        :rtype: int
        """
        return self._cloud_link_latency_in_ms

    @cloud_link_latency_in_ms.setter
    def cloud_link_latency_in_ms(self, cloud_link_latency_in_ms):
        """Sets the cloud_link_latency_in_ms of this ApNodeMetrics.


        :param cloud_link_latency_in_ms: The cloud_link_latency_in_ms of this ApNodeMetrics.  # noqa: E501
        :type: int
        """

        self._cloud_link_latency_in_ms = cloud_link_latency_in_ms

    @property
    def channel_utilization_per_radio(self):
        """Gets the channel_utilization_per_radio of this ApNodeMetrics.  # noqa: E501


        :return: The channel_utilization_per_radio of this ApNodeMetrics.  # noqa: E501
        :rtype: IntegerPerRadioTypeMap
        """
        return self._channel_utilization_per_radio

    @channel_utilization_per_radio.setter
    def channel_utilization_per_radio(self, channel_utilization_per_radio):
        """Sets the channel_utilization_per_radio of this ApNodeMetrics.


        :param channel_utilization_per_radio: The channel_utilization_per_radio of this ApNodeMetrics.  # noqa: E501
        :type: IntegerPerRadioTypeMap
        """

        self._channel_utilization_per_radio = channel_utilization_per_radio

    @property
    def ap_performance(self):
        """Gets the ap_performance of this ApNodeMetrics.  # noqa: E501


        :return: The ap_performance of this ApNodeMetrics.  # noqa: E501
        :rtype: ApPerformance
        """
        return self._ap_performance

    @ap_performance.setter
    def ap_performance(self, ap_performance):
        """Sets the ap_performance of this ApNodeMetrics.


        :param ap_performance: The ap_performance of this ApNodeMetrics.  # noqa: E501
        :type: ApPerformance
        """

        self._ap_performance = ap_performance

    @property
    def vlan_subnet(self):
        """Gets the vlan_subnet of this ApNodeMetrics.  # noqa: E501


        :return: The vlan_subnet of this ApNodeMetrics.  # noqa: E501
        :rtype: list[VlanSubnet]
        """
        return self._vlan_subnet

    @vlan_subnet.setter
    def vlan_subnet(self, vlan_subnet):
        """Sets the vlan_subnet of this ApNodeMetrics.


        :param vlan_subnet: The vlan_subnet of this ApNodeMetrics.  # noqa: E501
        :type: list[VlanSubnet]
        """

        self._vlan_subnet = vlan_subnet

    @property
    def radio_utilization_per_radio(self):
        """Gets the radio_utilization_per_radio of this ApNodeMetrics.  # noqa: E501


        :return: The radio_utilization_per_radio of this ApNodeMetrics.  # noqa: E501
        :rtype: ListOfRadioUtilizationPerRadioMap
        """
        return self._radio_utilization_per_radio

    @radio_utilization_per_radio.setter
    def radio_utilization_per_radio(self, radio_utilization_per_radio):
        """Sets the radio_utilization_per_radio of this ApNodeMetrics.


        :param radio_utilization_per_radio: The radio_utilization_per_radio of this ApNodeMetrics.  # noqa: E501
        :type: ListOfRadioUtilizationPerRadioMap
        """

        self._radio_utilization_per_radio = radio_utilization_per_radio

    @property
    def radio_stats_per_radio(self):
        """Gets the radio_stats_per_radio of this ApNodeMetrics.  # noqa: E501


        :return: The radio_stats_per_radio of this ApNodeMetrics.  # noqa: E501
        :rtype: RadioStatisticsPerRadioMap
        """
        return self._radio_stats_per_radio

    @radio_stats_per_radio.setter
    def radio_stats_per_radio(self, radio_stats_per_radio):
        """Sets the radio_stats_per_radio of this ApNodeMetrics.


        :param radio_stats_per_radio: The radio_stats_per_radio of this ApNodeMetrics.  # noqa: E501
        :type: RadioStatisticsPerRadioMap
        """

        self._radio_stats_per_radio = radio_stats_per_radio

    @property
    def mcs_stats_per_radio(self):
        """Gets the mcs_stats_per_radio of this ApNodeMetrics.  # noqa: E501


        :return: The mcs_stats_per_radio of this ApNodeMetrics.  # noqa: E501
        :rtype: ListOfMcsStatsPerRadioMap
        """
        return self._mcs_stats_per_radio

    @mcs_stats_per_radio.setter
    def mcs_stats_per_radio(self, mcs_stats_per_radio):
        """Sets the mcs_stats_per_radio of this ApNodeMetrics.


        :param mcs_stats_per_radio: The mcs_stats_per_radio of this ApNodeMetrics.  # noqa: E501
        :type: ListOfMcsStatsPerRadioMap
        """

        self._mcs_stats_per_radio = mcs_stats_per_radio

    @property
    def wmm_queues_per_radio(self):
        """Gets the wmm_queues_per_radio of this ApNodeMetrics.  # noqa: E501


        :return: The wmm_queues_per_radio of this ApNodeMetrics.  # noqa: E501
        :rtype: MapOfWmmQueueStatsPerRadioMap
        """
        return self._wmm_queues_per_radio

    @wmm_queues_per_radio.setter
    def wmm_queues_per_radio(self, wmm_queues_per_radio):
        """Sets the wmm_queues_per_radio of this ApNodeMetrics.


        :param wmm_queues_per_radio: The wmm_queues_per_radio of this ApNodeMetrics.  # noqa: E501
        :type: MapOfWmmQueueStatsPerRadioMap
        """

        self._wmm_queues_per_radio = wmm_queues_per_radio

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApNodeMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApNodeMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
