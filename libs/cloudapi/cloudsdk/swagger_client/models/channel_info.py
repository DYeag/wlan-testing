# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChannelInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chan_number': 'int',
        'bandwidth': 'ChannelBandwidth',
        'total_utilization': 'int',
        'wifi_utilization': 'int',
        'noise_floor': 'int'
    }

    attribute_map = {
        'chan_number': 'chanNumber',
        'bandwidth': 'bandwidth',
        'total_utilization': 'totalUtilization',
        'wifi_utilization': 'wifiUtilization',
        'noise_floor': 'noiseFloor'
    }

    def __init__(self, chan_number=None, bandwidth=None, total_utilization=None, wifi_utilization=None, noise_floor=None):  # noqa: E501
        """ChannelInfo - a model defined in Swagger"""  # noqa: E501
        self._chan_number = None
        self._bandwidth = None
        self._total_utilization = None
        self._wifi_utilization = None
        self._noise_floor = None
        self.discriminator = None
        if chan_number is not None:
            self.chan_number = chan_number
        if bandwidth is not None:
            self.bandwidth = bandwidth
        if total_utilization is not None:
            self.total_utilization = total_utilization
        if wifi_utilization is not None:
            self.wifi_utilization = wifi_utilization
        if noise_floor is not None:
            self.noise_floor = noise_floor

    @property
    def chan_number(self):
        """Gets the chan_number of this ChannelInfo.  # noqa: E501


        :return: The chan_number of this ChannelInfo.  # noqa: E501
        :rtype: int
        """
        return self._chan_number

    @chan_number.setter
    def chan_number(self, chan_number):
        """Sets the chan_number of this ChannelInfo.


        :param chan_number: The chan_number of this ChannelInfo.  # noqa: E501
        :type: int
        """

        self._chan_number = chan_number

    @property
    def bandwidth(self):
        """Gets the bandwidth of this ChannelInfo.  # noqa: E501


        :return: The bandwidth of this ChannelInfo.  # noqa: E501
        :rtype: ChannelBandwidth
        """
        return self._bandwidth

    @bandwidth.setter
    def bandwidth(self, bandwidth):
        """Sets the bandwidth of this ChannelInfo.


        :param bandwidth: The bandwidth of this ChannelInfo.  # noqa: E501
        :type: ChannelBandwidth
        """

        self._bandwidth = bandwidth

    @property
    def total_utilization(self):
        """Gets the total_utilization of this ChannelInfo.  # noqa: E501


        :return: The total_utilization of this ChannelInfo.  # noqa: E501
        :rtype: int
        """
        return self._total_utilization

    @total_utilization.setter
    def total_utilization(self, total_utilization):
        """Sets the total_utilization of this ChannelInfo.


        :param total_utilization: The total_utilization of this ChannelInfo.  # noqa: E501
        :type: int
        """

        self._total_utilization = total_utilization

    @property
    def wifi_utilization(self):
        """Gets the wifi_utilization of this ChannelInfo.  # noqa: E501


        :return: The wifi_utilization of this ChannelInfo.  # noqa: E501
        :rtype: int
        """
        return self._wifi_utilization

    @wifi_utilization.setter
    def wifi_utilization(self, wifi_utilization):
        """Sets the wifi_utilization of this ChannelInfo.


        :param wifi_utilization: The wifi_utilization of this ChannelInfo.  # noqa: E501
        :type: int
        """

        self._wifi_utilization = wifi_utilization

    @property
    def noise_floor(self):
        """Gets the noise_floor of this ChannelInfo.  # noqa: E501


        :return: The noise_floor of this ChannelInfo.  # noqa: E501
        :rtype: int
        """
        return self._noise_floor

    @noise_floor.setter
    def noise_floor(self, noise_floor):
        """Sets the noise_floor of this ChannelInfo.


        :param noise_floor: The noise_floor of this ChannelInfo.  # noqa: E501
        :type: int
        """

        self._noise_floor = noise_floor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChannelInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChannelInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
