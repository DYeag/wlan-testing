# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WmmQueueStatsPerQueueTypeMap(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'be': 'WmmQueueStats',
        'bk': 'WmmQueueStats',
        'vi': 'WmmQueueStats',
        'vo': 'WmmQueueStats'
    }

    attribute_map = {
        'be': 'BE',
        'bk': 'BK',
        'vi': 'VI',
        'vo': 'VO'
    }

    def __init__(self, be=None, bk=None, vi=None, vo=None):  # noqa: E501
        """WmmQueueStatsPerQueueTypeMap - a model defined in Swagger"""  # noqa: E501
        self._be = None
        self._bk = None
        self._vi = None
        self._vo = None
        self.discriminator = None
        if be is not None:
            self.be = be
        if bk is not None:
            self.bk = bk
        if vi is not None:
            self.vi = vi
        if vo is not None:
            self.vo = vo

    @property
    def be(self):
        """Gets the be of this WmmQueueStatsPerQueueTypeMap.  # noqa: E501


        :return: The be of this WmmQueueStatsPerQueueTypeMap.  # noqa: E501
        :rtype: WmmQueueStats
        """
        return self._be

    @be.setter
    def be(self, be):
        """Sets the be of this WmmQueueStatsPerQueueTypeMap.


        :param be: The be of this WmmQueueStatsPerQueueTypeMap.  # noqa: E501
        :type: WmmQueueStats
        """

        self._be = be

    @property
    def bk(self):
        """Gets the bk of this WmmQueueStatsPerQueueTypeMap.  # noqa: E501


        :return: The bk of this WmmQueueStatsPerQueueTypeMap.  # noqa: E501
        :rtype: WmmQueueStats
        """
        return self._bk

    @bk.setter
    def bk(self, bk):
        """Sets the bk of this WmmQueueStatsPerQueueTypeMap.


        :param bk: The bk of this WmmQueueStatsPerQueueTypeMap.  # noqa: E501
        :type: WmmQueueStats
        """

        self._bk = bk

    @property
    def vi(self):
        """Gets the vi of this WmmQueueStatsPerQueueTypeMap.  # noqa: E501


        :return: The vi of this WmmQueueStatsPerQueueTypeMap.  # noqa: E501
        :rtype: WmmQueueStats
        """
        return self._vi

    @vi.setter
    def vi(self, vi):
        """Sets the vi of this WmmQueueStatsPerQueueTypeMap.


        :param vi: The vi of this WmmQueueStatsPerQueueTypeMap.  # noqa: E501
        :type: WmmQueueStats
        """

        self._vi = vi

    @property
    def vo(self):
        """Gets the vo of this WmmQueueStatsPerQueueTypeMap.  # noqa: E501


        :return: The vo of this WmmQueueStatsPerQueueTypeMap.  # noqa: E501
        :rtype: WmmQueueStats
        """
        return self._vo

    @vo.setter
    def vo(self, vo):
        """Sets the vo of this WmmQueueStatsPerQueueTypeMap.


        :param vo: The vo of this WmmQueueStatsPerQueueTypeMap.  # noqa: E501
        :type: WmmQueueStats
        """

        self._vo = vo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WmmQueueStatsPerQueueTypeMap, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WmmQueueStatsPerQueueTypeMap):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
