# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.firmware_track_assignment_record import FirmwareTrackAssignmentRecord  # noqa: F401,E501

class FirmwareTrackAssignmentDetails(FirmwareTrackAssignmentRecord):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'equipment_type': 'EquipmentType',
        'model_id': 'str',
        'version_name': 'str',
        'description': 'str',
        'commit': 'str',
        'release_date': 'int'
    }
    if hasattr(FirmwareTrackAssignmentRecord, "swagger_types"):
        swagger_types.update(FirmwareTrackAssignmentRecord.swagger_types)

    attribute_map = {
        'equipment_type': 'equipmentType',
        'model_id': 'modelId',
        'version_name': 'versionName',
        'description': 'description',
        'commit': 'commit',
        'release_date': 'releaseDate'
    }
    if hasattr(FirmwareTrackAssignmentRecord, "attribute_map"):
        attribute_map.update(FirmwareTrackAssignmentRecord.attribute_map)

    def __init__(self, equipment_type=None, model_id=None, version_name=None, description=None, commit=None, release_date=None, *args, **kwargs):  # noqa: E501
        """FirmwareTrackAssignmentDetails - a model defined in Swagger"""  # noqa: E501
        self._equipment_type = None
        self._model_id = None
        self._version_name = None
        self._description = None
        self._commit = None
        self._release_date = None
        self.discriminator = None
        if equipment_type is not None:
            self.equipment_type = equipment_type
        if model_id is not None:
            self.model_id = model_id
        if version_name is not None:
            self.version_name = version_name
        if description is not None:
            self.description = description
        if commit is not None:
            self.commit = commit
        if release_date is not None:
            self.release_date = release_date
        FirmwareTrackAssignmentRecord.__init__(self, *args, **kwargs)

    @property
    def equipment_type(self):
        """Gets the equipment_type of this FirmwareTrackAssignmentDetails.  # noqa: E501


        :return: The equipment_type of this FirmwareTrackAssignmentDetails.  # noqa: E501
        :rtype: EquipmentType
        """
        return self._equipment_type

    @equipment_type.setter
    def equipment_type(self, equipment_type):
        """Sets the equipment_type of this FirmwareTrackAssignmentDetails.


        :param equipment_type: The equipment_type of this FirmwareTrackAssignmentDetails.  # noqa: E501
        :type: EquipmentType
        """

        self._equipment_type = equipment_type

    @property
    def model_id(self):
        """Gets the model_id of this FirmwareTrackAssignmentDetails.  # noqa: E501

        equipment model  # noqa: E501

        :return: The model_id of this FirmwareTrackAssignmentDetails.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this FirmwareTrackAssignmentDetails.

        equipment model  # noqa: E501

        :param model_id: The model_id of this FirmwareTrackAssignmentDetails.  # noqa: E501
        :type: str
        """

        self._model_id = model_id

    @property
    def version_name(self):
        """Gets the version_name of this FirmwareTrackAssignmentDetails.  # noqa: E501


        :return: The version_name of this FirmwareTrackAssignmentDetails.  # noqa: E501
        :rtype: str
        """
        return self._version_name

    @version_name.setter
    def version_name(self, version_name):
        """Sets the version_name of this FirmwareTrackAssignmentDetails.


        :param version_name: The version_name of this FirmwareTrackAssignmentDetails.  # noqa: E501
        :type: str
        """

        self._version_name = version_name

    @property
    def description(self):
        """Gets the description of this FirmwareTrackAssignmentDetails.  # noqa: E501


        :return: The description of this FirmwareTrackAssignmentDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FirmwareTrackAssignmentDetails.


        :param description: The description of this FirmwareTrackAssignmentDetails.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def commit(self):
        """Gets the commit of this FirmwareTrackAssignmentDetails.  # noqa: E501

        commit number for the firmware image, from the source control system  # noqa: E501

        :return: The commit of this FirmwareTrackAssignmentDetails.  # noqa: E501
        :rtype: str
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this FirmwareTrackAssignmentDetails.

        commit number for the firmware image, from the source control system  # noqa: E501

        :param commit: The commit of this FirmwareTrackAssignmentDetails.  # noqa: E501
        :type: str
        """

        self._commit = commit

    @property
    def release_date(self):
        """Gets the release_date of this FirmwareTrackAssignmentDetails.  # noqa: E501

        release date of the firmware image, in ms epoch time  # noqa: E501

        :return: The release_date of this FirmwareTrackAssignmentDetails.  # noqa: E501
        :rtype: int
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this FirmwareTrackAssignmentDetails.

        release date of the firmware image, in ms epoch time  # noqa: E501

        :param release_date: The release_date of this FirmwareTrackAssignmentDetails.  # noqa: E501
        :type: int
        """

        self._release_date = release_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FirmwareTrackAssignmentDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FirmwareTrackAssignmentDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
