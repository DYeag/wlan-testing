# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TimedAccessUserRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'password': 'str',
        'activation_time': 'int',
        'expiration_time': 'int',
        'num_devices': 'int',
        'user_details': 'TimedAccessUserDetails',
        'user_mac_addresses': 'list[MacAddress]',
        'last_modified_timestamp': 'int'
    }

    attribute_map = {
        'username': 'username',
        'password': 'password',
        'activation_time': 'activationTime',
        'expiration_time': 'expirationTime',
        'num_devices': 'numDevices',
        'user_details': 'userDetails',
        'user_mac_addresses': 'userMacAddresses',
        'last_modified_timestamp': 'lastModifiedTimestamp'
    }

    def __init__(self, username=None, password=None, activation_time=None, expiration_time=None, num_devices=None, user_details=None, user_mac_addresses=None, last_modified_timestamp=None):  # noqa: E501
        """TimedAccessUserRecord - a model defined in Swagger"""  # noqa: E501
        self._username = None
        self._password = None
        self._activation_time = None
        self._expiration_time = None
        self._num_devices = None
        self._user_details = None
        self._user_mac_addresses = None
        self._last_modified_timestamp = None
        self.discriminator = None
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if activation_time is not None:
            self.activation_time = activation_time
        if expiration_time is not None:
            self.expiration_time = expiration_time
        if num_devices is not None:
            self.num_devices = num_devices
        if user_details is not None:
            self.user_details = user_details
        if user_mac_addresses is not None:
            self.user_mac_addresses = user_mac_addresses
        if last_modified_timestamp is not None:
            self.last_modified_timestamp = last_modified_timestamp

    @property
    def username(self):
        """Gets the username of this TimedAccessUserRecord.  # noqa: E501


        :return: The username of this TimedAccessUserRecord.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this TimedAccessUserRecord.


        :param username: The username of this TimedAccessUserRecord.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this TimedAccessUserRecord.  # noqa: E501


        :return: The password of this TimedAccessUserRecord.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this TimedAccessUserRecord.


        :param password: The password of this TimedAccessUserRecord.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def activation_time(self):
        """Gets the activation_time of this TimedAccessUserRecord.  # noqa: E501


        :return: The activation_time of this TimedAccessUserRecord.  # noqa: E501
        :rtype: int
        """
        return self._activation_time

    @activation_time.setter
    def activation_time(self, activation_time):
        """Sets the activation_time of this TimedAccessUserRecord.


        :param activation_time: The activation_time of this TimedAccessUserRecord.  # noqa: E501
        :type: int
        """

        self._activation_time = activation_time

    @property
    def expiration_time(self):
        """Gets the expiration_time of this TimedAccessUserRecord.  # noqa: E501


        :return: The expiration_time of this TimedAccessUserRecord.  # noqa: E501
        :rtype: int
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this TimedAccessUserRecord.


        :param expiration_time: The expiration_time of this TimedAccessUserRecord.  # noqa: E501
        :type: int
        """

        self._expiration_time = expiration_time

    @property
    def num_devices(self):
        """Gets the num_devices of this TimedAccessUserRecord.  # noqa: E501


        :return: The num_devices of this TimedAccessUserRecord.  # noqa: E501
        :rtype: int
        """
        return self._num_devices

    @num_devices.setter
    def num_devices(self, num_devices):
        """Sets the num_devices of this TimedAccessUserRecord.


        :param num_devices: The num_devices of this TimedAccessUserRecord.  # noqa: E501
        :type: int
        """

        self._num_devices = num_devices

    @property
    def user_details(self):
        """Gets the user_details of this TimedAccessUserRecord.  # noqa: E501


        :return: The user_details of this TimedAccessUserRecord.  # noqa: E501
        :rtype: TimedAccessUserDetails
        """
        return self._user_details

    @user_details.setter
    def user_details(self, user_details):
        """Sets the user_details of this TimedAccessUserRecord.


        :param user_details: The user_details of this TimedAccessUserRecord.  # noqa: E501
        :type: TimedAccessUserDetails
        """

        self._user_details = user_details

    @property
    def user_mac_addresses(self):
        """Gets the user_mac_addresses of this TimedAccessUserRecord.  # noqa: E501


        :return: The user_mac_addresses of this TimedAccessUserRecord.  # noqa: E501
        :rtype: list[MacAddress]
        """
        return self._user_mac_addresses

    @user_mac_addresses.setter
    def user_mac_addresses(self, user_mac_addresses):
        """Sets the user_mac_addresses of this TimedAccessUserRecord.


        :param user_mac_addresses: The user_mac_addresses of this TimedAccessUserRecord.  # noqa: E501
        :type: list[MacAddress]
        """

        self._user_mac_addresses = user_mac_addresses

    @property
    def last_modified_timestamp(self):
        """Gets the last_modified_timestamp of this TimedAccessUserRecord.  # noqa: E501


        :return: The last_modified_timestamp of this TimedAccessUserRecord.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_timestamp

    @last_modified_timestamp.setter
    def last_modified_timestamp(self, last_modified_timestamp):
        """Sets the last_modified_timestamp of this TimedAccessUserRecord.


        :param last_modified_timestamp: The last_modified_timestamp of this TimedAccessUserRecord.  # noqa: E501
        :type: int
        """

        self._last_modified_timestamp = last_modified_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimedAccessUserRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimedAccessUserRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
