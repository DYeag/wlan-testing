# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MacAllowlistRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mac_address': 'MacAddress',
        'notes': 'str',
        'last_modified_timestamp': 'int'
    }

    attribute_map = {
        'mac_address': 'macAddress',
        'notes': 'notes',
        'last_modified_timestamp': 'lastModifiedTimestamp'
    }

    def __init__(self, mac_address=None, notes=None, last_modified_timestamp=None):  # noqa: E501
        """MacAllowlistRecord - a model defined in Swagger"""  # noqa: E501
        self._mac_address = None
        self._notes = None
        self._last_modified_timestamp = None
        self.discriminator = None
        if mac_address is not None:
            self.mac_address = mac_address
        if notes is not None:
            self.notes = notes
        if last_modified_timestamp is not None:
            self.last_modified_timestamp = last_modified_timestamp

    @property
    def mac_address(self):
        """Gets the mac_address of this MacAllowlistRecord.  # noqa: E501


        :return: The mac_address of this MacAllowlistRecord.  # noqa: E501
        :rtype: MacAddress
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this MacAllowlistRecord.


        :param mac_address: The mac_address of this MacAllowlistRecord.  # noqa: E501
        :type: MacAddress
        """

        self._mac_address = mac_address

    @property
    def notes(self):
        """Gets the notes of this MacAllowlistRecord.  # noqa: E501


        :return: The notes of this MacAllowlistRecord.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this MacAllowlistRecord.


        :param notes: The notes of this MacAllowlistRecord.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def last_modified_timestamp(self):
        """Gets the last_modified_timestamp of this MacAllowlistRecord.  # noqa: E501


        :return: The last_modified_timestamp of this MacAllowlistRecord.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_timestamp

    @last_modified_timestamp.setter
    def last_modified_timestamp(self, last_modified_timestamp):
        """Sets the last_modified_timestamp of this MacAllowlistRecord.


        :param last_modified_timestamp: The last_modified_timestamp of this MacAllowlistRecord.  # noqa: E501
        :type: int
        """

        self._last_modified_timestamp = last_modified_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MacAllowlistRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MacAllowlistRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
