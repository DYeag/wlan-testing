# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IntegerPerStatusCodeMap(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'normal': 'int',
        'requires_attention': 'int',
        'error': 'int',
        'disabled': 'int'
    }

    attribute_map = {
        'normal': 'normal',
        'requires_attention': 'requiresAttention',
        'error': 'error',
        'disabled': 'disabled'
    }

    def __init__(self, normal=None, requires_attention=None, error=None, disabled=None):  # noqa: E501
        """IntegerPerStatusCodeMap - a model defined in Swagger"""  # noqa: E501
        self._normal = None
        self._requires_attention = None
        self._error = None
        self._disabled = None
        self.discriminator = None
        if normal is not None:
            self.normal = normal
        if requires_attention is not None:
            self.requires_attention = requires_attention
        if error is not None:
            self.error = error
        if disabled is not None:
            self.disabled = disabled

    @property
    def normal(self):
        """Gets the normal of this IntegerPerStatusCodeMap.  # noqa: E501


        :return: The normal of this IntegerPerStatusCodeMap.  # noqa: E501
        :rtype: int
        """
        return self._normal

    @normal.setter
    def normal(self, normal):
        """Sets the normal of this IntegerPerStatusCodeMap.


        :param normal: The normal of this IntegerPerStatusCodeMap.  # noqa: E501
        :type: int
        """

        self._normal = normal

    @property
    def requires_attention(self):
        """Gets the requires_attention of this IntegerPerStatusCodeMap.  # noqa: E501


        :return: The requires_attention of this IntegerPerStatusCodeMap.  # noqa: E501
        :rtype: int
        """
        return self._requires_attention

    @requires_attention.setter
    def requires_attention(self, requires_attention):
        """Sets the requires_attention of this IntegerPerStatusCodeMap.


        :param requires_attention: The requires_attention of this IntegerPerStatusCodeMap.  # noqa: E501
        :type: int
        """

        self._requires_attention = requires_attention

    @property
    def error(self):
        """Gets the error of this IntegerPerStatusCodeMap.  # noqa: E501


        :return: The error of this IntegerPerStatusCodeMap.  # noqa: E501
        :rtype: int
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this IntegerPerStatusCodeMap.


        :param error: The error of this IntegerPerStatusCodeMap.  # noqa: E501
        :type: int
        """

        self._error = error

    @property
    def disabled(self):
        """Gets the disabled of this IntegerPerStatusCodeMap.  # noqa: E501


        :return: The disabled of this IntegerPerStatusCodeMap.  # noqa: E501
        :rtype: int
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this IntegerPerStatusCodeMap.


        :param disabled: The disabled of this IntegerPerStatusCodeMap.  # noqa: E501
        :type: int
        """

        self._disabled = disabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntegerPerStatusCodeMap, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntegerPerStatusCodeMap):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
