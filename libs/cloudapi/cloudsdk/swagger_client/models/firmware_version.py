# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FirmwareVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'equipment_type': 'EquipmentType',
        'model_id': 'str',
        'version_name': 'str',
        'description': 'str',
        'filename': 'str',
        'commit': 'str',
        'validation_method': 'FirmwareValidationMethod',
        'validation_code': 'str',
        'release_date': 'int',
        'created_timestamp': 'int',
        'last_modified_timestamp': 'int'
    }

    attribute_map = {
        'id': 'id',
        'equipment_type': 'equipmentType',
        'model_id': 'modelId',
        'version_name': 'versionName',
        'description': 'description',
        'filename': 'filename',
        'commit': 'commit',
        'validation_method': 'validationMethod',
        'validation_code': 'validationCode',
        'release_date': 'releaseDate',
        'created_timestamp': 'createdTimestamp',
        'last_modified_timestamp': 'lastModifiedTimestamp'
    }

    def __init__(self, id=None, equipment_type=None, model_id=None, version_name=None, description=None, filename=None, commit=None, validation_method=None, validation_code=None, release_date=None, created_timestamp=None, last_modified_timestamp=None):  # noqa: E501
        """FirmwareVersion - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._equipment_type = None
        self._model_id = None
        self._version_name = None
        self._description = None
        self._filename = None
        self._commit = None
        self._validation_method = None
        self._validation_code = None
        self._release_date = None
        self._created_timestamp = None
        self._last_modified_timestamp = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if equipment_type is not None:
            self.equipment_type = equipment_type
        if model_id is not None:
            self.model_id = model_id
        if version_name is not None:
            self.version_name = version_name
        if description is not None:
            self.description = description
        if filename is not None:
            self.filename = filename
        if commit is not None:
            self.commit = commit
        if validation_method is not None:
            self.validation_method = validation_method
        if validation_code is not None:
            self.validation_code = validation_code
        if release_date is not None:
            self.release_date = release_date
        if created_timestamp is not None:
            self.created_timestamp = created_timestamp
        if last_modified_timestamp is not None:
            self.last_modified_timestamp = last_modified_timestamp

    @property
    def id(self):
        """Gets the id of this FirmwareVersion.  # noqa: E501


        :return: The id of this FirmwareVersion.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FirmwareVersion.


        :param id: The id of this FirmwareVersion.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def equipment_type(self):
        """Gets the equipment_type of this FirmwareVersion.  # noqa: E501


        :return: The equipment_type of this FirmwareVersion.  # noqa: E501
        :rtype: EquipmentType
        """
        return self._equipment_type

    @equipment_type.setter
    def equipment_type(self, equipment_type):
        """Sets the equipment_type of this FirmwareVersion.


        :param equipment_type: The equipment_type of this FirmwareVersion.  # noqa: E501
        :type: EquipmentType
        """

        self._equipment_type = equipment_type

    @property
    def model_id(self):
        """Gets the model_id of this FirmwareVersion.  # noqa: E501

        equipment model  # noqa: E501

        :return: The model_id of this FirmwareVersion.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this FirmwareVersion.

        equipment model  # noqa: E501

        :param model_id: The model_id of this FirmwareVersion.  # noqa: E501
        :type: str
        """

        self._model_id = model_id

    @property
    def version_name(self):
        """Gets the version_name of this FirmwareVersion.  # noqa: E501


        :return: The version_name of this FirmwareVersion.  # noqa: E501
        :rtype: str
        """
        return self._version_name

    @version_name.setter
    def version_name(self, version_name):
        """Sets the version_name of this FirmwareVersion.


        :param version_name: The version_name of this FirmwareVersion.  # noqa: E501
        :type: str
        """

        self._version_name = version_name

    @property
    def description(self):
        """Gets the description of this FirmwareVersion.  # noqa: E501


        :return: The description of this FirmwareVersion.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FirmwareVersion.


        :param description: The description of this FirmwareVersion.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def filename(self):
        """Gets the filename of this FirmwareVersion.  # noqa: E501


        :return: The filename of this FirmwareVersion.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this FirmwareVersion.


        :param filename: The filename of this FirmwareVersion.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def commit(self):
        """Gets the commit of this FirmwareVersion.  # noqa: E501

        commit number for the firmware image, from the source control system  # noqa: E501

        :return: The commit of this FirmwareVersion.  # noqa: E501
        :rtype: str
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this FirmwareVersion.

        commit number for the firmware image, from the source control system  # noqa: E501

        :param commit: The commit of this FirmwareVersion.  # noqa: E501
        :type: str
        """

        self._commit = commit

    @property
    def validation_method(self):
        """Gets the validation_method of this FirmwareVersion.  # noqa: E501


        :return: The validation_method of this FirmwareVersion.  # noqa: E501
        :rtype: FirmwareValidationMethod
        """
        return self._validation_method

    @validation_method.setter
    def validation_method(self, validation_method):
        """Sets the validation_method of this FirmwareVersion.


        :param validation_method: The validation_method of this FirmwareVersion.  # noqa: E501
        :type: FirmwareValidationMethod
        """

        self._validation_method = validation_method

    @property
    def validation_code(self):
        """Gets the validation_code of this FirmwareVersion.  # noqa: E501

        firmware digest code, depending on validation method - MD5, etc.  # noqa: E501

        :return: The validation_code of this FirmwareVersion.  # noqa: E501
        :rtype: str
        """
        return self._validation_code

    @validation_code.setter
    def validation_code(self, validation_code):
        """Sets the validation_code of this FirmwareVersion.

        firmware digest code, depending on validation method - MD5, etc.  # noqa: E501

        :param validation_code: The validation_code of this FirmwareVersion.  # noqa: E501
        :type: str
        """

        self._validation_code = validation_code

    @property
    def release_date(self):
        """Gets the release_date of this FirmwareVersion.  # noqa: E501

        release date of the firmware image, in ms epoch time  # noqa: E501

        :return: The release_date of this FirmwareVersion.  # noqa: E501
        :rtype: int
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this FirmwareVersion.

        release date of the firmware image, in ms epoch time  # noqa: E501

        :param release_date: The release_date of this FirmwareVersion.  # noqa: E501
        :type: int
        """

        self._release_date = release_date

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this FirmwareVersion.  # noqa: E501


        :return: The created_timestamp of this FirmwareVersion.  # noqa: E501
        :rtype: int
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this FirmwareVersion.


        :param created_timestamp: The created_timestamp of this FirmwareVersion.  # noqa: E501
        :type: int
        """

        self._created_timestamp = created_timestamp

    @property
    def last_modified_timestamp(self):
        """Gets the last_modified_timestamp of this FirmwareVersion.  # noqa: E501

        must be provided for update operation, update will be rejected if provided value does not match the one currently stored in the database  # noqa: E501

        :return: The last_modified_timestamp of this FirmwareVersion.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_timestamp

    @last_modified_timestamp.setter
    def last_modified_timestamp(self, last_modified_timestamp):
        """Sets the last_modified_timestamp of this FirmwareVersion.

        must be provided for update operation, update will be rejected if provided value does not match the one currently stored in the database  # noqa: E501

        :param last_modified_timestamp: The last_modified_timestamp of this FirmwareVersion.  # noqa: E501
        :type: int
        """

        self._last_modified_timestamp = last_modified_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FirmwareVersion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FirmwareVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
