# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseDhcpEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_type': 'str',
        'all_of': 'SystemEvent',
        'x_id': 'int',
        'vlan_id': 'int',
        'dhcp_server_ip': 'str',
        'client_ip': 'str',
        'relay_ip': 'str',
        'client_mac_address': 'MacAddress',
        'session_id': 'int',
        'customer_id': 'int',
        'equipment_id': 'int'
    }

    attribute_map = {
        'model_type': 'model_type',
        'all_of': 'allOf',
        'x_id': 'xId',
        'vlan_id': 'vlanId',
        'dhcp_server_ip': 'dhcpServerIp',
        'client_ip': 'clientIp',
        'relay_ip': 'relayIp',
        'client_mac_address': 'clientMacAddress',
        'session_id': 'sessionId',
        'customer_id': 'customerId',
        'equipment_id': 'equipmentId'
    }

    def __init__(self, model_type=None, all_of=None, x_id=None, vlan_id=None, dhcp_server_ip=None, client_ip=None, relay_ip=None, client_mac_address=None, session_id=None, customer_id=None, equipment_id=None):  # noqa: E501
        """BaseDhcpEvent - a model defined in Swagger"""  # noqa: E501
        self._model_type = None
        self._all_of = None
        self._x_id = None
        self._vlan_id = None
        self._dhcp_server_ip = None
        self._client_ip = None
        self._relay_ip = None
        self._client_mac_address = None
        self._session_id = None
        self._customer_id = None
        self._equipment_id = None
        self.discriminator = None
        self.model_type = model_type
        if all_of is not None:
            self.all_of = all_of
        if x_id is not None:
            self.x_id = x_id
        if vlan_id is not None:
            self.vlan_id = vlan_id
        if dhcp_server_ip is not None:
            self.dhcp_server_ip = dhcp_server_ip
        if client_ip is not None:
            self.client_ip = client_ip
        if relay_ip is not None:
            self.relay_ip = relay_ip
        if client_mac_address is not None:
            self.client_mac_address = client_mac_address
        if session_id is not None:
            self.session_id = session_id
        if customer_id is not None:
            self.customer_id = customer_id
        if equipment_id is not None:
            self.equipment_id = equipment_id

    @property
    def model_type(self):
        """Gets the model_type of this BaseDhcpEvent.  # noqa: E501


        :return: The model_type of this BaseDhcpEvent.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this BaseDhcpEvent.


        :param model_type: The model_type of this BaseDhcpEvent.  # noqa: E501
        :type: str
        """
        if model_type is None:
            raise ValueError("Invalid value for `model_type`, must not be `None`")  # noqa: E501

        self._model_type = model_type

    @property
    def all_of(self):
        """Gets the all_of of this BaseDhcpEvent.  # noqa: E501


        :return: The all_of of this BaseDhcpEvent.  # noqa: E501
        :rtype: SystemEvent
        """
        return self._all_of

    @all_of.setter
    def all_of(self, all_of):
        """Sets the all_of of this BaseDhcpEvent.


        :param all_of: The all_of of this BaseDhcpEvent.  # noqa: E501
        :type: SystemEvent
        """

        self._all_of = all_of

    @property
    def x_id(self):
        """Gets the x_id of this BaseDhcpEvent.  # noqa: E501


        :return: The x_id of this BaseDhcpEvent.  # noqa: E501
        :rtype: int
        """
        return self._x_id

    @x_id.setter
    def x_id(self, x_id):
        """Sets the x_id of this BaseDhcpEvent.


        :param x_id: The x_id of this BaseDhcpEvent.  # noqa: E501
        :type: int
        """

        self._x_id = x_id

    @property
    def vlan_id(self):
        """Gets the vlan_id of this BaseDhcpEvent.  # noqa: E501


        :return: The vlan_id of this BaseDhcpEvent.  # noqa: E501
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this BaseDhcpEvent.


        :param vlan_id: The vlan_id of this BaseDhcpEvent.  # noqa: E501
        :type: int
        """

        self._vlan_id = vlan_id

    @property
    def dhcp_server_ip(self):
        """Gets the dhcp_server_ip of this BaseDhcpEvent.  # noqa: E501

        string representing InetAddress  # noqa: E501

        :return: The dhcp_server_ip of this BaseDhcpEvent.  # noqa: E501
        :rtype: str
        """
        return self._dhcp_server_ip

    @dhcp_server_ip.setter
    def dhcp_server_ip(self, dhcp_server_ip):
        """Sets the dhcp_server_ip of this BaseDhcpEvent.

        string representing InetAddress  # noqa: E501

        :param dhcp_server_ip: The dhcp_server_ip of this BaseDhcpEvent.  # noqa: E501
        :type: str
        """

        self._dhcp_server_ip = dhcp_server_ip

    @property
    def client_ip(self):
        """Gets the client_ip of this BaseDhcpEvent.  # noqa: E501

        string representing InetAddress  # noqa: E501

        :return: The client_ip of this BaseDhcpEvent.  # noqa: E501
        :rtype: str
        """
        return self._client_ip

    @client_ip.setter
    def client_ip(self, client_ip):
        """Sets the client_ip of this BaseDhcpEvent.

        string representing InetAddress  # noqa: E501

        :param client_ip: The client_ip of this BaseDhcpEvent.  # noqa: E501
        :type: str
        """

        self._client_ip = client_ip

    @property
    def relay_ip(self):
        """Gets the relay_ip of this BaseDhcpEvent.  # noqa: E501

        string representing InetAddress  # noqa: E501

        :return: The relay_ip of this BaseDhcpEvent.  # noqa: E501
        :rtype: str
        """
        return self._relay_ip

    @relay_ip.setter
    def relay_ip(self, relay_ip):
        """Sets the relay_ip of this BaseDhcpEvent.

        string representing InetAddress  # noqa: E501

        :param relay_ip: The relay_ip of this BaseDhcpEvent.  # noqa: E501
        :type: str
        """

        self._relay_ip = relay_ip

    @property
    def client_mac_address(self):
        """Gets the client_mac_address of this BaseDhcpEvent.  # noqa: E501


        :return: The client_mac_address of this BaseDhcpEvent.  # noqa: E501
        :rtype: MacAddress
        """
        return self._client_mac_address

    @client_mac_address.setter
    def client_mac_address(self, client_mac_address):
        """Sets the client_mac_address of this BaseDhcpEvent.


        :param client_mac_address: The client_mac_address of this BaseDhcpEvent.  # noqa: E501
        :type: MacAddress
        """

        self._client_mac_address = client_mac_address

    @property
    def session_id(self):
        """Gets the session_id of this BaseDhcpEvent.  # noqa: E501


        :return: The session_id of this BaseDhcpEvent.  # noqa: E501
        :rtype: int
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this BaseDhcpEvent.


        :param session_id: The session_id of this BaseDhcpEvent.  # noqa: E501
        :type: int
        """

        self._session_id = session_id

    @property
    def customer_id(self):
        """Gets the customer_id of this BaseDhcpEvent.  # noqa: E501


        :return: The customer_id of this BaseDhcpEvent.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this BaseDhcpEvent.


        :param customer_id: The customer_id of this BaseDhcpEvent.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def equipment_id(self):
        """Gets the equipment_id of this BaseDhcpEvent.  # noqa: E501


        :return: The equipment_id of this BaseDhcpEvent.  # noqa: E501
        :rtype: int
        """
        return self._equipment_id

    @equipment_id.setter
    def equipment_id(self, equipment_id):
        """Sets the equipment_id of this BaseDhcpEvent.


        :param equipment_id: The equipment_id of this BaseDhcpEvent.  # noqa: E501
        :type: int
        """

        self._equipment_id = equipment_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseDhcpEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseDhcpEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
