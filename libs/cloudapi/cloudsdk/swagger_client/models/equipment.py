# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Equipment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'equipment_type': 'EquipmentType',
        'inventory_id': 'str',
        'customer_id': 'int',
        'profile_id': 'int',
        'name': 'str',
        'location_id': 'int',
        'details': 'EquipmentDetails',
        'latitude': 'str',
        'longitude': 'str',
        'base_mac_address': 'MacAddress',
        'serial': 'str',
        'created_timestamp': 'int',
        'last_modified_timestamp': 'int'
    }

    attribute_map = {
        'id': 'id',
        'equipment_type': 'equipmentType',
        'inventory_id': 'inventoryId',
        'customer_id': 'customerId',
        'profile_id': 'profileId',
        'name': 'name',
        'location_id': 'locationId',
        'details': 'details',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'base_mac_address': 'baseMacAddress',
        'serial': 'serial',
        'created_timestamp': 'createdTimestamp',
        'last_modified_timestamp': 'lastModifiedTimestamp'
    }

    def __init__(self, id=None, equipment_type=None, inventory_id=None, customer_id=None, profile_id=None, name=None, location_id=None, details=None, latitude=None, longitude=None, base_mac_address=None, serial=None, created_timestamp=None, last_modified_timestamp=None):  # noqa: E501
        """Equipment - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._equipment_type = None
        self._inventory_id = None
        self._customer_id = None
        self._profile_id = None
        self._name = None
        self._location_id = None
        self._details = None
        self._latitude = None
        self._longitude = None
        self._base_mac_address = None
        self._serial = None
        self._created_timestamp = None
        self._last_modified_timestamp = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if equipment_type is not None:
            self.equipment_type = equipment_type
        if inventory_id is not None:
            self.inventory_id = inventory_id
        if customer_id is not None:
            self.customer_id = customer_id
        if profile_id is not None:
            self.profile_id = profile_id
        if name is not None:
            self.name = name
        if location_id is not None:
            self.location_id = location_id
        if details is not None:
            self.details = details
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if base_mac_address is not None:
            self.base_mac_address = base_mac_address
        if serial is not None:
            self.serial = serial
        if created_timestamp is not None:
            self.created_timestamp = created_timestamp
        if last_modified_timestamp is not None:
            self.last_modified_timestamp = last_modified_timestamp

    @property
    def id(self):
        """Gets the id of this Equipment.  # noqa: E501


        :return: The id of this Equipment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Equipment.


        :param id: The id of this Equipment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def equipment_type(self):
        """Gets the equipment_type of this Equipment.  # noqa: E501


        :return: The equipment_type of this Equipment.  # noqa: E501
        :rtype: EquipmentType
        """
        return self._equipment_type

    @equipment_type.setter
    def equipment_type(self, equipment_type):
        """Sets the equipment_type of this Equipment.


        :param equipment_type: The equipment_type of this Equipment.  # noqa: E501
        :type: EquipmentType
        """

        self._equipment_type = equipment_type

    @property
    def inventory_id(self):
        """Gets the inventory_id of this Equipment.  # noqa: E501


        :return: The inventory_id of this Equipment.  # noqa: E501
        :rtype: str
        """
        return self._inventory_id

    @inventory_id.setter
    def inventory_id(self, inventory_id):
        """Sets the inventory_id of this Equipment.


        :param inventory_id: The inventory_id of this Equipment.  # noqa: E501
        :type: str
        """

        self._inventory_id = inventory_id

    @property
    def customer_id(self):
        """Gets the customer_id of this Equipment.  # noqa: E501


        :return: The customer_id of this Equipment.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Equipment.


        :param customer_id: The customer_id of this Equipment.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def profile_id(self):
        """Gets the profile_id of this Equipment.  # noqa: E501


        :return: The profile_id of this Equipment.  # noqa: E501
        :rtype: int
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this Equipment.


        :param profile_id: The profile_id of this Equipment.  # noqa: E501
        :type: int
        """

        self._profile_id = profile_id

    @property
    def name(self):
        """Gets the name of this Equipment.  # noqa: E501


        :return: The name of this Equipment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Equipment.


        :param name: The name of this Equipment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def location_id(self):
        """Gets the location_id of this Equipment.  # noqa: E501


        :return: The location_id of this Equipment.  # noqa: E501
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this Equipment.


        :param location_id: The location_id of this Equipment.  # noqa: E501
        :type: int
        """

        self._location_id = location_id

    @property
    def details(self):
        """Gets the details of this Equipment.  # noqa: E501


        :return: The details of this Equipment.  # noqa: E501
        :rtype: EquipmentDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Equipment.


        :param details: The details of this Equipment.  # noqa: E501
        :type: EquipmentDetails
        """

        self._details = details

    @property
    def latitude(self):
        """Gets the latitude of this Equipment.  # noqa: E501


        :return: The latitude of this Equipment.  # noqa: E501
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Equipment.


        :param latitude: The latitude of this Equipment.  # noqa: E501
        :type: str
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Equipment.  # noqa: E501


        :return: The longitude of this Equipment.  # noqa: E501
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Equipment.


        :param longitude: The longitude of this Equipment.  # noqa: E501
        :type: str
        """

        self._longitude = longitude

    @property
    def base_mac_address(self):
        """Gets the base_mac_address of this Equipment.  # noqa: E501


        :return: The base_mac_address of this Equipment.  # noqa: E501
        :rtype: MacAddress
        """
        return self._base_mac_address

    @base_mac_address.setter
    def base_mac_address(self, base_mac_address):
        """Sets the base_mac_address of this Equipment.


        :param base_mac_address: The base_mac_address of this Equipment.  # noqa: E501
        :type: MacAddress
        """

        self._base_mac_address = base_mac_address

    @property
    def serial(self):
        """Gets the serial of this Equipment.  # noqa: E501


        :return: The serial of this Equipment.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this Equipment.


        :param serial: The serial of this Equipment.  # noqa: E501
        :type: str
        """

        self._serial = serial

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this Equipment.  # noqa: E501


        :return: The created_timestamp of this Equipment.  # noqa: E501
        :rtype: int
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this Equipment.


        :param created_timestamp: The created_timestamp of this Equipment.  # noqa: E501
        :type: int
        """

        self._created_timestamp = created_timestamp

    @property
    def last_modified_timestamp(self):
        """Gets the last_modified_timestamp of this Equipment.  # noqa: E501

        must be provided for update operation, update will be rejected if provided value does not match the one currently stored in the database  # noqa: E501

        :return: The last_modified_timestamp of this Equipment.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_timestamp

    @last_modified_timestamp.setter
    def last_modified_timestamp(self, last_modified_timestamp):
        """Sets the last_modified_timestamp of this Equipment.

        must be provided for update operation, update will be rejected if provided value does not match the one currently stored in the database  # noqa: E501

        :param last_modified_timestamp: The last_modified_timestamp of this Equipment.  # noqa: E501
        :type: int
        """

        self._last_modified_timestamp = last_modified_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Equipment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Equipment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
