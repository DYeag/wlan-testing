# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.profile_details import ProfileDetails  # noqa: F401,E501

class PasspointOperatorProfile(ProfileDetails):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_type': 'str',
        'server_only_authenticated_l2_encryption_network': 'bool',
        'operator_friendly_name': 'list[PasspointDuple]',
        'domain_name_list': 'list[str]',
        'default_operator_friendly_name': 'str',
        'default_operator_friendly_name_fr': 'str'
    }
    if hasattr(ProfileDetails, "swagger_types"):
        swagger_types.update(ProfileDetails.swagger_types)

    attribute_map = {
        'model_type': 'model_type',
        'server_only_authenticated_l2_encryption_network': 'serverOnlyAuthenticatedL2EncryptionNetwork',
        'operator_friendly_name': 'operatorFriendlyName',
        'domain_name_list': 'domainNameList',
        'default_operator_friendly_name': 'defaultOperatorFriendlyName',
        'default_operator_friendly_name_fr': 'defaultOperatorFriendlyNameFr'
    }
    if hasattr(ProfileDetails, "attribute_map"):
        attribute_map.update(ProfileDetails.attribute_map)

    def __init__(self, model_type=None, server_only_authenticated_l2_encryption_network=None, operator_friendly_name=None, domain_name_list=None, default_operator_friendly_name=None, default_operator_friendly_name_fr=None, *args, **kwargs):  # noqa: E501
        """PasspointOperatorProfile - a model defined in Swagger"""  # noqa: E501
        self._model_type = None
        self._server_only_authenticated_l2_encryption_network = None
        self._operator_friendly_name = None
        self._domain_name_list = None
        self._default_operator_friendly_name = None
        self._default_operator_friendly_name_fr = None
        self.discriminator = None
        if model_type is not None:
            self.model_type = model_type
        if server_only_authenticated_l2_encryption_network is not None:
            self.server_only_authenticated_l2_encryption_network = server_only_authenticated_l2_encryption_network
        if operator_friendly_name is not None:
            self.operator_friendly_name = operator_friendly_name
        if domain_name_list is not None:
            self.domain_name_list = domain_name_list
        if default_operator_friendly_name is not None:
            self.default_operator_friendly_name = default_operator_friendly_name
        if default_operator_friendly_name_fr is not None:
            self.default_operator_friendly_name_fr = default_operator_friendly_name_fr
        ProfileDetails.__init__(self, *args, **kwargs)

    @property
    def model_type(self):
        """Gets the model_type of this PasspointOperatorProfile.  # noqa: E501


        :return: The model_type of this PasspointOperatorProfile.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this PasspointOperatorProfile.


        :param model_type: The model_type of this PasspointOperatorProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["PasspointOperatorProfile"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"  # noqa: E501
                .format(model_type, allowed_values)
            )

        self._model_type = model_type

    @property
    def server_only_authenticated_l2_encryption_network(self):
        """Gets the server_only_authenticated_l2_encryption_network of this PasspointOperatorProfile.  # noqa: E501

        OSEN  # noqa: E501

        :return: The server_only_authenticated_l2_encryption_network of this PasspointOperatorProfile.  # noqa: E501
        :rtype: bool
        """
        return self._server_only_authenticated_l2_encryption_network

    @server_only_authenticated_l2_encryption_network.setter
    def server_only_authenticated_l2_encryption_network(self, server_only_authenticated_l2_encryption_network):
        """Sets the server_only_authenticated_l2_encryption_network of this PasspointOperatorProfile.

        OSEN  # noqa: E501

        :param server_only_authenticated_l2_encryption_network: The server_only_authenticated_l2_encryption_network of this PasspointOperatorProfile.  # noqa: E501
        :type: bool
        """

        self._server_only_authenticated_l2_encryption_network = server_only_authenticated_l2_encryption_network

    @property
    def operator_friendly_name(self):
        """Gets the operator_friendly_name of this PasspointOperatorProfile.  # noqa: E501


        :return: The operator_friendly_name of this PasspointOperatorProfile.  # noqa: E501
        :rtype: list[PasspointDuple]
        """
        return self._operator_friendly_name

    @operator_friendly_name.setter
    def operator_friendly_name(self, operator_friendly_name):
        """Sets the operator_friendly_name of this PasspointOperatorProfile.


        :param operator_friendly_name: The operator_friendly_name of this PasspointOperatorProfile.  # noqa: E501
        :type: list[PasspointDuple]
        """

        self._operator_friendly_name = operator_friendly_name

    @property
    def domain_name_list(self):
        """Gets the domain_name_list of this PasspointOperatorProfile.  # noqa: E501


        :return: The domain_name_list of this PasspointOperatorProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._domain_name_list

    @domain_name_list.setter
    def domain_name_list(self, domain_name_list):
        """Sets the domain_name_list of this PasspointOperatorProfile.


        :param domain_name_list: The domain_name_list of this PasspointOperatorProfile.  # noqa: E501
        :type: list[str]
        """

        self._domain_name_list = domain_name_list

    @property
    def default_operator_friendly_name(self):
        """Gets the default_operator_friendly_name of this PasspointOperatorProfile.  # noqa: E501


        :return: The default_operator_friendly_name of this PasspointOperatorProfile.  # noqa: E501
        :rtype: str
        """
        return self._default_operator_friendly_name

    @default_operator_friendly_name.setter
    def default_operator_friendly_name(self, default_operator_friendly_name):
        """Sets the default_operator_friendly_name of this PasspointOperatorProfile.


        :param default_operator_friendly_name: The default_operator_friendly_name of this PasspointOperatorProfile.  # noqa: E501
        :type: str
        """

        self._default_operator_friendly_name = default_operator_friendly_name

    @property
    def default_operator_friendly_name_fr(self):
        """Gets the default_operator_friendly_name_fr of this PasspointOperatorProfile.  # noqa: E501


        :return: The default_operator_friendly_name_fr of this PasspointOperatorProfile.  # noqa: E501
        :rtype: str
        """
        return self._default_operator_friendly_name_fr

    @default_operator_friendly_name_fr.setter
    def default_operator_friendly_name_fr(self, default_operator_friendly_name_fr):
        """Sets the default_operator_friendly_name_fr of this PasspointOperatorProfile.


        :param default_operator_friendly_name_fr: The default_operator_friendly_name_fr of this PasspointOperatorProfile.  # noqa: E501
        :type: str
        """

        self._default_operator_friendly_name_fr = default_operator_friendly_name_fr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PasspointOperatorProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PasspointOperatorProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
