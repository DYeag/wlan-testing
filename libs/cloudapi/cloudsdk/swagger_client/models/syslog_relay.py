# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SyslogRelay(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'srv_host_ip': 'str',
        'srv_host_port': 'int',
        'severity': 'SyslogSeverityType'
    }

    attribute_map = {
        'enabled': 'enabled',
        'srv_host_ip': 'srvHostIp',
        'srv_host_port': 'srvHostPort',
        'severity': 'severity'
    }

    def __init__(self, enabled=None, srv_host_ip=None, srv_host_port=None, severity=None):  # noqa: E501
        """SyslogRelay - a model defined in Swagger"""  # noqa: E501
        self._enabled = None
        self._srv_host_ip = None
        self._srv_host_port = None
        self._severity = None
        self.discriminator = None
        if enabled is not None:
            self.enabled = enabled
        if srv_host_ip is not None:
            self.srv_host_ip = srv_host_ip
        if srv_host_port is not None:
            self.srv_host_port = srv_host_port
        if severity is not None:
            self.severity = severity

    @property
    def enabled(self):
        """Gets the enabled of this SyslogRelay.  # noqa: E501


        :return: The enabled of this SyslogRelay.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SyslogRelay.


        :param enabled: The enabled of this SyslogRelay.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def srv_host_ip(self):
        """Gets the srv_host_ip of this SyslogRelay.  # noqa: E501


        :return: The srv_host_ip of this SyslogRelay.  # noqa: E501
        :rtype: str
        """
        return self._srv_host_ip

    @srv_host_ip.setter
    def srv_host_ip(self, srv_host_ip):
        """Sets the srv_host_ip of this SyslogRelay.


        :param srv_host_ip: The srv_host_ip of this SyslogRelay.  # noqa: E501
        :type: str
        """

        self._srv_host_ip = srv_host_ip

    @property
    def srv_host_port(self):
        """Gets the srv_host_port of this SyslogRelay.  # noqa: E501


        :return: The srv_host_port of this SyslogRelay.  # noqa: E501
        :rtype: int
        """
        return self._srv_host_port

    @srv_host_port.setter
    def srv_host_port(self, srv_host_port):
        """Sets the srv_host_port of this SyslogRelay.


        :param srv_host_port: The srv_host_port of this SyslogRelay.  # noqa: E501
        :type: int
        """

        self._srv_host_port = srv_host_port

    @property
    def severity(self):
        """Gets the severity of this SyslogRelay.  # noqa: E501


        :return: The severity of this SyslogRelay.  # noqa: E501
        :rtype: SyslogSeverityType
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this SyslogRelay.


        :param severity: The severity of this SyslogRelay.  # noqa: E501
        :type: SyslogSeverityType
        """

        self._severity = severity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SyslogRelay, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SyslogRelay):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
