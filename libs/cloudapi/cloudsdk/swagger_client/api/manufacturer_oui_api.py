# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ManufacturerOUIApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_manufacturer_details_record(self, body, **kwargs):  # noqa: E501
        """Create new ManufacturerDetailsRecord  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_manufacturer_details_record(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ManufacturerDetailsRecord body: ManufacturerDetailsRecord info (required)
        :return: ManufacturerDetailsRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_manufacturer_details_record_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_manufacturer_details_record_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_manufacturer_details_record_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create new ManufacturerDetailsRecord  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_manufacturer_details_record_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ManufacturerDetailsRecord body: ManufacturerDetailsRecord info (required)
        :return: ManufacturerDetailsRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_manufacturer_details_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_manufacturer_details_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/manufacturer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ManufacturerDetailsRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_manufacturer_oui_details(self, body, **kwargs):  # noqa: E501
        """Create new ManufacturerOuiDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_manufacturer_oui_details(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ManufacturerOuiDetails body: ManufacturerOuiDetails info (required)
        :return: ManufacturerOuiDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_manufacturer_oui_details_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_manufacturer_oui_details_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_manufacturer_oui_details_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create new ManufacturerOuiDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_manufacturer_oui_details_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ManufacturerOuiDetails body: ManufacturerOuiDetails info (required)
        :return: ManufacturerOuiDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_manufacturer_oui_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_manufacturer_oui_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/manufacturer/oui', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ManufacturerOuiDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_manufacturer_details_record(self, id, **kwargs):  # noqa: E501
        """Delete ManufacturerDetailsRecord  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_manufacturer_details_record(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ManufacturerDetailsRecord id (required)
        :return: ManufacturerDetailsRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_manufacturer_details_record_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_manufacturer_details_record_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_manufacturer_details_record_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete ManufacturerDetailsRecord  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_manufacturer_details_record_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ManufacturerDetailsRecord id (required)
        :return: ManufacturerDetailsRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_manufacturer_details_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_manufacturer_details_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/manufacturer', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ManufacturerDetailsRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_manufacturer_oui_details(self, oui, **kwargs):  # noqa: E501
        """Delete ManufacturerOuiDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_manufacturer_oui_details(oui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str oui: ManufacturerOuiDetails oui (required)
        :return: ManufacturerOuiDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_manufacturer_oui_details_with_http_info(oui, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_manufacturer_oui_details_with_http_info(oui, **kwargs)  # noqa: E501
            return data

    def delete_manufacturer_oui_details_with_http_info(self, oui, **kwargs):  # noqa: E501
        """Delete ManufacturerOuiDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_manufacturer_oui_details_with_http_info(oui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str oui: ManufacturerOuiDetails oui (required)
        :return: ManufacturerOuiDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['oui']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_manufacturer_oui_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'oui' is set
        if ('oui' not in params or
                params['oui'] is None):
            raise ValueError("Missing the required parameter `oui` when calling `delete_manufacturer_oui_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'oui' in params:
            query_params.append(('oui', params['oui']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/manufacturer/oui', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ManufacturerOuiDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_alias_values_that_begin_with(self, prefix, max_results, **kwargs):  # noqa: E501
        """Get manufacturer aliases that begin with the given prefix  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alias_values_that_begin_with(prefix, max_results, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str prefix: prefix for the manufacturer alias (required)
        :param int max_results: max results to return, use -1 for no limit (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_alias_values_that_begin_with_with_http_info(prefix, max_results, **kwargs)  # noqa: E501
        else:
            (data) = self.get_alias_values_that_begin_with_with_http_info(prefix, max_results, **kwargs)  # noqa: E501
            return data

    def get_alias_values_that_begin_with_with_http_info(self, prefix, max_results, **kwargs):  # noqa: E501
        """Get manufacturer aliases that begin with the given prefix  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alias_values_that_begin_with_with_http_info(prefix, max_results, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str prefix: prefix for the manufacturer alias (required)
        :param int max_results: max results to return, use -1 for no limit (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prefix', 'max_results']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alias_values_that_begin_with" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'prefix' is set
        if ('prefix' not in params or
                params['prefix'] is None):
            raise ValueError("Missing the required parameter `prefix` when calling `get_alias_values_that_begin_with`")  # noqa: E501
        # verify the required parameter 'max_results' is set
        if ('max_results' not in params or
                params['max_results'] is None):
            raise ValueError("Missing the required parameter `max_results` when calling `get_alias_values_that_begin_with`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'prefix' in params:
            query_params.append(('prefix', params['prefix']))  # noqa: E501
        if 'max_results' in params:
            query_params.append(('maxResults', params['max_results']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/manufacturer/oui/alias', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_manufacturer_oui_details(self, **kwargs):  # noqa: E501
        """Get all ManufacturerOuiDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_manufacturer_oui_details(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ManufacturerOuiDetails]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_manufacturer_oui_details_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_manufacturer_oui_details_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_manufacturer_oui_details_with_http_info(self, **kwargs):  # noqa: E501
        """Get all ManufacturerOuiDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_manufacturer_oui_details_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ManufacturerOuiDetails]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_manufacturer_oui_details" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/manufacturer/oui/all', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ManufacturerOuiDetails]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_manufacturer_details_for_oui_list(self, oui_list, **kwargs):  # noqa: E501
        """Get ManufacturerOuiDetails for the list of OUIs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_manufacturer_details_for_oui_list(oui_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] oui_list: (required)
        :return: ManufacturerOuiDetailsPerOuiMap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_manufacturer_details_for_oui_list_with_http_info(oui_list, **kwargs)  # noqa: E501
        else:
            (data) = self.get_manufacturer_details_for_oui_list_with_http_info(oui_list, **kwargs)  # noqa: E501
            return data

    def get_manufacturer_details_for_oui_list_with_http_info(self, oui_list, **kwargs):  # noqa: E501
        """Get ManufacturerOuiDetails for the list of OUIs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_manufacturer_details_for_oui_list_with_http_info(oui_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] oui_list: (required)
        :return: ManufacturerOuiDetailsPerOuiMap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['oui_list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_manufacturer_details_for_oui_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'oui_list' is set
        if ('oui_list' not in params or
                params['oui_list'] is None):
            raise ValueError("Missing the required parameter `oui_list` when calling `get_manufacturer_details_for_oui_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'oui_list' in params:
            query_params.append(('ouiList', params['oui_list']))  # noqa: E501
            collection_formats['ouiList'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/manufacturer/oui/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ManufacturerOuiDetailsPerOuiMap',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_manufacturer_details_record(self, id, **kwargs):  # noqa: E501
        """Get ManufacturerDetailsRecord By id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_manufacturer_details_record(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ManufacturerDetailsRecord id (required)
        :return: ManufacturerDetailsRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_manufacturer_details_record_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_manufacturer_details_record_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_manufacturer_details_record_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get ManufacturerDetailsRecord By id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_manufacturer_details_record_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ManufacturerDetailsRecord id (required)
        :return: ManufacturerDetailsRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_manufacturer_details_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_manufacturer_details_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/manufacturer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ManufacturerDetailsRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_manufacturer_oui_details_by_oui(self, oui, **kwargs):  # noqa: E501
        """Get ManufacturerOuiDetails By oui  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_manufacturer_oui_details_by_oui(oui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str oui: ManufacturerOuiDetails oui (required)
        :return: ManufacturerOuiDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_manufacturer_oui_details_by_oui_with_http_info(oui, **kwargs)  # noqa: E501
        else:
            (data) = self.get_manufacturer_oui_details_by_oui_with_http_info(oui, **kwargs)  # noqa: E501
            return data

    def get_manufacturer_oui_details_by_oui_with_http_info(self, oui, **kwargs):  # noqa: E501
        """Get ManufacturerOuiDetails By oui  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_manufacturer_oui_details_by_oui_with_http_info(oui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str oui: ManufacturerOuiDetails oui (required)
        :return: ManufacturerOuiDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['oui']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_manufacturer_oui_details_by_oui" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'oui' is set
        if ('oui' not in params or
                params['oui'] is None):
            raise ValueError("Missing the required parameter `oui` when calling `get_manufacturer_oui_details_by_oui`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'oui' in params:
            query_params.append(('oui', params['oui']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/manufacturer/oui', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ManufacturerOuiDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_oui_list_for_manufacturer(self, manufacturer, exact_match, **kwargs):  # noqa: E501
        """Get Oui List for manufacturer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_oui_list_for_manufacturer(manufacturer, exact_match, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str manufacturer: Manufacturer name or alias (required)
        :param bool exact_match: Perform exact match (true) or prefix match (false) for the manufacturer name or alias (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_oui_list_for_manufacturer_with_http_info(manufacturer, exact_match, **kwargs)  # noqa: E501
        else:
            (data) = self.get_oui_list_for_manufacturer_with_http_info(manufacturer, exact_match, **kwargs)  # noqa: E501
            return data

    def get_oui_list_for_manufacturer_with_http_info(self, manufacturer, exact_match, **kwargs):  # noqa: E501
        """Get Oui List for manufacturer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_oui_list_for_manufacturer_with_http_info(manufacturer, exact_match, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str manufacturer: Manufacturer name or alias (required)
        :param bool exact_match: Perform exact match (true) or prefix match (false) for the manufacturer name or alias (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['manufacturer', 'exact_match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_oui_list_for_manufacturer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'manufacturer' is set
        if ('manufacturer' not in params or
                params['manufacturer'] is None):
            raise ValueError("Missing the required parameter `manufacturer` when calling `get_oui_list_for_manufacturer`")  # noqa: E501
        # verify the required parameter 'exact_match' is set
        if ('exact_match' not in params or
                params['exact_match'] is None):
            raise ValueError("Missing the required parameter `exact_match` when calling `get_oui_list_for_manufacturer`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'manufacturer' in params:
            query_params.append(('manufacturer', params['manufacturer']))  # noqa: E501
        if 'exact_match' in params:
            query_params.append(('exactMatch', params['exact_match']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/manufacturer/oui/forManufacturer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_manufacturer_details_record(self, body, **kwargs):  # noqa: E501
        """Update ManufacturerDetailsRecord  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_manufacturer_details_record(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ManufacturerDetailsRecord body: ManufacturerDetailsRecord info (required)
        :return: ManufacturerDetailsRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_manufacturer_details_record_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_manufacturer_details_record_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_manufacturer_details_record_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update ManufacturerDetailsRecord  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_manufacturer_details_record_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ManufacturerDetailsRecord body: ManufacturerDetailsRecord info (required)
        :return: ManufacturerDetailsRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_manufacturer_details_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_manufacturer_details_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/manufacturer', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ManufacturerDetailsRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_oui_alias(self, body, **kwargs):  # noqa: E501
        """Update alias for ManufacturerOuiDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_oui_alias(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ManufacturerOuiDetails body: ManufacturerOuiDetails info (required)
        :return: ManufacturerOuiDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_oui_alias_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_oui_alias_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_oui_alias_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update alias for ManufacturerOuiDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_oui_alias_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ManufacturerOuiDetails body: ManufacturerOuiDetails info (required)
        :return: ManufacturerOuiDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_oui_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_oui_alias`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/manufacturer/oui/alias', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ManufacturerOuiDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_oui_data_file(self, body, file_name, **kwargs):  # noqa: E501
        """Upload the gziped OUI DataFile, in the format that is published by IEEE. Latest sanitized IEEE OUI data file (oui.txt.gz) can be obtained from https://linuxnet.ca/ieee/oui/  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_oui_data_file(body, file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object body: Contents of gziped OUI DataFile, raw (required)
        :param str file_name: file name that is being uploaded (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_oui_data_file_with_http_info(body, file_name, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_oui_data_file_with_http_info(body, file_name, **kwargs)  # noqa: E501
            return data

    def upload_oui_data_file_with_http_info(self, body, file_name, **kwargs):  # noqa: E501
        """Upload the gziped OUI DataFile, in the format that is published by IEEE. Latest sanitized IEEE OUI data file (oui.txt.gz) can be obtained from https://linuxnet.ca/ieee/oui/  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_oui_data_file_with_http_info(body, file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object body: Contents of gziped OUI DataFile, raw (required)
        :param str file_name: file name that is being uploaded (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'file_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_oui_data_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `upload_oui_data_file`")  # noqa: E501
        # verify the required parameter 'file_name' is set
        if ('file_name' not in params or
                params['file_name'] is None):
            raise ValueError("Missing the required parameter `file_name` when calling `upload_oui_data_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/manufacturer/oui/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_oui_data_file_base64(self, body, file_name, **kwargs):  # noqa: E501
        """Upload the gziped OUI DataFile using base64 encoding, in the format that is published by IEEE. Latest sanitized IEEE OUI data file (oui.txt.gz) can be obtained from https://linuxnet.ca/ieee/oui/  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_oui_data_file_base64(body, file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: Contents of gziped OUI DataFile, base64-encoded (required)
        :param str file_name: file name that is being uploaded (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_oui_data_file_base64_with_http_info(body, file_name, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_oui_data_file_base64_with_http_info(body, file_name, **kwargs)  # noqa: E501
            return data

    def upload_oui_data_file_base64_with_http_info(self, body, file_name, **kwargs):  # noqa: E501
        """Upload the gziped OUI DataFile using base64 encoding, in the format that is published by IEEE. Latest sanitized IEEE OUI data file (oui.txt.gz) can be obtained from https://linuxnet.ca/ieee/oui/  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_oui_data_file_base64_with_http_info(body, file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: Contents of gziped OUI DataFile, base64-encoded (required)
        :param str file_name: file name that is being uploaded (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'file_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_oui_data_file_base64" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `upload_oui_data_file_base64`")  # noqa: E501
        # verify the required parameter 'file_name' is set
        if ('file_name' not in params or
                params['file_name'] is None):
            raise ValueError("Missing the required parameter `file_name` when calling `upload_oui_data_file_base64`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/manufacturer/oui/upload/base64', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
