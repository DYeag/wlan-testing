# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class EquipmentGatewayApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def request_ap_factory_reset(self, equipment_id, **kwargs):  # noqa: E501
        """Request factory reset for a particular equipment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_ap_factory_reset(equipment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int equipment_id: Equipment id for which the factory reset is being requested. (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.request_ap_factory_reset_with_http_info(equipment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.request_ap_factory_reset_with_http_info(equipment_id, **kwargs)  # noqa: E501
            return data

    def request_ap_factory_reset_with_http_info(self, equipment_id, **kwargs):  # noqa: E501
        """Request factory reset for a particular equipment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_ap_factory_reset_with_http_info(equipment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int equipment_id: Equipment id for which the factory reset is being requested. (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['equipment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_ap_factory_reset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'equipment_id' is set
        if ('equipment_id' not in params or
                params['equipment_id'] is None):
            raise ValueError("Missing the required parameter `equipment_id` when calling `request_ap_factory_reset`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'equipment_id' in params:
            query_params.append(('equipmentId', params['equipment_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/equipmentGateway/requestApFactoryReset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def request_ap_reboot(self, equipment_id, **kwargs):  # noqa: E501
        """Request reboot for a particular equipment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_ap_reboot(equipment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int equipment_id: Equipment id for which the reboot is being requested. (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.request_ap_reboot_with_http_info(equipment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.request_ap_reboot_with_http_info(equipment_id, **kwargs)  # noqa: E501
            return data

    def request_ap_reboot_with_http_info(self, equipment_id, **kwargs):  # noqa: E501
        """Request reboot for a particular equipment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_ap_reboot_with_http_info(equipment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int equipment_id: Equipment id for which the reboot is being requested. (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['equipment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_ap_reboot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'equipment_id' is set
        if ('equipment_id' not in params or
                params['equipment_id'] is None):
            raise ValueError("Missing the required parameter `equipment_id` when calling `request_ap_reboot`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'equipment_id' in params:
            query_params.append(('equipmentId', params['equipment_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/equipmentGateway/requestApReboot', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def request_ap_switch_software_bank(self, equipment_id, **kwargs):  # noqa: E501
        """Request switch of active/inactive sw bank for a particular equipment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_ap_switch_software_bank(equipment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int equipment_id: Equipment id for which the switch is being requested. (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.request_ap_switch_software_bank_with_http_info(equipment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.request_ap_switch_software_bank_with_http_info(equipment_id, **kwargs)  # noqa: E501
            return data

    def request_ap_switch_software_bank_with_http_info(self, equipment_id, **kwargs):  # noqa: E501
        """Request switch of active/inactive sw bank for a particular equipment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_ap_switch_software_bank_with_http_info(equipment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int equipment_id: Equipment id for which the switch is being requested. (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['equipment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_ap_switch_software_bank" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'equipment_id' is set
        if ('equipment_id' not in params or
                params['equipment_id'] is None):
            raise ValueError("Missing the required parameter `equipment_id` when calling `request_ap_switch_software_bank`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'equipment_id' in params:
            query_params.append(('equipmentId', params['equipment_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/equipmentGateway/requestApSwitchSoftwareBank', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def request_channel_change(self, body, equipment_id, **kwargs):  # noqa: E501
        """Request change of primary and/or backup channels for given frequency bands.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_channel_change(body, equipment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RadioChannelChangeSettings body: RadioChannelChangeSettings info (required)
        :param int equipment_id: Equipment id for which the channel changes are being performed. (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.request_channel_change_with_http_info(body, equipment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.request_channel_change_with_http_info(body, equipment_id, **kwargs)  # noqa: E501
            return data

    def request_channel_change_with_http_info(self, body, equipment_id, **kwargs):  # noqa: E501
        """Request change of primary and/or backup channels for given frequency bands.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_channel_change_with_http_info(body, equipment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RadioChannelChangeSettings body: RadioChannelChangeSettings info (required)
        :param int equipment_id: Equipment id for which the channel changes are being performed. (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'equipment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_channel_change" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `request_channel_change`")  # noqa: E501
        # verify the required parameter 'equipment_id' is set
        if ('equipment_id' not in params or
                params['equipment_id'] is None):
            raise ValueError("Missing the required parameter `equipment_id` when calling `request_channel_change`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'equipment_id' in params:
            query_params.append(('equipmentId', params['equipment_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/equipmentGateway/requestChannelChange', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def request_firmware_update(self, equipment_id, firmware_version_id, **kwargs):  # noqa: E501
        """Request firmware update for a particular equipment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_firmware_update(equipment_id, firmware_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int equipment_id: Equipment id for which the firmware update is being requested. (required)
        :param int firmware_version_id: Id of the firmware version object. (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.request_firmware_update_with_http_info(equipment_id, firmware_version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.request_firmware_update_with_http_info(equipment_id, firmware_version_id, **kwargs)  # noqa: E501
            return data

    def request_firmware_update_with_http_info(self, equipment_id, firmware_version_id, **kwargs):  # noqa: E501
        """Request firmware update for a particular equipment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_firmware_update_with_http_info(equipment_id, firmware_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int equipment_id: Equipment id for which the firmware update is being requested. (required)
        :param int firmware_version_id: Id of the firmware version object. (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['equipment_id', 'firmware_version_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_firmware_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'equipment_id' is set
        if ('equipment_id' not in params or
                params['equipment_id'] is None):
            raise ValueError("Missing the required parameter `equipment_id` when calling `request_firmware_update`")  # noqa: E501
        # verify the required parameter 'firmware_version_id' is set
        if ('firmware_version_id' not in params or
                params['firmware_version_id'] is None):
            raise ValueError("Missing the required parameter `firmware_version_id` when calling `request_firmware_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'equipment_id' in params:
            query_params.append(('equipmentId', params['equipment_id']))  # noqa: E501
        if 'firmware_version_id' in params:
            query_params.append(('firmwareVersionId', params['firmware_version_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/equipmentGateway/requestFirmwareUpdate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
