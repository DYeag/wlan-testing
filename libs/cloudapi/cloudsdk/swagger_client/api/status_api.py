# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class StatusApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_status_by_customer_equipment(self, customer_id, equipment_id, **kwargs):  # noqa: E501
        """Get all Status objects for a given customer equipment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_status_by_customer_equipment(customer_id, equipment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param int equipment_id: Equipment id (required)
        :return: list[Status]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_status_by_customer_equipment_with_http_info(customer_id, equipment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_status_by_customer_equipment_with_http_info(customer_id, equipment_id, **kwargs)  # noqa: E501
            return data

    def get_status_by_customer_equipment_with_http_info(self, customer_id, equipment_id, **kwargs):  # noqa: E501
        """Get all Status objects for a given customer equipment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_status_by_customer_equipment_with_http_info(customer_id, equipment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param int equipment_id: Equipment id (required)
        :return: list[Status]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'equipment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_status_by_customer_equipment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `get_status_by_customer_equipment`")  # noqa: E501
        # verify the required parameter 'equipment_id' is set
        if ('equipment_id' not in params or
                params['equipment_id'] is None):
            raise ValueError("Missing the required parameter `equipment_id` when calling `get_status_by_customer_equipment`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501
        if 'equipment_id' in params:
            query_params.append(('equipmentId', params['equipment_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/status/forEquipment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Status]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_status_by_customer_equipment_with_filter(self, customer_id, equipment_ids, **kwargs):  # noqa: E501
        """Get Status objects for a given customer equipment ids and status data types.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_status_by_customer_equipment_with_filter(customer_id, equipment_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param list[int] equipment_ids: Set of equipment ids. Must not be empty or null. (required)
        :param list[StatusDataType] status_data_types: Set of status data types. Empty or null means retrieve all data types.
        :return: list[Status]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_status_by_customer_equipment_with_filter_with_http_info(customer_id, equipment_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.get_status_by_customer_equipment_with_filter_with_http_info(customer_id, equipment_ids, **kwargs)  # noqa: E501
            return data

    def get_status_by_customer_equipment_with_filter_with_http_info(self, customer_id, equipment_ids, **kwargs):  # noqa: E501
        """Get Status objects for a given customer equipment ids and status data types.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_status_by_customer_equipment_with_filter_with_http_info(customer_id, equipment_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param list[int] equipment_ids: Set of equipment ids. Must not be empty or null. (required)
        :param list[StatusDataType] status_data_types: Set of status data types. Empty or null means retrieve all data types.
        :return: list[Status]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'equipment_ids', 'status_data_types']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_status_by_customer_equipment_with_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `get_status_by_customer_equipment_with_filter`")  # noqa: E501
        # verify the required parameter 'equipment_ids' is set
        if ('equipment_ids' not in params or
                params['equipment_ids'] is None):
            raise ValueError("Missing the required parameter `equipment_ids` when calling `get_status_by_customer_equipment_with_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501
        if 'equipment_ids' in params:
            query_params.append(('equipmentIds', params['equipment_ids']))  # noqa: E501
            collection_formats['equipmentIds'] = 'multi'  # noqa: E501
        if 'status_data_types' in params:
            query_params.append(('statusDataTypes', params['status_data_types']))  # noqa: E501
            collection_formats['statusDataTypes'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/status/forEquipmentWithFilter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Status]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_status_by_customer_id(self, customer_id, pagination_context, **kwargs):  # noqa: E501
        """Get all Status objects By customerId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_status_by_customer_id(customer_id, pagination_context, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param PaginationContextStatus pagination_context: pagination context (required)
        :param list[SortColumnsStatus] sort_by: sort options
        :return: PaginationResponseStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_status_by_customer_id_with_http_info(customer_id, pagination_context, **kwargs)  # noqa: E501
        else:
            (data) = self.get_status_by_customer_id_with_http_info(customer_id, pagination_context, **kwargs)  # noqa: E501
            return data

    def get_status_by_customer_id_with_http_info(self, customer_id, pagination_context, **kwargs):  # noqa: E501
        """Get all Status objects By customerId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_status_by_customer_id_with_http_info(customer_id, pagination_context, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param PaginationContextStatus pagination_context: pagination context (required)
        :param list[SortColumnsStatus] sort_by: sort options
        :return: PaginationResponseStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'pagination_context', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_status_by_customer_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `get_status_by_customer_id`")  # noqa: E501
        # verify the required parameter 'pagination_context' is set
        if ('pagination_context' not in params or
                params['pagination_context'] is None):
            raise ValueError("Missing the required parameter `pagination_context` when calling `get_status_by_customer_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
            collection_formats['sortBy'] = 'multi'  # noqa: E501
        if 'pagination_context' in params:
            query_params.append(('paginationContext', params['pagination_context']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/status/forCustomer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginationResponseStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_status_by_customer_with_filter(self, customer_id, pagination_context, **kwargs):  # noqa: E501
        """Get list of Statuses for customerId, set of equipment ids, and set of status data types.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_status_by_customer_with_filter(customer_id, pagination_context, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param PaginationContextStatus pagination_context: pagination context (required)
        :param list[int] equipment_ids: Set of equipment ids. Empty or null means retrieve all equipment for the customer.
        :param list[StatusDataType] status_data_types: Set of status data types. Empty or null means retrieve all data types.
        :param list[SortColumnsStatus] sort_by: sort options
        :return: PaginationResponseStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_status_by_customer_with_filter_with_http_info(customer_id, pagination_context, **kwargs)  # noqa: E501
        else:
            (data) = self.get_status_by_customer_with_filter_with_http_info(customer_id, pagination_context, **kwargs)  # noqa: E501
            return data

    def get_status_by_customer_with_filter_with_http_info(self, customer_id, pagination_context, **kwargs):  # noqa: E501
        """Get list of Statuses for customerId, set of equipment ids, and set of status data types.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_status_by_customer_with_filter_with_http_info(customer_id, pagination_context, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param PaginationContextStatus pagination_context: pagination context (required)
        :param list[int] equipment_ids: Set of equipment ids. Empty or null means retrieve all equipment for the customer.
        :param list[StatusDataType] status_data_types: Set of status data types. Empty or null means retrieve all data types.
        :param list[SortColumnsStatus] sort_by: sort options
        :return: PaginationResponseStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'pagination_context', 'equipment_ids', 'status_data_types', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_status_by_customer_with_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `get_status_by_customer_with_filter`")  # noqa: E501
        # verify the required parameter 'pagination_context' is set
        if ('pagination_context' not in params or
                params['pagination_context'] is None):
            raise ValueError("Missing the required parameter `pagination_context` when calling `get_status_by_customer_with_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501
        if 'equipment_ids' in params:
            query_params.append(('equipmentIds', params['equipment_ids']))  # noqa: E501
            collection_formats['equipmentIds'] = 'multi'  # noqa: E501
        if 'status_data_types' in params:
            query_params.append(('statusDataTypes', params['status_data_types']))  # noqa: E501
            collection_formats['statusDataTypes'] = 'multi'  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
            collection_formats['sortBy'] = 'multi'  # noqa: E501
        if 'pagination_context' in params:
            query_params.append(('paginationContext', params['pagination_context']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/status/forCustomerWithFilter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginationResponseStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
