# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FirmwareManagementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_customer_firmware_track_record(self, body, **kwargs):  # noqa: E501
        """Create new CustomerFirmwareTrackRecord  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_customer_firmware_track_record(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomerFirmwareTrackRecord body: CustomerFirmwareTrackRecord info (required)
        :return: CustomerFirmwareTrackRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_customer_firmware_track_record_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_customer_firmware_track_record_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_customer_firmware_track_record_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create new CustomerFirmwareTrackRecord  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_customer_firmware_track_record_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomerFirmwareTrackRecord body: CustomerFirmwareTrackRecord info (required)
        :return: CustomerFirmwareTrackRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_customer_firmware_track_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_customer_firmware_track_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/firmware/customerTrack', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomerFirmwareTrackRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_firmware_track_record(self, body, **kwargs):  # noqa: E501
        """Create new FirmwareTrackRecord  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_firmware_track_record(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FirmwareTrackRecord body: FirmwareTrackRecord info (required)
        :return: FirmwareTrackRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_firmware_track_record_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_firmware_track_record_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_firmware_track_record_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create new FirmwareTrackRecord  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_firmware_track_record_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FirmwareTrackRecord body: FirmwareTrackRecord info (required)
        :return: FirmwareTrackRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_firmware_track_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_firmware_track_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/firmware/track', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareTrackRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_firmware_version(self, body, **kwargs):  # noqa: E501
        """Create new FirmwareVersion  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_firmware_version(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FirmwareVersion body: FirmwareVersion info (required)
        :return: FirmwareVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_firmware_version_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_firmware_version_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_firmware_version_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create new FirmwareVersion  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_firmware_version_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FirmwareVersion body: FirmwareVersion info (required)
        :return: FirmwareVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_firmware_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_firmware_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/firmware/version', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareVersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_customer_firmware_track_record(self, customer_id, **kwargs):  # noqa: E501
        """Delete CustomerFirmwareTrackRecord  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_customer_firmware_track_record(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :return: CustomerFirmwareTrackRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_customer_firmware_track_record_with_http_info(customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_customer_firmware_track_record_with_http_info(customer_id, **kwargs)  # noqa: E501
            return data

    def delete_customer_firmware_track_record_with_http_info(self, customer_id, **kwargs):  # noqa: E501
        """Delete CustomerFirmwareTrackRecord  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_customer_firmware_track_record_with_http_info(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :return: CustomerFirmwareTrackRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_customer_firmware_track_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `delete_customer_firmware_track_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/firmware/customerTrack', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomerFirmwareTrackRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_firmware_track_assignment(self, firmware_track_id, firmware_version_id, **kwargs):  # noqa: E501
        """Delete FirmwareTrackAssignment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_firmware_track_assignment(firmware_track_id, firmware_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int firmware_track_id: firmware track id (required)
        :param int firmware_version_id: firmware version id (required)
        :return: FirmwareTrackAssignmentDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_firmware_track_assignment_with_http_info(firmware_track_id, firmware_version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_firmware_track_assignment_with_http_info(firmware_track_id, firmware_version_id, **kwargs)  # noqa: E501
            return data

    def delete_firmware_track_assignment_with_http_info(self, firmware_track_id, firmware_version_id, **kwargs):  # noqa: E501
        """Delete FirmwareTrackAssignment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_firmware_track_assignment_with_http_info(firmware_track_id, firmware_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int firmware_track_id: firmware track id (required)
        :param int firmware_version_id: firmware version id (required)
        :return: FirmwareTrackAssignmentDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['firmware_track_id', 'firmware_version_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_firmware_track_assignment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'firmware_track_id' is set
        if ('firmware_track_id' not in params or
                params['firmware_track_id'] is None):
            raise ValueError("Missing the required parameter `firmware_track_id` when calling `delete_firmware_track_assignment`")  # noqa: E501
        # verify the required parameter 'firmware_version_id' is set
        if ('firmware_version_id' not in params or
                params['firmware_version_id'] is None):
            raise ValueError("Missing the required parameter `firmware_version_id` when calling `delete_firmware_track_assignment`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'firmware_track_id' in params:
            query_params.append(('firmwareTrackId', params['firmware_track_id']))  # noqa: E501
        if 'firmware_version_id' in params:
            query_params.append(('firmwareVersionId', params['firmware_version_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/firmware/trackAssignment', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareTrackAssignmentDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_firmware_track_record(self, firmware_track_id, **kwargs):  # noqa: E501
        """Delete FirmwareTrackRecord  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_firmware_track_record(firmware_track_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int firmware_track_id: firmware track id (required)
        :return: FirmwareTrackRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_firmware_track_record_with_http_info(firmware_track_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_firmware_track_record_with_http_info(firmware_track_id, **kwargs)  # noqa: E501
            return data

    def delete_firmware_track_record_with_http_info(self, firmware_track_id, **kwargs):  # noqa: E501
        """Delete FirmwareTrackRecord  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_firmware_track_record_with_http_info(firmware_track_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int firmware_track_id: firmware track id (required)
        :return: FirmwareTrackRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['firmware_track_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_firmware_track_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'firmware_track_id' is set
        if ('firmware_track_id' not in params or
                params['firmware_track_id'] is None):
            raise ValueError("Missing the required parameter `firmware_track_id` when calling `delete_firmware_track_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'firmware_track_id' in params:
            query_params.append(('firmwareTrackId', params['firmware_track_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/firmware/track', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareTrackRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_firmware_version(self, firmware_version_id, **kwargs):  # noqa: E501
        """Delete FirmwareVersion  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_firmware_version(firmware_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int firmware_version_id: firmwareVersion id (required)
        :return: FirmwareVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_firmware_version_with_http_info(firmware_version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_firmware_version_with_http_info(firmware_version_id, **kwargs)  # noqa: E501
            return data

    def delete_firmware_version_with_http_info(self, firmware_version_id, **kwargs):  # noqa: E501
        """Delete FirmwareVersion  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_firmware_version_with_http_info(firmware_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int firmware_version_id: firmwareVersion id (required)
        :return: FirmwareVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['firmware_version_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_firmware_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'firmware_version_id' is set
        if ('firmware_version_id' not in params or
                params['firmware_version_id'] is None):
            raise ValueError("Missing the required parameter `firmware_version_id` when calling `delete_firmware_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'firmware_version_id' in params:
            query_params.append(('firmwareVersionId', params['firmware_version_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/firmware/version', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareVersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_customer_firmware_track_record(self, customer_id, **kwargs):  # noqa: E501
        """Get CustomerFirmwareTrackRecord By customerId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customer_firmware_track_record(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :return: CustomerFirmwareTrackRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_customer_firmware_track_record_with_http_info(customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_customer_firmware_track_record_with_http_info(customer_id, **kwargs)  # noqa: E501
            return data

    def get_customer_firmware_track_record_with_http_info(self, customer_id, **kwargs):  # noqa: E501
        """Get CustomerFirmwareTrackRecord By customerId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customer_firmware_track_record_with_http_info(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :return: CustomerFirmwareTrackRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_customer_firmware_track_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `get_customer_firmware_track_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/firmware/customerTrack', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomerFirmwareTrackRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_default_customer_track_setting(self, **kwargs):  # noqa: E501
        """Get default settings for handling automatic firmware upgrades  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_default_customer_track_setting(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CustomerFirmwareTrackSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_default_customer_track_setting_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_default_customer_track_setting_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_default_customer_track_setting_with_http_info(self, **kwargs):  # noqa: E501
        """Get default settings for handling automatic firmware upgrades  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_default_customer_track_setting_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CustomerFirmwareTrackSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_default_customer_track_setting" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/firmware/customerTrack/default', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomerFirmwareTrackSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_firmware_model_ids_by_equipment_type(self, equipment_type, **kwargs):  # noqa: E501
        """Get equipment models from all known firmware versions filtered by equipmentType  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_model_ids_by_equipment_type(equipment_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EquipmentType equipment_type: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_firmware_model_ids_by_equipment_type_with_http_info(equipment_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_firmware_model_ids_by_equipment_type_with_http_info(equipment_type, **kwargs)  # noqa: E501
            return data

    def get_firmware_model_ids_by_equipment_type_with_http_info(self, equipment_type, **kwargs):  # noqa: E501
        """Get equipment models from all known firmware versions filtered by equipmentType  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_model_ids_by_equipment_type_with_http_info(equipment_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EquipmentType equipment_type: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['equipment_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_firmware_model_ids_by_equipment_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'equipment_type' is set
        if ('equipment_type' not in params or
                params['equipment_type'] is None):
            raise ValueError("Missing the required parameter `equipment_type` when calling `get_firmware_model_ids_by_equipment_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'equipment_type' in params:
            query_params.append(('equipmentType', params['equipment_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/firmware/model/byEquipmentType', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_firmware_track_assignment_details(self, firmware_track_name, **kwargs):  # noqa: E501
        """Get FirmwareTrackAssignmentDetails for a given firmware track name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_track_assignment_details(firmware_track_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str firmware_track_name: firmware track name (required)
        :return: list[FirmwareTrackAssignmentDetails]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_firmware_track_assignment_details_with_http_info(firmware_track_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_firmware_track_assignment_details_with_http_info(firmware_track_name, **kwargs)  # noqa: E501
            return data

    def get_firmware_track_assignment_details_with_http_info(self, firmware_track_name, **kwargs):  # noqa: E501
        """Get FirmwareTrackAssignmentDetails for a given firmware track name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_track_assignment_details_with_http_info(firmware_track_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str firmware_track_name: firmware track name (required)
        :return: list[FirmwareTrackAssignmentDetails]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['firmware_track_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_firmware_track_assignment_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'firmware_track_name' is set
        if ('firmware_track_name' not in params or
                params['firmware_track_name'] is None):
            raise ValueError("Missing the required parameter `firmware_track_name` when calling `get_firmware_track_assignment_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'firmware_track_name' in params:
            query_params.append(('firmwareTrackName', params['firmware_track_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/firmware/trackAssignment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FirmwareTrackAssignmentDetails]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_firmware_track_record(self, firmware_track_id, **kwargs):  # noqa: E501
        """Get FirmwareTrackRecord By Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_track_record(firmware_track_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int firmware_track_id: firmware track id (required)
        :return: FirmwareTrackRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_firmware_track_record_with_http_info(firmware_track_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_firmware_track_record_with_http_info(firmware_track_id, **kwargs)  # noqa: E501
            return data

    def get_firmware_track_record_with_http_info(self, firmware_track_id, **kwargs):  # noqa: E501
        """Get FirmwareTrackRecord By Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_track_record_with_http_info(firmware_track_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int firmware_track_id: firmware track id (required)
        :return: FirmwareTrackRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['firmware_track_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_firmware_track_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'firmware_track_id' is set
        if ('firmware_track_id' not in params or
                params['firmware_track_id'] is None):
            raise ValueError("Missing the required parameter `firmware_track_id` when calling `get_firmware_track_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'firmware_track_id' in params:
            query_params.append(('firmwareTrackId', params['firmware_track_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/firmware/track', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareTrackRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_firmware_track_record_by_name(self, firmware_track_name, **kwargs):  # noqa: E501
        """Get FirmwareTrackRecord By name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_track_record_by_name(firmware_track_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str firmware_track_name: firmware track name (required)
        :return: FirmwareTrackRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_firmware_track_record_by_name_with_http_info(firmware_track_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_firmware_track_record_by_name_with_http_info(firmware_track_name, **kwargs)  # noqa: E501
            return data

    def get_firmware_track_record_by_name_with_http_info(self, firmware_track_name, **kwargs):  # noqa: E501
        """Get FirmwareTrackRecord By name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_track_record_by_name_with_http_info(firmware_track_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str firmware_track_name: firmware track name (required)
        :return: FirmwareTrackRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['firmware_track_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_firmware_track_record_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'firmware_track_name' is set
        if ('firmware_track_name' not in params or
                params['firmware_track_name'] is None):
            raise ValueError("Missing the required parameter `firmware_track_name` when calling `get_firmware_track_record_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'firmware_track_name' in params:
            query_params.append(('firmwareTrackName', params['firmware_track_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/firmware/track/byName', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareTrackRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_firmware_version(self, firmware_version_id, **kwargs):  # noqa: E501
        """Get FirmwareVersion By Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_version(firmware_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int firmware_version_id: firmwareVersion id (required)
        :return: FirmwareVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_firmware_version_with_http_info(firmware_version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_firmware_version_with_http_info(firmware_version_id, **kwargs)  # noqa: E501
            return data

    def get_firmware_version_with_http_info(self, firmware_version_id, **kwargs):  # noqa: E501
        """Get FirmwareVersion By Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_version_with_http_info(firmware_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int firmware_version_id: firmwareVersion id (required)
        :return: FirmwareVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['firmware_version_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_firmware_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'firmware_version_id' is set
        if ('firmware_version_id' not in params or
                params['firmware_version_id'] is None):
            raise ValueError("Missing the required parameter `firmware_version_id` when calling `get_firmware_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'firmware_version_id' in params:
            query_params.append(('firmwareVersionId', params['firmware_version_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/firmware/version', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareVersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_firmware_version_by_equipment_type(self, equipment_type, **kwargs):  # noqa: E501
        """Get FirmwareVersions filtered by equipmentType and optional equipment model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_version_by_equipment_type(equipment_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EquipmentType equipment_type: (required)
        :param str model_id: optional filter by equipment model, if null - then firmware versions for all the equipment models are returned
        :return: list[FirmwareVersion]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_firmware_version_by_equipment_type_with_http_info(equipment_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_firmware_version_by_equipment_type_with_http_info(equipment_type, **kwargs)  # noqa: E501
            return data

    def get_firmware_version_by_equipment_type_with_http_info(self, equipment_type, **kwargs):  # noqa: E501
        """Get FirmwareVersions filtered by equipmentType and optional equipment model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_version_by_equipment_type_with_http_info(equipment_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EquipmentType equipment_type: (required)
        :param str model_id: optional filter by equipment model, if null - then firmware versions for all the equipment models are returned
        :return: list[FirmwareVersion]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['equipment_type', 'model_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_firmware_version_by_equipment_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'equipment_type' is set
        if ('equipment_type' not in params or
                params['equipment_type'] is None):
            raise ValueError("Missing the required parameter `equipment_type` when calling `get_firmware_version_by_equipment_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'equipment_type' in params:
            query_params.append(('equipmentType', params['equipment_type']))  # noqa: E501
        if 'model_id' in params:
            query_params.append(('modelId', params['model_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/firmware/version/byEquipmentType', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FirmwareVersion]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_firmware_version_by_name(self, firmware_version_name, **kwargs):  # noqa: E501
        """Get FirmwareVersion By name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_version_by_name(firmware_version_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str firmware_version_name: firmwareVersion name (required)
        :return: FirmwareVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_firmware_version_by_name_with_http_info(firmware_version_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_firmware_version_by_name_with_http_info(firmware_version_name, **kwargs)  # noqa: E501
            return data

    def get_firmware_version_by_name_with_http_info(self, firmware_version_name, **kwargs):  # noqa: E501
        """Get FirmwareVersion By name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_firmware_version_by_name_with_http_info(firmware_version_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str firmware_version_name: firmwareVersion name (required)
        :return: FirmwareVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['firmware_version_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_firmware_version_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'firmware_version_name' is set
        if ('firmware_version_name' not in params or
                params['firmware_version_name'] is None):
            raise ValueError("Missing the required parameter `firmware_version_name` when calling `get_firmware_version_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'firmware_version_name' in params:
            query_params.append(('firmwareVersionName', params['firmware_version_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/firmware/version/byName', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareVersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_customer_firmware_track_record(self, body, **kwargs):  # noqa: E501
        """Update CustomerFirmwareTrackRecord  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_customer_firmware_track_record(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomerFirmwareTrackRecord body: CustomerFirmwareTrackRecord info (required)
        :return: CustomerFirmwareTrackRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_customer_firmware_track_record_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_customer_firmware_track_record_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_customer_firmware_track_record_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update CustomerFirmwareTrackRecord  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_customer_firmware_track_record_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomerFirmwareTrackRecord body: CustomerFirmwareTrackRecord info (required)
        :return: CustomerFirmwareTrackRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_customer_firmware_track_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_customer_firmware_track_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/firmware/customerTrack', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomerFirmwareTrackRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_firmware_track_assignment_details(self, body, **kwargs):  # noqa: E501
        """Update FirmwareTrackAssignmentDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_firmware_track_assignment_details(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FirmwareTrackAssignmentDetails body: FirmwareTrackAssignmentDetails info (required)
        :return: FirmwareTrackAssignmentDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_firmware_track_assignment_details_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_firmware_track_assignment_details_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_firmware_track_assignment_details_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update FirmwareTrackAssignmentDetails  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_firmware_track_assignment_details_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FirmwareTrackAssignmentDetails body: FirmwareTrackAssignmentDetails info (required)
        :return: FirmwareTrackAssignmentDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_firmware_track_assignment_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_firmware_track_assignment_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/firmware/trackAssignment', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareTrackAssignmentDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_firmware_track_record(self, body, **kwargs):  # noqa: E501
        """Update FirmwareTrackRecord  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_firmware_track_record(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FirmwareTrackRecord body: FirmwareTrackRecord info (required)
        :return: FirmwareTrackRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_firmware_track_record_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_firmware_track_record_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_firmware_track_record_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update FirmwareTrackRecord  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_firmware_track_record_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FirmwareTrackRecord body: FirmwareTrackRecord info (required)
        :return: FirmwareTrackRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_firmware_track_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_firmware_track_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/firmware/track', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareTrackRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_firmware_version(self, body, **kwargs):  # noqa: E501
        """Update FirmwareVersion  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_firmware_version(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FirmwareVersion body: FirmwareVersion info (required)
        :return: FirmwareVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_firmware_version_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_firmware_version_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_firmware_version_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update FirmwareVersion  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_firmware_version_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FirmwareVersion body: FirmwareVersion info (required)
        :return: FirmwareVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_firmware_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_firmware_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/firmware/version', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirmwareVersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
