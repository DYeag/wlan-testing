# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ProfileApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_profile(self, body, **kwargs):  # noqa: E501
        """Create new Profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_profile(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Profile body: profile info (required)
        :return: Profile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_profile_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_profile_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_profile_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create new Profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_profile_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Profile body: profile info (required)
        :return: Profile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/profile', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Profile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_profile(self, profile_id, **kwargs):  # noqa: E501
        """Delete Profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_profile(profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int profile_id: profile id (required)
        :return: Profile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_profile_with_http_info(profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_profile_with_http_info(profile_id, **kwargs)  # noqa: E501
            return data

    def delete_profile_with_http_info(self, profile_id, **kwargs):  # noqa: E501
        """Delete Profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_profile_with_http_info(profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int profile_id: profile id (required)
        :return: Profile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_id' is set
        if ('profile_id' not in params or
                params['profile_id'] is None):
            raise ValueError("Missing the required parameter `profile_id` when calling `delete_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'profile_id' in params:
            query_params.append(('profileId', params['profile_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/profile', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Profile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_counts_of_equipment_that_use_profiles(self, profile_id_set, **kwargs):  # noqa: E501
        """Get counts of equipment that use specified profiles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_counts_of_equipment_that_use_profiles(profile_id_set, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] profile_id_set: set of profile ids (required)
        :return: list[PairLongLong]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_counts_of_equipment_that_use_profiles_with_http_info(profile_id_set, **kwargs)  # noqa: E501
        else:
            (data) = self.get_counts_of_equipment_that_use_profiles_with_http_info(profile_id_set, **kwargs)  # noqa: E501
            return data

    def get_counts_of_equipment_that_use_profiles_with_http_info(self, profile_id_set, **kwargs):  # noqa: E501
        """Get counts of equipment that use specified profiles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_counts_of_equipment_that_use_profiles_with_http_info(profile_id_set, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] profile_id_set: set of profile ids (required)
        :return: list[PairLongLong]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_id_set']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_counts_of_equipment_that_use_profiles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_id_set' is set
        if ('profile_id_set' not in params or
                params['profile_id_set'] is None):
            raise ValueError("Missing the required parameter `profile_id_set` when calling `get_counts_of_equipment_that_use_profiles`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'profile_id_set' in params:
            query_params.append(('profileIdSet', params['profile_id_set']))  # noqa: E501
            collection_formats['profileIdSet'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/profile/equipmentCounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PairLongLong]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_profile_by_id(self, profile_id, **kwargs):  # noqa: E501
        """Get Profile By Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_profile_by_id(profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int profile_id: profile id (required)
        :return: Profile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_profile_by_id_with_http_info(profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_profile_by_id_with_http_info(profile_id, **kwargs)  # noqa: E501
            return data

    def get_profile_by_id_with_http_info(self, profile_id, **kwargs):  # noqa: E501
        """Get Profile By Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_profile_by_id_with_http_info(profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int profile_id: profile id (required)
        :return: Profile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_profile_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_id' is set
        if ('profile_id' not in params or
                params['profile_id'] is None):
            raise ValueError("Missing the required parameter `profile_id` when calling `get_profile_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'profile_id' in params:
            query_params.append(('profileId', params['profile_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/profile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Profile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_profile_with_children(self, profile_id, **kwargs):  # noqa: E501
        """Get Profile and all its associated children  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_profile_with_children(profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int profile_id: (required)
        :return: list[Profile]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_profile_with_children_with_http_info(profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_profile_with_children_with_http_info(profile_id, **kwargs)  # noqa: E501
            return data

    def get_profile_with_children_with_http_info(self, profile_id, **kwargs):  # noqa: E501
        """Get Profile and all its associated children  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_profile_with_children_with_http_info(profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int profile_id: (required)
        :return: list[Profile]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_profile_with_children" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_id' is set
        if ('profile_id' not in params or
                params['profile_id'] is None):
            raise ValueError("Missing the required parameter `profile_id` when calling `get_profile_with_children`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'profile_id' in params:
            query_params.append(('profileId', params['profile_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/profile/withChildren', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Profile]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_profiles_by_customer_id(self, customer_id, pagination_context, **kwargs):  # noqa: E501
        """Get Profiles By customerId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_profiles_by_customer_id(customer_id, pagination_context, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param PaginationContextProfile pagination_context: pagination context (required)
        :param ProfileType profile_type: profile type
        :param str name_substring:
        :param list[SortColumnsProfile] sort_by: sort options
        :return: PaginationResponseProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_profiles_by_customer_id_with_http_info(customer_id, pagination_context, **kwargs)  # noqa: E501
        else:
            (data) = self.get_profiles_by_customer_id_with_http_info(customer_id, pagination_context, **kwargs)  # noqa: E501
            return data

    def get_profiles_by_customer_id_with_http_info(self, customer_id, pagination_context, **kwargs):  # noqa: E501
        """Get Profiles By customerId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_profiles_by_customer_id_with_http_info(customer_id, pagination_context, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param PaginationContextProfile pagination_context: pagination context (required)
        :param ProfileType profile_type: profile type
        :param str name_substring:
        :param list[SortColumnsProfile] sort_by: sort options
        :return: PaginationResponseProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'pagination_context', 'profile_type', 'name_substring', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_profiles_by_customer_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `get_profiles_by_customer_id`")  # noqa: E501
        # verify the required parameter 'pagination_context' is set
        if ('pagination_context' not in params or
                params['pagination_context'] is None):
            raise ValueError("Missing the required parameter `pagination_context` when calling `get_profiles_by_customer_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501
        if 'profile_type' in params:
            query_params.append(('profileType', params['profile_type']))  # noqa: E501
        if 'name_substring' in params:
            query_params.append(('nameSubstring', params['name_substring']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
            collection_formats['sortBy'] = 'multi'  # noqa: E501
        if 'pagination_context' in params:
            query_params.append(('paginationContext', params['pagination_context']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/profile/forCustomer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginationResponseProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_profiles_by_set_of_ids(self, profile_id_set, **kwargs):  # noqa: E501
        """Get Profiles By a set of ids  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_profiles_by_set_of_ids(profile_id_set, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] profile_id_set: set of profile ids (required)
        :return: list[Profile]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_profiles_by_set_of_ids_with_http_info(profile_id_set, **kwargs)  # noqa: E501
        else:
            (data) = self.get_profiles_by_set_of_ids_with_http_info(profile_id_set, **kwargs)  # noqa: E501
            return data

    def get_profiles_by_set_of_ids_with_http_info(self, profile_id_set, **kwargs):  # noqa: E501
        """Get Profiles By a set of ids  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_profiles_by_set_of_ids_with_http_info(profile_id_set, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] profile_id_set: set of profile ids (required)
        :return: list[Profile]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_id_set']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_profiles_by_set_of_ids" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_id_set' is set
        if ('profile_id_set' not in params or
                params['profile_id_set'] is None):
            raise ValueError("Missing the required parameter `profile_id_set` when calling `get_profiles_by_set_of_ids`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'profile_id_set' in params:
            query_params.append(('profileIdSet', params['profile_id_set']))  # noqa: E501
            collection_formats['profileIdSet'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/profile/inSet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Profile]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_profile(self, body, **kwargs):  # noqa: E501
        """Update Profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_profile(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Profile body: profile info (required)
        :return: Profile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_profile_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_profile_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_profile_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update Profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_profile_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Profile body: profile info (required)
        :return: Profile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/profile', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Profile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
