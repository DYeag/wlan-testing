# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PortalUsersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_portal_user(self, body, **kwargs):  # noqa: E501
        """Create new Portal User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_portal_user(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PortalUser body: portal user info (required)
        :return: PortalUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_portal_user_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_portal_user_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_portal_user_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create new Portal User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_portal_user_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PortalUser body: portal user info (required)
        :return: PortalUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_portal_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_portal_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/portalUser', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortalUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_portal_user(self, portal_user_id, **kwargs):  # noqa: E501
        """Delete PortalUser  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_portal_user(portal_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int portal_user_id: (required)
        :return: PortalUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_portal_user_with_http_info(portal_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_portal_user_with_http_info(portal_user_id, **kwargs)  # noqa: E501
            return data

    def delete_portal_user_with_http_info(self, portal_user_id, **kwargs):  # noqa: E501
        """Delete PortalUser  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_portal_user_with_http_info(portal_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int portal_user_id: (required)
        :return: PortalUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['portal_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_portal_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'portal_user_id' is set
        if ('portal_user_id' not in params or
                params['portal_user_id'] is None):
            raise ValueError("Missing the required parameter `portal_user_id` when calling `delete_portal_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'portal_user_id' in params:
            query_params.append(('portalUserId', params['portal_user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/portalUser', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortalUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_portal_user_by_id(self, portal_user_id, **kwargs):  # noqa: E501
        """Get portal user By Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portal_user_by_id(portal_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int portal_user_id: (required)
        :return: PortalUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_portal_user_by_id_with_http_info(portal_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_portal_user_by_id_with_http_info(portal_user_id, **kwargs)  # noqa: E501
            return data

    def get_portal_user_by_id_with_http_info(self, portal_user_id, **kwargs):  # noqa: E501
        """Get portal user By Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portal_user_by_id_with_http_info(portal_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int portal_user_id: (required)
        :return: PortalUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['portal_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_portal_user_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'portal_user_id' is set
        if ('portal_user_id' not in params or
                params['portal_user_id'] is None):
            raise ValueError("Missing the required parameter `portal_user_id` when calling `get_portal_user_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'portal_user_id' in params:
            query_params.append(('portalUserId', params['portal_user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/portalUser', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortalUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_portal_user_by_username(self, customer_id, username, **kwargs):  # noqa: E501
        """Get portal user by user name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portal_user_by_username(customer_id, username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: (required)
        :param str username: (required)
        :return: PortalUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_portal_user_by_username_with_http_info(customer_id, username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_portal_user_by_username_with_http_info(customer_id, username, **kwargs)  # noqa: E501
            return data

    def get_portal_user_by_username_with_http_info(self, customer_id, username, **kwargs):  # noqa: E501
        """Get portal user by user name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portal_user_by_username_with_http_info(customer_id, username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: (required)
        :param str username: (required)
        :return: PortalUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_portal_user_by_username" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `get_portal_user_by_username`")  # noqa: E501
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_portal_user_by_username`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/portalUser/byUsernameOrNull', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortalUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_portal_users_by_customer_id(self, customer_id, pagination_context, **kwargs):  # noqa: E501
        """Get PortalUsers By customerId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portal_users_by_customer_id(customer_id, pagination_context, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param PaginationContextPortalUser pagination_context: pagination context (required)
        :param list[SortColumnsPortalUser] sort_by: sort options
        :return: PaginationResponsePortalUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_portal_users_by_customer_id_with_http_info(customer_id, pagination_context, **kwargs)  # noqa: E501
        else:
            (data) = self.get_portal_users_by_customer_id_with_http_info(customer_id, pagination_context, **kwargs)  # noqa: E501
            return data

    def get_portal_users_by_customer_id_with_http_info(self, customer_id, pagination_context, **kwargs):  # noqa: E501
        """Get PortalUsers By customerId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portal_users_by_customer_id_with_http_info(customer_id, pagination_context, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param PaginationContextPortalUser pagination_context: pagination context (required)
        :param list[SortColumnsPortalUser] sort_by: sort options
        :return: PaginationResponsePortalUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'pagination_context', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_portal_users_by_customer_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `get_portal_users_by_customer_id`")  # noqa: E501
        # verify the required parameter 'pagination_context' is set
        if ('pagination_context' not in params or
                params['pagination_context'] is None):
            raise ValueError("Missing the required parameter `pagination_context` when calling `get_portal_users_by_customer_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
            collection_formats['sortBy'] = 'multi'  # noqa: E501
        if 'pagination_context' in params:
            query_params.append(('paginationContext', params['pagination_context']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/portalUser/forCustomer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginationResponsePortalUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_portal_users_by_set_of_ids(self, portal_user_id_set, **kwargs):  # noqa: E501
        """Get PortalUsers By a set of ids  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portal_users_by_set_of_ids(portal_user_id_set, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] portal_user_id_set: set of portalUser ids (required)
        :return: list[PortalUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_portal_users_by_set_of_ids_with_http_info(portal_user_id_set, **kwargs)  # noqa: E501
        else:
            (data) = self.get_portal_users_by_set_of_ids_with_http_info(portal_user_id_set, **kwargs)  # noqa: E501
            return data

    def get_portal_users_by_set_of_ids_with_http_info(self, portal_user_id_set, **kwargs):  # noqa: E501
        """Get PortalUsers By a set of ids  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_portal_users_by_set_of_ids_with_http_info(portal_user_id_set, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] portal_user_id_set: set of portalUser ids (required)
        :return: list[PortalUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['portal_user_id_set']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_portal_users_by_set_of_ids" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'portal_user_id_set' is set
        if ('portal_user_id_set' not in params or
                params['portal_user_id_set'] is None):
            raise ValueError("Missing the required parameter `portal_user_id_set` when calling `get_portal_users_by_set_of_ids`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'portal_user_id_set' in params:
            query_params.append(('portalUserIdSet', params['portal_user_id_set']))  # noqa: E501
            collection_formats['portalUserIdSet'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/portalUser/inSet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PortalUser]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_users_for_username(self, username, **kwargs):  # noqa: E501
        """Get Portal Users for username  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_for_username(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: (required)
        :return: list[PortalUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_users_for_username_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_users_for_username_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def get_users_for_username_with_http_info(self, username, **kwargs):  # noqa: E501
        """Get Portal Users for username  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_for_username_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: (required)
        :return: list[PortalUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users_for_username" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_users_for_username`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/portalUser/usersForUsername', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PortalUser]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_portal_user(self, body, **kwargs):  # noqa: E501
        """Update PortalUser  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_portal_user(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PortalUser body: PortalUser info (required)
        :return: PortalUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_portal_user_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_portal_user_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_portal_user_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update PortalUser  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_portal_user_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PortalUser body: PortalUser info (required)
        :return: PortalUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_portal_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_portal_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/portalUser', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortalUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
