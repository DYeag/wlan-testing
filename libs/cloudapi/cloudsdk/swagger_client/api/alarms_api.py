# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AlarmsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_alarm(self, customer_id, equipment_id, alarm_code, created_timestamp, **kwargs):  # noqa: E501
        """Delete Alarm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_alarm(customer_id, equipment_id, alarm_code, created_timestamp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: (required)
        :param int equipment_id: (required)
        :param AlarmCode alarm_code: (required)
        :param int created_timestamp: (required)
        :return: Alarm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_alarm_with_http_info(customer_id, equipment_id, alarm_code, created_timestamp, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_alarm_with_http_info(customer_id, equipment_id, alarm_code, created_timestamp, **kwargs)  # noqa: E501
            return data

    def delete_alarm_with_http_info(self, customer_id, equipment_id, alarm_code, created_timestamp, **kwargs):  # noqa: E501
        """Delete Alarm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_alarm_with_http_info(customer_id, equipment_id, alarm_code, created_timestamp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: (required)
        :param int equipment_id: (required)
        :param AlarmCode alarm_code: (required)
        :param int created_timestamp: (required)
        :return: Alarm
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'equipment_id', 'alarm_code', 'created_timestamp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_alarm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `delete_alarm`")  # noqa: E501
        # verify the required parameter 'equipment_id' is set
        if ('equipment_id' not in params or
                params['equipment_id'] is None):
            raise ValueError("Missing the required parameter `equipment_id` when calling `delete_alarm`")  # noqa: E501
        # verify the required parameter 'alarm_code' is set
        if ('alarm_code' not in params or
                params['alarm_code'] is None):
            raise ValueError("Missing the required parameter `alarm_code` when calling `delete_alarm`")  # noqa: E501
        # verify the required parameter 'created_timestamp' is set
        if ('created_timestamp' not in params or
                params['created_timestamp'] is None):
            raise ValueError("Missing the required parameter `created_timestamp` when calling `delete_alarm`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501
        if 'equipment_id' in params:
            query_params.append(('equipmentId', params['equipment_id']))  # noqa: E501
        if 'alarm_code' in params:
            query_params.append(('alarmCode', params['alarm_code']))  # noqa: E501
        if 'created_timestamp' in params:
            query_params.append(('createdTimestamp', params['created_timestamp']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/alarm', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Alarm',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_alarm_counts(self, customer_id, **kwargs):  # noqa: E501
        """Get counts of Alarms for customerId, optional set of equipment ids, optional set of alarm codes.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alarm_counts(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param list[int] equipment_ids: Set of equipment ids. Empty or null means retrieve for all equipment for the customer.
        :param list[AlarmCode] alarm_codes: Set of alarm codes. Empty or null means retrieve all.
        :return: AlarmCounts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_alarm_counts_with_http_info(customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_alarm_counts_with_http_info(customer_id, **kwargs)  # noqa: E501
            return data

    def get_alarm_counts_with_http_info(self, customer_id, **kwargs):  # noqa: E501
        """Get counts of Alarms for customerId, optional set of equipment ids, optional set of alarm codes.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alarm_counts_with_http_info(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param list[int] equipment_ids: Set of equipment ids. Empty or null means retrieve for all equipment for the customer.
        :param list[AlarmCode] alarm_codes: Set of alarm codes. Empty or null means retrieve all.
        :return: AlarmCounts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'equipment_ids', 'alarm_codes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alarm_counts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `get_alarm_counts`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501
        if 'equipment_ids' in params:
            query_params.append(('equipmentIds', params['equipment_ids']))  # noqa: E501
            collection_formats['equipmentIds'] = 'multi'  # noqa: E501
        if 'alarm_codes' in params:
            query_params.append(('alarmCodes', params['alarm_codes']))  # noqa: E501
            collection_formats['alarmCodes'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/alarm/counts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlarmCounts',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_alarmsfor_customer(self, customer_id, pagination_context, **kwargs):  # noqa: E501
        """Get list of Alarms for customerId, optional set of equipment ids, optional set of alarm codes.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alarmsfor_customer(customer_id, pagination_context, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param PaginationContextAlarm pagination_context: pagination context (required)
        :param list[int] equipment_ids: Set of equipment ids. Empty or null means retrieve all equipment for the customer.
        :param list[AlarmCode] alarm_codes: Set of alarm codes. Empty or null means retrieve all.
        :param int created_after_timestamp: retrieve alarms created after the specified time
        :param list[SortColumnsAlarm] sort_by: sort options
        :return: PaginationResponseAlarm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_alarmsfor_customer_with_http_info(customer_id, pagination_context, **kwargs)  # noqa: E501
        else:
            (data) = self.get_alarmsfor_customer_with_http_info(customer_id, pagination_context, **kwargs)  # noqa: E501
            return data

    def get_alarmsfor_customer_with_http_info(self, customer_id, pagination_context, **kwargs):  # noqa: E501
        """Get list of Alarms for customerId, optional set of equipment ids, optional set of alarm codes.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alarmsfor_customer_with_http_info(customer_id, pagination_context, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param PaginationContextAlarm pagination_context: pagination context (required)
        :param list[int] equipment_ids: Set of equipment ids. Empty or null means retrieve all equipment for the customer.
        :param list[AlarmCode] alarm_codes: Set of alarm codes. Empty or null means retrieve all.
        :param int created_after_timestamp: retrieve alarms created after the specified time
        :param list[SortColumnsAlarm] sort_by: sort options
        :return: PaginationResponseAlarm
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'pagination_context', 'equipment_ids', 'alarm_codes', 'created_after_timestamp', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alarmsfor_customer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `get_alarmsfor_customer`")  # noqa: E501
        # verify the required parameter 'pagination_context' is set
        if ('pagination_context' not in params or
                params['pagination_context'] is None):
            raise ValueError("Missing the required parameter `pagination_context` when calling `get_alarmsfor_customer`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501
        if 'equipment_ids' in params:
            query_params.append(('equipmentIds', params['equipment_ids']))  # noqa: E501
            collection_formats['equipmentIds'] = 'multi'  # noqa: E501
        if 'alarm_codes' in params:
            query_params.append(('alarmCodes', params['alarm_codes']))  # noqa: E501
            collection_formats['alarmCodes'] = 'multi'  # noqa: E501
        if 'created_after_timestamp' in params:
            query_params.append(('createdAfterTimestamp', params['created_after_timestamp']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
            collection_formats['sortBy'] = 'multi'  # noqa: E501
        if 'pagination_context' in params:
            query_params.append(('paginationContext', params['pagination_context']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/alarm/forCustomer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginationResponseAlarm',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_alarmsfor_equipment(self, customer_id, equipment_ids, **kwargs):  # noqa: E501
        """Get list of Alarms for customerId, set of equipment ids, and set of alarm codes.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alarmsfor_equipment(customer_id, equipment_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param list[int] equipment_ids: Set of equipment ids. Must not be empty. (required)
        :param list[AlarmCode] alarm_codes: Set of alarm codes. Empty or null means retrieve all.
        :param int created_after_timestamp: retrieve alarms created after the specified time
        :return: list[Alarm]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_alarmsfor_equipment_with_http_info(customer_id, equipment_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.get_alarmsfor_equipment_with_http_info(customer_id, equipment_ids, **kwargs)  # noqa: E501
            return data

    def get_alarmsfor_equipment_with_http_info(self, customer_id, equipment_ids, **kwargs):  # noqa: E501
        """Get list of Alarms for customerId, set of equipment ids, and set of alarm codes.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alarmsfor_equipment_with_http_info(customer_id, equipment_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param list[int] equipment_ids: Set of equipment ids. Must not be empty. (required)
        :param list[AlarmCode] alarm_codes: Set of alarm codes. Empty or null means retrieve all.
        :param int created_after_timestamp: retrieve alarms created after the specified time
        :return: list[Alarm]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'equipment_ids', 'alarm_codes', 'created_after_timestamp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alarmsfor_equipment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `get_alarmsfor_equipment`")  # noqa: E501
        # verify the required parameter 'equipment_ids' is set
        if ('equipment_ids' not in params or
                params['equipment_ids'] is None):
            raise ValueError("Missing the required parameter `equipment_ids` when calling `get_alarmsfor_equipment`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501
        if 'equipment_ids' in params:
            query_params.append(('equipmentIds', params['equipment_ids']))  # noqa: E501
            collection_formats['equipmentIds'] = 'multi'  # noqa: E501
        if 'alarm_codes' in params:
            query_params.append(('alarmCodes', params['alarm_codes']))  # noqa: E501
            collection_formats['alarmCodes'] = 'multi'  # noqa: E501
        if 'created_after_timestamp' in params:
            query_params.append(('createdAfterTimestamp', params['created_after_timestamp']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/alarm/forEquipment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Alarm]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_alarm_counts(self, **kwargs):  # noqa: E501
        """Reset accumulated counts of Alarms.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_alarm_counts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reset_alarm_counts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.reset_alarm_counts_with_http_info(**kwargs)  # noqa: E501
            return data

    def reset_alarm_counts_with_http_info(self, **kwargs):  # noqa: E501
        """Reset accumulated counts of Alarms.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_alarm_counts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_alarm_counts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/alarm/resetCounts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_alarm(self, body, **kwargs):  # noqa: E501
        """Update Alarm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_alarm(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Alarm body: Alarm info (required)
        :return: Alarm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_alarm_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_alarm_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_alarm_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update Alarm  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_alarm_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Alarm body: Alarm info (required)
        :return: Alarm
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_alarm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_alarm`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/alarm', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Alarm',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
