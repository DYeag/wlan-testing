# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class EquipmentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_equipment(self, body, **kwargs):  # noqa: E501
        """Create new Equipment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_equipment(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Equipment body: equipment info (required)
        :return: Equipment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_equipment_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_equipment_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_equipment_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create new Equipment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_equipment_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Equipment body: equipment info (required)
        :return: Equipment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_equipment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_equipment`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/equipment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Equipment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_equipment(self, equipment_id, **kwargs):  # noqa: E501
        """Delete Equipment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_equipment(equipment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int equipment_id: equipment id (required)
        :return: Equipment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_equipment_with_http_info(equipment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_equipment_with_http_info(equipment_id, **kwargs)  # noqa: E501
            return data

    def delete_equipment_with_http_info(self, equipment_id, **kwargs):  # noqa: E501
        """Delete Equipment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_equipment_with_http_info(equipment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int equipment_id: equipment id (required)
        :return: Equipment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['equipment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_equipment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'equipment_id' is set
        if ('equipment_id' not in params or
                params['equipment_id'] is None):
            raise ValueError("Missing the required parameter `equipment_id` when calling `delete_equipment`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'equipment_id' in params:
            query_params.append(('equipmentId', params['equipment_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/equipment', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Equipment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_default_equipment_details(self, **kwargs):  # noqa: E501
        """Get default values for Equipment details for a specific equipment type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_default_equipment_details(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EquipmentType equipment_type:
        :return: EquipmentDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_default_equipment_details_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_default_equipment_details_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_default_equipment_details_with_http_info(self, **kwargs):  # noqa: E501
        """Get default values for Equipment details for a specific equipment type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_default_equipment_details_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EquipmentType equipment_type:
        :return: EquipmentDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['equipment_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_default_equipment_details" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'equipment_type' in params:
            query_params.append(('equipmentType', params['equipment_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/equipment/defaultDetails', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_by_customer_id(self, customer_id, pagination_context, **kwargs):  # noqa: E501
        """Get Equipment By customerId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_by_customer_id(customer_id, pagination_context, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param PaginationContextEquipment pagination_context: pagination context (required)
        :param list[SortColumnsEquipment] sort_by: sort options
        :return: PaginationResponseEquipment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_equipment_by_customer_id_with_http_info(customer_id, pagination_context, **kwargs)  # noqa: E501
        else:
            (data) = self.get_equipment_by_customer_id_with_http_info(customer_id, pagination_context, **kwargs)  # noqa: E501
            return data

    def get_equipment_by_customer_id_with_http_info(self, customer_id, pagination_context, **kwargs):  # noqa: E501
        """Get Equipment By customerId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_by_customer_id_with_http_info(customer_id, pagination_context, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param PaginationContextEquipment pagination_context: pagination context (required)
        :param list[SortColumnsEquipment] sort_by: sort options
        :return: PaginationResponseEquipment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'pagination_context', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_equipment_by_customer_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `get_equipment_by_customer_id`")  # noqa: E501
        # verify the required parameter 'pagination_context' is set
        if ('pagination_context' not in params or
                params['pagination_context'] is None):
            raise ValueError("Missing the required parameter `pagination_context` when calling `get_equipment_by_customer_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
            collection_formats['sortBy'] = 'multi'  # noqa: E501
        if 'pagination_context' in params:
            query_params.append(('paginationContext', params['pagination_context']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/equipment/forCustomer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginationResponseEquipment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_by_customer_with_filter(self, customer_id, **kwargs):  # noqa: E501
        """Get Equipment for customerId, equipment type, and location id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_by_customer_with_filter(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param EquipmentType equipment_type: equipment type
        :param list[int] location_ids: set of location ids
        :param str criteria: search criteria
        :param list[SortColumnsEquipment] sort_by: sort options
        :param PaginationContextEquipment pagination_context: pagination context
        :return: PaginationResponseEquipment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_equipment_by_customer_with_filter_with_http_info(customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_equipment_by_customer_with_filter_with_http_info(customer_id, **kwargs)  # noqa: E501
            return data

    def get_equipment_by_customer_with_filter_with_http_info(self, customer_id, **kwargs):  # noqa: E501
        """Get Equipment for customerId, equipment type, and location id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_by_customer_with_filter_with_http_info(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param EquipmentType equipment_type: equipment type
        :param list[int] location_ids: set of location ids
        :param str criteria: search criteria
        :param list[SortColumnsEquipment] sort_by: sort options
        :param PaginationContextEquipment pagination_context: pagination context
        :return: PaginationResponseEquipment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'equipment_type', 'location_ids', 'criteria', 'sort_by', 'pagination_context']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_equipment_by_customer_with_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `get_equipment_by_customer_with_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501
        if 'equipment_type' in params:
            query_params.append(('equipmentType', params['equipment_type']))  # noqa: E501
        if 'location_ids' in params:
            query_params.append(('locationIds', params['location_ids']))  # noqa: E501
            collection_formats['locationIds'] = 'multi'  # noqa: E501
        if 'criteria' in params:
            query_params.append(('criteria', params['criteria']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
            collection_formats['sortBy'] = 'multi'  # noqa: E501
        if 'pagination_context' in params:
            query_params.append(('paginationContext', params['pagination_context']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/equipment/forCustomerWithFilter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginationResponseEquipment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_by_id(self, equipment_id, **kwargs):  # noqa: E501
        """Get Equipment By Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_by_id(equipment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int equipment_id: equipment id (required)
        :return: Equipment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_equipment_by_id_with_http_info(equipment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_equipment_by_id_with_http_info(equipment_id, **kwargs)  # noqa: E501
            return data

    def get_equipment_by_id_with_http_info(self, equipment_id, **kwargs):  # noqa: E501
        """Get Equipment By Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_by_id_with_http_info(equipment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int equipment_id: equipment id (required)
        :return: Equipment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['equipment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_equipment_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'equipment_id' is set
        if ('equipment_id' not in params or
                params['equipment_id'] is None):
            raise ValueError("Missing the required parameter `equipment_id` when calling `get_equipment_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'equipment_id' in params:
            query_params.append(('equipmentId', params['equipment_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/equipment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Equipment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_equipment_by_set_of_ids(self, equipment_id_set, **kwargs):  # noqa: E501
        """Get Equipment By a set of ids  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_by_set_of_ids(equipment_id_set, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] equipment_id_set: set of equipment ids (required)
        :return: list[Equipment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_equipment_by_set_of_ids_with_http_info(equipment_id_set, **kwargs)  # noqa: E501
        else:
            (data) = self.get_equipment_by_set_of_ids_with_http_info(equipment_id_set, **kwargs)  # noqa: E501
            return data

    def get_equipment_by_set_of_ids_with_http_info(self, equipment_id_set, **kwargs):  # noqa: E501
        """Get Equipment By a set of ids  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_equipment_by_set_of_ids_with_http_info(equipment_id_set, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] equipment_id_set: set of equipment ids (required)
        :return: list[Equipment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['equipment_id_set']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_equipment_by_set_of_ids" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'equipment_id_set' is set
        if ('equipment_id_set' not in params or
                params['equipment_id_set'] is None):
            raise ValueError("Missing the required parameter `equipment_id_set` when calling `get_equipment_by_set_of_ids`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'equipment_id_set' in params:
            query_params.append(('equipmentIdSet', params['equipment_id_set']))  # noqa: E501
            collection_formats['equipmentIdSet'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/equipment/inSet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Equipment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_equipment(self, body, **kwargs):  # noqa: E501
        """Update Equipment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Equipment body: equipment info (required)
        :return: Equipment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_equipment_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_equipment_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_equipment_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update Equipment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Equipment body: equipment info (required)
        :return: Equipment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_equipment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_equipment`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/equipment', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Equipment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_equipment_rrm_bulk(self, body, **kwargs):  # noqa: E501
        """Update RRM related properties of Equipment in bulk  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_rrm_bulk(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EquipmentRrmBulkUpdateRequest body: Equipment RRM bulk update request (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_equipment_rrm_bulk_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_equipment_rrm_bulk_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_equipment_rrm_bulk_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update RRM related properties of Equipment in bulk  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_equipment_rrm_bulk_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EquipmentRrmBulkUpdateRequest body: Equipment RRM bulk update request (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_equipment_rrm_bulk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_equipment_rrm_bulk`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/equipment/rrmBulk', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
