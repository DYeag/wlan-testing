# coding: utf-8

"""
    CloudSDK Portal API

    APIs that provide services for provisioning, monitoring, and history retrieval of various data elements of CloudSDK.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ClientsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_all_client_sessions_in_set(self, customer_id, client_macs, **kwargs):  # noqa: E501
        """Get list of Client sessions for customerId and a set of client MAC addresses.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_client_sessions_in_set(customer_id, client_macs, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param list[str] client_macs: Set of client MAC addresses. (required)
        :return: list[ClientSession]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_client_sessions_in_set_with_http_info(customer_id, client_macs, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_client_sessions_in_set_with_http_info(customer_id, client_macs, **kwargs)  # noqa: E501
            return data

    def get_all_client_sessions_in_set_with_http_info(self, customer_id, client_macs, **kwargs):  # noqa: E501
        """Get list of Client sessions for customerId and a set of client MAC addresses.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_client_sessions_in_set_with_http_info(customer_id, client_macs, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param list[str] client_macs: Set of client MAC addresses. (required)
        :return: list[ClientSession]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'client_macs']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_client_sessions_in_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `get_all_client_sessions_in_set`")  # noqa: E501
        # verify the required parameter 'client_macs' is set
        if ('client_macs' not in params or
                params['client_macs'] is None):
            raise ValueError("Missing the required parameter `client_macs` when calling `get_all_client_sessions_in_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501
        if 'client_macs' in params:
            query_params.append(('clientMacs', params['client_macs']))  # noqa: E501
            collection_formats['clientMacs'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/client/session/inSet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClientSession]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_clients_in_set(self, customer_id, client_macs, **kwargs):  # noqa: E501
        """Get list of Clients for customerId and a set of client MAC addresses.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_clients_in_set(customer_id, client_macs, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param list[str] client_macs: Set of client MAC addresses. (required)
        :return: list[Client]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_clients_in_set_with_http_info(customer_id, client_macs, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_clients_in_set_with_http_info(customer_id, client_macs, **kwargs)  # noqa: E501
            return data

    def get_all_clients_in_set_with_http_info(self, customer_id, client_macs, **kwargs):  # noqa: E501
        """Get list of Clients for customerId and a set of client MAC addresses.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_clients_in_set_with_http_info(customer_id, client_macs, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param list[str] client_macs: Set of client MAC addresses. (required)
        :return: list[Client]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'client_macs']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_clients_in_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `get_all_clients_in_set`")  # noqa: E501
        # verify the required parameter 'client_macs' is set
        if ('client_macs' not in params or
                params['client_macs'] is None):
            raise ValueError("Missing the required parameter `client_macs` when calling `get_all_clients_in_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501
        if 'client_macs' in params:
            query_params.append(('clientMacs', params['client_macs']))  # noqa: E501
            collection_formats['clientMacs'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/client/inSet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Client]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_blocked_clients(self, customer_id, **kwargs):  # noqa: E501
        """Retrieves a list of Clients for the customer that are marked as blocked. This per-customer list of blocked clients is pushed to every AP, so it has to be limited in size.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_blocked_clients(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Customer ID (required)
        :return: list[Client]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_blocked_clients_with_http_info(customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_blocked_clients_with_http_info(customer_id, **kwargs)  # noqa: E501
            return data

    def get_blocked_clients_with_http_info(self, customer_id, **kwargs):  # noqa: E501
        """Retrieves a list of Clients for the customer that are marked as blocked. This per-customer list of blocked clients is pushed to every AP, so it has to be limited in size.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_blocked_clients_with_http_info(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Customer ID (required)
        :return: list[Client]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_blocked_clients" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `get_blocked_clients`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/client/blocked', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Client]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_session_by_customer_with_filter(self, customer_id, pagination_context, **kwargs):  # noqa: E501
        """Get list of Client sessions for customerId and a set of equipment/location ids. Equipment and locations filters are joined using logical AND operation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_session_by_customer_with_filter(customer_id, pagination_context, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param PaginationContextClientSession pagination_context: pagination context (required)
        :param list[int] equipment_ids: set of equipment ids. Empty or null means retrieve all equipment for the customer.
        :param list[int] location_ids: set of location ids. Empty or null means retrieve for all locations for the customer.
        :param list[SortColumnsClientSession] sort_by: sort options
        :return: PaginationResponseClientSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_session_by_customer_with_filter_with_http_info(customer_id, pagination_context, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_session_by_customer_with_filter_with_http_info(customer_id, pagination_context, **kwargs)  # noqa: E501
            return data

    def get_client_session_by_customer_with_filter_with_http_info(self, customer_id, pagination_context, **kwargs):  # noqa: E501
        """Get list of Client sessions for customerId and a set of equipment/location ids. Equipment and locations filters are joined using logical AND operation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_session_by_customer_with_filter_with_http_info(customer_id, pagination_context, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param PaginationContextClientSession pagination_context: pagination context (required)
        :param list[int] equipment_ids: set of equipment ids. Empty or null means retrieve all equipment for the customer.
        :param list[int] location_ids: set of location ids. Empty or null means retrieve for all locations for the customer.
        :param list[SortColumnsClientSession] sort_by: sort options
        :return: PaginationResponseClientSession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'pagination_context', 'equipment_ids', 'location_ids', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_session_by_customer_with_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `get_client_session_by_customer_with_filter`")  # noqa: E501
        # verify the required parameter 'pagination_context' is set
        if ('pagination_context' not in params or
                params['pagination_context'] is None):
            raise ValueError("Missing the required parameter `pagination_context` when calling `get_client_session_by_customer_with_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501
        if 'equipment_ids' in params:
            query_params.append(('equipmentIds', params['equipment_ids']))  # noqa: E501
            collection_formats['equipmentIds'] = 'multi'  # noqa: E501
        if 'location_ids' in params:
            query_params.append(('locationIds', params['location_ids']))  # noqa: E501
            collection_formats['locationIds'] = 'multi'  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
            collection_formats['sortBy'] = 'multi'  # noqa: E501
        if 'pagination_context' in params:
            query_params.append(('paginationContext', params['pagination_context']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/client/session/forCustomer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginationResponseClientSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_for_customer(self, customer_id, **kwargs):  # noqa: E501
        """Get list of clients for a given customer by equipment ids  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_for_customer(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Customer ID (required)
        :param list[int] equipment_ids: Equipment ID
        :param list[SortColumnsClient] sort_by: sort options
        :param PaginationContextClient pagination_context: pagination context
        :return: PaginationResponseClient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_for_customer_with_http_info(customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_for_customer_with_http_info(customer_id, **kwargs)  # noqa: E501
            return data

    def get_for_customer_with_http_info(self, customer_id, **kwargs):  # noqa: E501
        """Get list of clients for a given customer by equipment ids  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_for_customer_with_http_info(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Customer ID (required)
        :param list[int] equipment_ids: Equipment ID
        :param list[SortColumnsClient] sort_by: sort options
        :param PaginationContextClient pagination_context: pagination context
        :return: PaginationResponseClient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'equipment_ids', 'sort_by', 'pagination_context']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_for_customer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `get_for_customer`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501
        if 'equipment_ids' in params:
            query_params.append(('equipmentIds', params['equipment_ids']))  # noqa: E501
            collection_formats['equipmentIds'] = 'multi'  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
            collection_formats['sortBy'] = 'multi'  # noqa: E501
        if 'pagination_context' in params:
            query_params.append(('paginationContext', params['pagination_context']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/client/forCustomer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginationResponseClient',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_by_mac_address(self, customer_id, **kwargs):  # noqa: E501
        """Get list of Clients for customerId and searching by macSubstring.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_by_mac_address(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param str mac_substring: MacAddress search criteria
        :param list[SortColumnsClient] sort_by: sort options
        :param PaginationContextClient pagination_context: pagination context
        :return: PaginationResponseClient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_by_mac_address_with_http_info(customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.search_by_mac_address_with_http_info(customer_id, **kwargs)  # noqa: E501
            return data

    def search_by_mac_address_with_http_info(self, customer_id, **kwargs):  # noqa: E501
        """Get list of Clients for customerId and searching by macSubstring.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_by_mac_address_with_http_info(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: customer id (required)
        :param str mac_substring: MacAddress search criteria
        :param list[SortColumnsClient] sort_by: sort options
        :param PaginationContextClient pagination_context: pagination context
        :return: PaginationResponseClient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'mac_substring', 'sort_by', 'pagination_context']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_by_mac_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `search_by_mac_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501
        if 'mac_substring' in params:
            query_params.append(('macSubstring', params['mac_substring']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
            collection_formats['sortBy'] = 'multi'  # noqa: E501
        if 'pagination_context' in params:
            query_params.append(('paginationContext', params['pagination_context']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/client/searchByMac', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginationResponseClient',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_client(self, body, **kwargs):  # noqa: E501
        """Update Client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Client body: Client info (required)
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_client_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_client_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_client_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update Client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Client body: Client info (required)
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_client" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tip_wlan_ts_auth']  # noqa: E501

        return self.api_client.call_api(
            '/portal/client', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Client',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
